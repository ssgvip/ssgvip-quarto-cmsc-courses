[
  {
    "objectID": "catalog.html",
    "href": "catalog.html",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "",
    "text": "The following a complete catalog of CMSC courses listed in the VCU 2022-2023 Catalog. Not all courses are offered on a regular basis."
  },
  {
    "objectID": "catalog.html#cmsc-101---introduction-to-computer-science",
    "href": "catalog.html#cmsc-101---introduction-to-computer-science",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 101 - Introduction to Computer Science",
    "text": "CMSC 101 - Introduction to Computer Science\nSemester course. 3 hours.\nRestrictions: MATH 139 or MATH 141 with a minimum grade of C.\nDescription: An introduction to the work of computer scientists, including an overview of current research and application areas as well as career opportunities. Topics include problem-solving, the basics of computer organization, the software engineering life cycle, research resources and social and ethical aspects of technology. Additional topics also include binary, hexadecimal, two’s complement, floating point representation, ASCII and Unicode.\nTopics: ascii, basics of computer organiation, ethical aspects of technology, numeric representation, problem solving, research resources, social aspects of technology, software engineering life cycle, unicode"
  },
  {
    "objectID": "catalog.html#cmsc-144---code-beats-with-python",
    "href": "catalog.html#cmsc-144---code-beats-with-python",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 144 - Code Beats With Python",
    "text": "CMSC 144 - Code Beats With Python\nSemester course. 1 hour.\nRestrictions: (none)\nDescription: An introduction to computer programming in Python by teaching students to create hip hop beats. Teaches fundamental programming concepts including sequencing, syntax, variables, functions, parameters, lists, repetition and modularization. Teaches just enough music theory to ensure that student-made beats sound great, including fundamental concepts such as melody, rhythm, harmony, chord progression and orchestration. Students will complete in-class activities that reinforce class concepts and, if completed correctly, demonstrate a clear understanding of the material.\nTopics: chord progression, functions, harmony, lists, melody, modularization, orchestration, parameters, repetition, rhytum, sequencing, syntax, variables"
  },
  {
    "objectID": "catalog.html#cmsc-191---topics-in-computer-science",
    "href": "catalog.html#cmsc-191---topics-in-computer-science",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 191 - Topics in Computer Science",
    "text": "CMSC 191 - Topics in Computer Science\nSemester course. 3 hours.\nRestrictions: permission of the instructor.\nDescription: This course will teach selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester and prerequisites.\nTopics: selected topics"
  },
  {
    "objectID": "catalog.html#cmsc-210---computers-and-programming",
    "href": "catalog.html#cmsc-210---computers-and-programming",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 210 - Computers and Programming",
    "text": "CMSC 210 - Computers and Programming\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Introduction to object-oriented programming using Python. The course introduces students to structured programming logic and design techniques. The course content also includes instruction in critical thinking and problem-solving skills using contemporary tools. Specific topics include flowcharting, pseudocode and program control structures, including sequence, selection and repetition. This course is not applicable for credit toward the BS in Computer Science.\nTopics: calling functions, conditional execution, control structures, critical thinking, debugging, dictionaries, expressions, files, flow charting, lists, loops and iterations, network programming, problem solving, program design, programming logic, pseudocode, regular expressions, repetition, sequencing, statement, strings, structured programming, tuples, variables, writing functions"
  },
  {
    "objectID": "catalog.html#cmsc-235---computing-and-data-ethics",
    "href": "catalog.html#cmsc-235---computing-and-data-ethics",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 235 - Computing and Data Ethics",
    "text": "CMSC 235 - Computing and Data Ethics\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Introduction to ethical considerations for computing and working with data, legal implications surrounding data and computational systems, and sociotechnical responsibilities.\nTopics: ethics, Legal implications, sociotechnical responsibilities"
  },
  {
    "objectID": "catalog.html#cmsc-245---introduction-to-programming-using-c",
    "href": "catalog.html#cmsc-245---introduction-to-programming-using-c",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 245 - Introduction to Programming Using C++",
    "text": "CMSC 245 - Introduction to Programming Using C++\nSemester course. 3 hours.\nRestrictions: MATH 151 or satisfactory score on the Mathematical Placement Test. Students registering for CMSC 245 must have taken the VCU Mathematics Placement Test within the one-year period immediately preceding the beginning of the course. An exception to this policy is made in the case in which the stated alternative prerequisite course has been completed at VCU. Students are expected to have fundamental computer skills.\nDescription: Introduction to the concepts and practice of structured programming using C++. Problem-solving, top-down design of algorithms, objects, basic C++ syntax, control structures, functions and arrays. This course is intended for engineering majors.\nTopics: arrays, c++ syntax, control structures, functions, problem solving, top down design"
  },
  {
    "objectID": "catalog.html#cmsc-246---advanced-programming-using-c",
    "href": "catalog.html#cmsc-246---advanced-programming-using-c",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 246 - Advanced Programming Using C++",
    "text": "CMSC 246 - Advanced Programming Using C++\nSemester course. 3 hours.\nRestrictions: CMSC 245.\nDescription: Advanced programming in C++. Topics include program design, objects, classes, inheritance, files, strings, linked lists, stacks, queues, binary trees, recursion, and basic searching and sorting techniques. This course is intended for engineering majors.\nTopics: basic searching, basic sorting, binary trees, classes, files, inheritance, linked lists, objects, program design, queues, recursion, stacks, strings"
  },
  {
    "objectID": "catalog.html#cmsc-254---introduction-to-problem-solving",
    "href": "catalog.html#cmsc-254---introduction-to-problem-solving",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 254 - Introduction to Problem-solving",
    "text": "CMSC 254 - Introduction to Problem-solving\nSemester course. 4 hours.\nRestrictions: (none)\nDescription: Introduction to problem solving and implementation of solutions using Python. The course introduces students to concepts and practice of structured programming, problem-solving, top-down design of algorithms, a Python language syntax, control structures and arrays. The course content also includes instruction in critical-thinking and problem-solving skills using contemporary tools. Specific topics include flowcharting, pseudocode and program control structures, including sequence, selection, repetition and modularization.\nTopics: analysis, arrays, basic concepts of computer systems, control structures, critical thinking, data, decision structures, dictionaries, flow charting, functions, lists, modeling, modularization, problem solving, processing code, programming, pseudocode, python syntax, repetition, repetition structures, selection, sequencing, sequential data structures, structured programming, structures, top down design, tuples"
  },
  {
    "objectID": "catalog.html#cmsc-255---introduction-to-programming",
    "href": "catalog.html#cmsc-255---introduction-to-programming",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 255 - Introduction to Programming",
    "text": "CMSC 255 - Introduction to Programming\nSemester course. 4 hours.\nRestrictions: calculus-level placement on the VCU Mathematics Placement Test within the one-year period immediately preceding enrollment in the course, or MATH 151 or equivalent. Students are expected to have fundamental computer skills.\nDescription: Introduction to object-oriented programming using Java. Topics include problem-solving, top-down design of algorithms using control structures, methods, arrays, basic I/O, basic concepts of objects and classes in Java, Java classes for manipulating strings, and introduction to program testing, UML notation and integrated development environments. Students may not receive credit for both CMSC 255 and INFO 250.\nTopics: algorithms, arrays, arrays, input/output, classes, computers, computers, control structures, control structures, ide, java, methods, objects, problem solving, problem solving, program testing, simple data types, strings, syntax, top down design, uml"
  },
  {
    "objectID": "catalog.html#cmsc-256---data-structures-and-object-oriented-programming",
    "href": "catalog.html#cmsc-256---data-structures-and-object-oriented-programming",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 256 - Data Structures and Object Oriented Programming",
    "text": "CMSC 256 - Data Structures and Object Oriented Programming\nSemester course. 4 hours.\nRestrictions: CMSC 255 with a minimum grade of C; corequisite: CMSC 302.\nDescription: Advanced programming using Java. Topics include introduction to object-oriented design, inheritance, polymorphism, exceptions, interfaces, linked lists, stacks, queues, binary trees, recursion, and basic searching and sorting techniques. Continued focus on program testing and UML notation. Students may not receive credit for both CMSC 256 and INFO 350.\nTopics: abstract complexity, algorithms, algorithms, basic searching, binary trees, classes, data structures, deques, exceptions, generics, graphs, hash functions, inheritance, interfaces, interfaces, iterators, linked lists, linked lists, lists, object oriented programming, objects, polymorphism, queues, queues, recursion, recursion, sorting, sorting, stacks, stacks, trees, uml"
  },
  {
    "objectID": "catalog.html#cmsc-257---computer-systems",
    "href": "catalog.html#cmsc-257---computer-systems",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 257 - Computer Systems",
    "text": "CMSC 257 - Computer Systems\nSemester course. 4 hours.\nRestrictions: CMSC 256 with a minimum grade of C.\nDescription: Topics include UNIX essentials; system programming in C; machine-level representation and organization of programs/data, arrays and pointers; types, structs and unions; strings; bit/byte operations; memory management; shell programming; input/output, including file handling; debugging; signals; network programming using sockets; program concurrency using forks and threads; experiments on program performance and optimization techniques.\nTopics: arrays, bit/bye operations, debugging, files, forks and threads, input/output, machine-level representation, memory management, network programming using sockets, optimization, pointers, program performance, programming in c, shell programming, signals, types, structs, and unions"
  },
  {
    "objectID": "catalog.html#cmsc-302---introduction-to-discrete-structures",
    "href": "catalog.html#cmsc-302---introduction-to-discrete-structures",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 302 - Introduction to Discrete Structures",
    "text": "CMSC 302 - Introduction to Discrete Structures\nSemester course. 3 hours.\nRestrictions: CMSC 255 with minimum grade of C.\nDescription: Logic and proofs, sets, functions, sequences and sums, relations, graphs, trees, induction and recursion, advanced counting technique (recurrences).\nTopics: algebra, counting, functions, functions, graphs, graphs, induction, logic, logic, matrices, probability, proofs, proofs, recurrences, recurrences, recursion, relations, relations, sequences, sequencing, set theory, sets, summations, sums, trees, trees"
  },
  {
    "objectID": "catalog.html#cmsc-303---introduction-to-the-theory-of-computation",
    "href": "catalog.html#cmsc-303---introduction-to-the-theory-of-computation",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 303 - Introduction to the Theory of Computation",
    "text": "CMSC 303 - Introduction to the Theory of Computation\nSemester course. 3 hours.\nRestrictions: CMSC 302 or the equivalent with a grade of C or better.\nDescription: Complexity classes, grammars, automata, formal languages, Turing machines, computability.\nTopics: automata, complexity analysis, computability theory, context-free grammars, discrete math, finite automata, logic, pushdown automata, regular expressions, turing machines"
  },
  {
    "objectID": "catalog.html#cmsc-311---computer-organization",
    "href": "catalog.html#cmsc-311---computer-organization",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 311 - Computer Organization",
    "text": "CMSC 311 - Computer Organization\nSemester course. 3 hours.\nRestrictions: CMSC 302 with minimum grade of C; corequisite: CMSC 257.\nDescription: Introduction to the basic organization of computers including elementary digital logic design, processor and arithmetic/logic unit design, data paths, memory hierarchy, I/O devices, instruction set architecture and addressing modes.\nTopics: addressing modes, architecture, assembly language, cache memories, computers, data, data paths, data types, digital logic structures, input/output, input/output, instruction set architecture, instruction set architecture, logic, machine language, memory hierarchy, memory hierarchy, organization, stacks, trap routines, trap subroutines, unit design, virtual memory, von neumann model"
  },
  {
    "objectID": "catalog.html#cmsc-312---introduction-to-operating-systems",
    "href": "catalog.html#cmsc-312---introduction-to-operating-systems",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 312 - Introduction to Operating Systems",
    "text": "CMSC 312 - Introduction to Operating Systems\nSemester course. 3 hours.\nRestrictions: CMSC 311 or EGRE 364.\nDescription: Computer systems design, I/O processing, secondary memory organization, command languages, memory management and job scheduling. Students will work in teams to design and implement an operating system simulation.\nTopics: command languages, computer systems design, concurrency, debugging, distributed systems, file management, input/output, job scheduling, memory management, memory management, operating systems, process scheduling, secondary memory"
  },
  {
    "objectID": "catalog.html#cmsc-320---software-engineering-and-web-development",
    "href": "catalog.html#cmsc-320---software-engineering-and-web-development",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 320 - Software Engineering and Web Development",
    "text": "CMSC 320 - Software Engineering and Web Development\nSemester course. 3 hours.\nRestrictions: CMSC 210.\nDescription: Introduction to software engineering and web development. The course introduces students to the software development process, including design, development and testing principles. Students will apply these principles in the development of a web application. This course is not applicable for credit toward any College of Engineering degrees.\nTopics: design, development, documentation, gathering, software development, systems development, testing, testing functionality, web development, web development"
  },
  {
    "objectID": "catalog.html#cmsc-330---data-science-skills",
    "href": "catalog.html#cmsc-330---data-science-skills",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 330 - Data Science Skills",
    "text": "CMSC 330 - Data Science Skills\nSemester course. 3 hours.\nRestrictions: CMSC 210.\nDescription: Introduction to data science skills. The course introduces students to the foundations of data science and the tools used to collect, analyze and represent data. Students will apply these principles in both analysis and visualization projects. This course is not applicable for credit toward any College of Engineering degrees.\nTopics: analysis, analysis, data, data, data management, data manipulation, data quality, security, visualization, visualization"
  },
  {
    "objectID": "catalog.html#cmsc-340---cybersecurity-skills",
    "href": "catalog.html#cmsc-340---cybersecurity-skills",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 340 - Cybersecurity Skills",
    "text": "CMSC 340 - Cybersecurity Skills\nSemester course. 3 hours.\nRestrictions: CMSC 210.\nDescription: Introduction to cybersecurity skills. The course introduces students to cybersecurity terminology, standards and best practices. Students will apply these practices as part of a cybersecurity-focused project. This course is not applicable for credit toward any College of Engineering degrees.\nTopics: cryptographic systems, cybersecurity, ethics, firewalls, information security, logic, physical security, risk management, security, security maintenance, security technology, vpns"
  },
  {
    "objectID": "catalog.html#cmsc-355---fundamentals-of-software-engineering",
    "href": "catalog.html#cmsc-355---fundamentals-of-software-engineering",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 355 - Fundamentals of Software Engineering",
    "text": "CMSC 355 - Fundamentals of Software Engineering\nSemester course. 3 hours.\nRestrictions: CMSC 256 or EGRE 246, either with a minimum grade of C.\nDescription: Provides an overview of how to engineer software systems, including all stages of the software development process based on agile principles. Familiarizes students with modern software tooling and the principles of software quality and testing. Students will work in teams to gain experience in software development methodology, write specification and design documents, and develop a prototype.\nTopics: agile, agile, ci/cd, code management, containerization, ci/cd, design, github, patterns, prototyping, requirement engineering, serverless coding, service oriented design techniques, software architecture, software design, software development, software development, software lifecycle, software maintenance, software modeling, software quality, software validation, software verification, testing"
  },
  {
    "objectID": "catalog.html#cmsc-391---topics-in-computer-science",
    "href": "catalog.html#cmsc-391---topics-in-computer-science",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 391 - Topics in Computer Science",
    "text": "CMSC 391 - Topics in Computer Science\nSemester course. 3 hours.\nRestrictions: permission of the instructor.\nDescription: This course will teach selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester and prerequisites.\nTopics: selected topics"
  },
  {
    "objectID": "catalog.html#cmsc-401---algorithm-analysis-with-advanced-data-structures",
    "href": "catalog.html#cmsc-401---algorithm-analysis-with-advanced-data-structures",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 401 - Algorithm Analysis with Advanced Data Structures",
    "text": "CMSC 401 - Algorithm Analysis with Advanced Data Structures\nSemester course. 3 hours.\nRestrictions: CMSC 256 with a grade of C or better and CMSC 302 with a grade of C or better.\nDescription: Introduction to algorithm analysis and complexity classes. Advanced data structures topics including multiple linked lists, height-balanced trees, B-trees, hashing and graph representation; incorporating data structures into object-oriented design. Analysis of various searching and sorting algorithms. Algorithm design topics include divide-and-conquer, dynamic programming and greedy methods.\nTopics: algorithms, algorithms, analysis, b-trees, complexity analysis, data structures, data structures, data structures, design, divide and conquer approach, dynamic programming, graph algorithms, graphs, greedy approach, hashing, height-balanced trees, linked lists, objects, recurrences, sorting, sorting"
  },
  {
    "objectID": "catalog.html#cmsc-403---programming-languages",
    "href": "catalog.html#cmsc-403---programming-languages",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 403 - Programming Languages",
    "text": "CMSC 403 - Programming Languages\nSemester course. 3 hours.\nRestrictions: CMSC 256 and CMSC 303, both with a minimum grade of C.\nDescription: Survey of representative modern programming languages. Formal definition of programming languages including specifications of syntax and semantics. Precedence, infix, prefix and postfix notation. Global properties of algorithmic languages. Sub-routines, co-routines and tasks. List processing, string manipulation, data description and simulation languages. Run-time representation of program and data structures.\nTopics: algorithms, co-routines, data, data structures, design, functional programming, infix, languages, lists, object oriented programming, parsing, postfix, precendence, prefix, semantics, semantics, strings, sub-routines, symbol table, syntax, syntax"
  },
  {
    "objectID": "catalog.html#cmsc-404---compiler-construction",
    "href": "catalog.html#cmsc-404---compiler-construction",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 404 - Compiler Construction",
    "text": "CMSC 404 - Compiler Construction\nSemester course. 3 hours.\nRestrictions: CMSC 401 and 403.\nDescription: A first course in compiler theory and construction. Formal description of languages, underlying theory and design techniques for compilers, lexical analysis, syntax analysis, syntax-directed translation, intermediate languages, run-time system management, code generation, code optimization, compiler-building tools.\nTopics: code management, compilers, intermediate languages, languages, lexical analysis, optimization, run-time system management, syntax"
  },
  {
    "objectID": "catalog.html#cmsc-409---artificial-intelligence",
    "href": "catalog.html#cmsc-409---artificial-intelligence",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 409 - Artificial Intelligence",
    "text": "CMSC 409 - Artificial Intelligence\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C and MATH 310.\nDescription: Covers problem spaces, problem-solving methods, game playing, knowledge representatives, expert systems, natural language understanding.\nTopics: expert systems, game playing, knowledge representatives, machine learning, natural language, problem solving, problem spaces"
  },
  {
    "objectID": "catalog.html#cmsc-410---introduction-to-quantum-computing",
    "href": "catalog.html#cmsc-410---introduction-to-quantum-computing",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 410 - Introduction to Quantum Computing",
    "text": "CMSC 410 - Introduction to Quantum Computing\nSemester course. 3 hours.\nRestrictions: CMSC 401 and MATH 310, both with a minimum grade of B.\nDescription: Introduction to quantum information processing: state vectors and density operators, tensor product space, unitary evolution, no-go theorems, measurement, qubit, gate model of quantum computing, quantum complexity theory, quantum error correction, quantum algorithms, and quantum machine learning.\nTopics: density operators, measurement, no-go theorems, quantum algorithms, quantum complexity, quantum computing, quantum error correction, quantum machine learning, qubit, state vectors, tensor, unitary evolution"
  },
  {
    "objectID": "catalog.html#cmsc-411---computer-graphics",
    "href": "catalog.html#cmsc-411---computer-graphics",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 411 - Computer Graphics",
    "text": "CMSC 411 - Computer Graphics\nSemester course. 3 hours.\nRestrictions: CMSC 355 and MATH 310.\nDescription: Presents mathematical techniques for graphic development and transformation, curve and surface approximation and projections, graphical languages and data structures and their implementation, graphic modeling.\nTopics: curve and surface approximations, data structures, graphic development, graphic development, projections, transformation"
  },
  {
    "objectID": "catalog.html#cmsc-412---social-network-analysis-and-cybersecurity-risks",
    "href": "catalog.html#cmsc-412---social-network-analysis-and-cybersecurity-risks",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 412 - Social Network Analysis and Cybersecurity Risks",
    "text": "CMSC 412 - Social Network Analysis and Cybersecurity Risks\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C.\nDescription: Covers network models, link prediction and analysis, centrality measures, random networks, power-laws and preferential attachment, small world phenomenon and decentralized search, community structure, information propagation in networks, and security and privacy issues in OSNs.\nTopics: centrality, community structure, decentralized search, information propagation, link analysis, network models, networks, osns, power-laws, preferential attachment, random networks, security, small world phenomenon"
  },
  {
    "objectID": "catalog.html#cmsc-413---introduction-to-cybersecurity",
    "href": "catalog.html#cmsc-413---introduction-to-cybersecurity",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 413 - Introduction to Cybersecurity",
    "text": "CMSC 413 - Introduction to Cybersecurity\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C.\nDescription: This course provides introduction and basic concepts of computer security, cyber attacks, cyber defense, cyber forensics and cyber ethics.\nTopics: cyber defense, cyber ethics, cyber forensics, cybersecurity, security"
  },
  {
    "objectID": "catalog.html#cmsc-414---computer-and-network-security",
    "href": "catalog.html#cmsc-414---computer-and-network-security",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 414 - Computer and Network Security",
    "text": "CMSC 414 - Computer and Network Security\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C. Corequisite: CMSC 312.\nDescription: This course covers the best practices of computer systems and network security. Key topics include security architecture, cryptographic systems and security management tools.\nTopics: application layer attacks, architecture, computer networks, computer security, computer systems design, cryptographic systems, cryptographic systems, firewalls, internet, link layer attacks, network penetration, networks, networks, security, security"
  },
  {
    "objectID": "catalog.html#cmsc-415---introduction-to-cryptography",
    "href": "catalog.html#cmsc-415---introduction-to-cryptography",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 415 - Introduction to Cryptography",
    "text": "CMSC 415 - Introduction to Cryptography\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C.\nDescription: This course provides a rigorous and theoretical introduction to modern cryptography. Key topics include symmetric key encryption and authentication, public key encryption, and digital signatures.\nTopics: authentication, cryptographic systems, digital signatures, public key encryption, symmetric key encryption"
  },
  {
    "objectID": "catalog.html#cmsc-416---introduction-to-natural-language-processing",
    "href": "catalog.html#cmsc-416---introduction-to-natural-language-processing",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 416 - Introduction to Natural Language Processing",
    "text": "CMSC 416 - Introduction to Natural Language Processing\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C.\nDescription: Covers rule-based and statistical methods for creating computer programs that analyze, generate and understand human language. Topics include regular expressions and automata, context-free grammars, probabilistic classifiers, and machine learning. Word-level, syntactic and semantic processing are all considered. Application to real-world problems such as spell-checking, Web search, automatic question answering, authorship identification and developing conversational interfaces.\nTopics: automation, computer systems design, context-free grammars, machine learning, natural language, probabilistic classifiers, real-world applications, regular expressions, semantics, spell-checking, statistics, syntax, web search"
  },
  {
    "objectID": "catalog.html#cmsc-420---software-project-management",
    "href": "catalog.html#cmsc-420---software-project-management",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 420 - Software Project Management",
    "text": "CMSC 420 - Software Project Management\nSemester course. 3 hours.\nRestrictions: CMSC 355 with a minimum grade of C.\nDescription: Study of the logistics of team software development. Students work in teams to gain experience in software management and develop the components of a larger software product. Topics include risk management, project planning, quality management, configuration management and software testing.\nTopics: project planning, quality management, risk management, software development, software management, software quality"
  },
  {
    "objectID": "catalog.html#cmsc-425---introduction-to-software-analysis-and-testing",
    "href": "catalog.html#cmsc-425---introduction-to-software-analysis-and-testing",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 425 - Introduction to Software Analysis and Testing",
    "text": "CMSC 425 - Introduction to Software Analysis and Testing\nSemester course. 3 hours.\nRestrictions: CMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program.\nDescription: A practical introduction to testing complex software applications. An introduction to concepts and techniques used in the analysis of software, including basic and advanced control flow and data flow analyses. Using analytic results to derive test data and validate the correct implementation of programs. Advanced testing strategies including random, structural, mutation and fuzzing.\nTopics: advanced testing strategies, analysis, concolic hybrid analysis, control flow, control flow, coverage-driven systematic software testing, data flow, data-flow, dynamic programming, limitations, program analysis-driven testing, software development, software management, software validation, software verification, static programming, symbolic program analysis, test case coverage, testing, testing"
  },
  {
    "objectID": "catalog.html#cmsc-428---mobile-programming-ios",
    "href": "catalog.html#cmsc-428---mobile-programming-ios",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 428 - Mobile Programming: iOS",
    "text": "CMSC 428 - Mobile Programming: iOS\nSemester course. 3 hours.\nRestrictions: CMSC 355, with a minimum grade of C.\nDescription: This course covers the fundamentals of Swift, Xcode and iOS for programming and design of iOS applications. Background in object-oriented programming and access to a computer with Xcode platform is required.\nTopics: ios, objects, swift, xcode"
  },
  {
    "objectID": "catalog.html#cmsc-435---introduction-to-data-science",
    "href": "catalog.html#cmsc-435---introduction-to-data-science",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 435 - Introduction to Data Science",
    "text": "CMSC 435 - Introduction to Data Science\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C.\nDescription: This course covers understanding, representation, storage, retrieval, preprocessing and analysis of data. Specific topics include data quality and preprocessing, database management systems, data warehouses, selected methods for scalable unsupervised and supervised data analysis, and assessment of results generated by these methods. Students will be engaged in analysis of real-life data from data preprocessing, through data analysis, to the assessment of a knowledge product.\nTopics: analysis, data, data analysis, data quality, data structures, database"
  },
  {
    "objectID": "catalog.html#cmsc-440---data-communication-and-networking",
    "href": "catalog.html#cmsc-440---data-communication-and-networking",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 440 - Data Communication and Networking",
    "text": "CMSC 440 - Data Communication and Networking\nSemester course. 3 hours.\nRestrictions: CMSC 257 with a minimum grade of C. Enrollment is restricted to majors in the College of Engineering.\nDescription: This course explores computer networking, focusing on the applications and protocols that run on the Internet. Students will take a top-down approach to the layered network architecture, studying applications first and then proceeding down the network “stack” toward the physical link. Students will examine the operation of applications such as the web, FTP, e-mail and DNS. At the transport layer, students will study both connectionless UDP and connection-oriented TCP, with an in-depth study of TCP operation, specifically flow control and congestion control. Data communications are explored through various data routing protocols. Additional topics include network security and wireless/mobile networking.\nTopics: architecture, architecture, client-server model, computer networks, data, dns, dns , e-mail, flow control, http application, internet, mail applications, network edge, network models, networks, networks, networks vulnerability, pipelining, protocol layers, reliable transmission, socket programming, tcp, udp, web development"
  },
  {
    "objectID": "catalog.html#cmsc-441---senior-design-studio-i-laboratoryproject-time",
    "href": "catalog.html#cmsc-441---senior-design-studio-i-laboratoryproject-time",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 441 - Senior Design Studio I (Laboratory/Project Time)",
    "text": "CMSC 441 - Senior Design Studio I (Laboratory/Project Time)\nSemester course. 2 hours.\nRestrictions: CMSC 355; and UNIV 200 or HONR 200 or equivalent, both with minimum grades of C. Corequisite: CMSC 451. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses.\nDescription: A minimum of six laboratory hours per week dedicated to the execution phase of the senior design (capstone) project for the computer science major. Tasks include team meetings, brainstorming, sponsor advising, researching, designing, implementing, reviewing, testing and validating projects. Each student will participate, either individually or as part of a team, in a project or other experience approved by the course coordinator or sponsored by another computer science faculty member. Students will submit a detailed written description of their proposed project or experience and will present orally some aspect of what they have learned and/or done during the semester. This course cannot be counted as upper-level CMSC electives for students graduating under bullet\nTopics: brainstorming, capstone, design, final project, project planning, research, teamwork, testing"
  },
  {
    "objectID": "catalog.html#cmsc-442---senior-design-studio-ii-laboratoryproject-time",
    "href": "catalog.html#cmsc-442---senior-design-studio-ii-laboratoryproject-time",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 442 - Senior Design Studio II (Laboratory/Project Time)",
    "text": "CMSC 442 - Senior Design Studio II (Laboratory/Project Time)\nSemester course. 2 hours.\nRestrictions: CMSC 441, CMSC 451 and CMSC 508, each with a minimum grade of C. Corequisite: CMSC 452. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses.\nDescription: A minimum of six laboratory hours per week dedicated to the execution phase of the senior design (capstone) project for the computer science major. Tasks include team meetings, brainstorming, sponsor advising, researching, designing, implementing, reviewing, testing and validating projects. Each student will participate, either individually or as part of a team, in a project or other experience approved by the course coordinator or sponsored by another computer science faculty member. Students must continue on the same project that was started in CMSC 441 and CMSC 451. A final project report and presentation are due at the conclusion of the two-semester project or experience. This course cannot be counted as upper-level CMSC electives for students graduating under bulletins prio\nTopics: brainstorming, final project, project planning, researching, teamwork, testing"
  },
  {
    "objectID": "catalog.html#cmsc-451---senior-project-i",
    "href": "catalog.html#cmsc-451---senior-project-i",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 451 - Senior Project I",
    "text": "CMSC 451 - Senior Project I\nSemester course. 1 hour.\nRestrictions: CMSC 355 with minimum grade of C; and UNIV 200 or HONR 200 or equivalent. Corequisite: CMSC 441. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses.\nDescription: This weekly seminar presents and discusses topics relevant to senior-level computer science students in support of the capstone project and upcoming graduation. A single course coordinator manages and administers the course and schedules the various faculty lectures and guest speakers. Topics include, but are not limited to, the following: proposal writing; project planning and management; scheduling resources and budgeting for software development projects; patents and intellectual property; entrepreneurship; ethical, legal and social issues in computing; and professional responsibilities of computer scientists. Each student will write and revise a research paper on a technical topic associated with his or her project or experience. A final project report and presentat\nTopics: capstone, entrepreneurship, ethics, final project, project planning, social aspects of technology, software development"
  },
  {
    "objectID": "catalog.html#cmsc-452---senior-project-ii",
    "href": "catalog.html#cmsc-452---senior-project-ii",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 452 - Senior Project II",
    "text": "CMSC 452 - Senior Project II\nSemester course. 1 hour.\nRestrictions: CMSC 441, CMSC 451 and CMSC 508, each with a minimum grade of C. Corequisite: CMSC 442. Enrollment is restricted to students with senior standing in the computer science department.\nDescription: This weekly seminar presents and discusses topics relevant to senior-level computer science students in support of the capstone project and upcoming graduation. A single course coordinator manages and administers the course and schedules the various faculty lectures and guest speakers. Topics include, but are not limited to, the following: proposal writing; project planning and management; scheduling resources and budgeting for software development projects; patents and intellectual property; entrepreneurship; ethical, legal and social issues in computing; and professional responsibilities of computer scientists. Each student will write and revise a research paper on a technical topic associated with his or her project or experience. Students must continue on the same project that was started in CMSC 451.\nTopics: agile, code management, code management, ci/cd, entrepreneurship, final project, maintainability, project planning, scalability, security, social aspects of technology, social aspects of technology, software development, teamwork, testing"
  },
  {
    "objectID": "catalog.html#cmsc-455---software-as-a-service",
    "href": "catalog.html#cmsc-455---software-as-a-service",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 455 - Software as a Service",
    "text": "CMSC 455 - Software as a Service\nSemester course. 3 hours.\nRestrictions: CMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program.\nDescription: Students will examine the challenges, opportunities and open problems of software-as-a-service deployed on commodity cloud computing platforms. Covers relevant software architectures and API design principles. Includes concepts of modern software frameworks for software development, cloud computing for software deployment and software operations. Students participate in projects that use modern tooling to develop, deploy and monitor a software application.\nTopics: api, applications, cloud computing, software development, software management"
  },
  {
    "objectID": "catalog.html#cmsc-475---design-and-implementation-of-user-interfaces",
    "href": "catalog.html#cmsc-475---design-and-implementation-of-user-interfaces",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 475 - Design and Implementation of User Interfaces",
    "text": "CMSC 475 - Design and Implementation of User Interfaces\nSemester course. 3 hours.\nRestrictions: CMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program.\nDescription: This course investigates the design and implementation of user interfaces and the evaluation of user experiences. Particular emphasis is placed on creating professional-quality designs and implementations and on evaluating these implementations with end-users. Students will create their own UIs as well as critique others to develop a deep understanding of what works in practice.\nTopics: design, end-users, interfaces, user interface"
  },
  {
    "objectID": "catalog.html#cmsc-491---topics-in-computer-science",
    "href": "catalog.html#cmsc-491---topics-in-computer-science",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 491 - Topics in Computer Science",
    "text": "CMSC 491 - Topics in Computer Science\nSemester course. 3 hours.\nRestrictions: permission of instructor.\nDescription: This course will cover selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester.\nTopics: selected topics"
  },
  {
    "objectID": "catalog.html#cmsc-492---independent-study",
    "href": "catalog.html#cmsc-492---independent-study",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 492 - Independent Study",
    "text": "CMSC 492 - Independent Study\nSemester course. 4 hours.\nRestrictions: (none)\nDescription: Maximum 4 credits per semester; maximum total of 6 credits. Generally open only to students of junior or senior standing who have acquired at least 12 credits in the departmental discipline. Determination of the amount of credit and permission of instructor and department chair must be procured prior to registration of the course. The student must submit a proposal for investigating some area or problem not contained in the regular curriculum. The results of the student’s study will be presented in a report.\nTopics: independent study"
  },
  {
    "objectID": "catalog.html#cmsc-501---advanced-algorithms",
    "href": "catalog.html#cmsc-501---advanced-algorithms",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 501 - Advanced Algorithms",
    "text": "CMSC 501 - Advanced Algorithms\nSemester course. 3 hours.\nRestrictions: CMSC 401 or equivalent. Enrollment is restricted to students with graduate standing or those accepted into the accelerated BS to MS program in computer science.\nDescription: Advanced graph algorithms, advanced data structures, applied numerical algorithms, optimization methods, approximation methods for hard graph and string problems and computational geometry algorithms.\nTopics: algorithms, approximation, computational geometry, data structures, graph algorithms, optimization, strings"
  },
  {
    "objectID": "catalog.html#cmsc-502---parallel-algorithms",
    "href": "catalog.html#cmsc-502---parallel-algorithms",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 502 - Parallel Algorithms",
    "text": "CMSC 502 - Parallel Algorithms\nSemester course. 3 hours.\nRestrictions: CMSC 312 and CMSC 401. Enrollment is restricted to students with graduate standing or those accepted into the accelerated BS to MS program in computer science.\nDescription: Software and hardware mechanisms for providing mutual exclusion in uniprocessor and multiprocessor environments. Architectural issues including pipeline design, superscalar computers, multiprocessors, memory systems, peripherals, interfacing techniques, networks, performance and software issues. Design and uses of parallel algorithms to solve concurrency problems in a distributed environment including message passing and remote procedure calls. Students will work in teams (as well as on individual projects) to design and implement parallel algorithms.\nTopics: concurrency, interfaces, networks, parallel algorithms, software quality"
  },
  {
    "objectID": "catalog.html#cmsc-506---computer-networks-and-communications",
    "href": "catalog.html#cmsc-506---computer-networks-and-communications",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 506 - Computer Networks and Communications",
    "text": "CMSC 506 - Computer Networks and Communications\nSemester course. 3 hours.\nRestrictions: CMSC 312.\nDescription: Theoretical and applied analysis of basic data communication systems; design of networks in the framework of the OSI reference model; Local and Wide Area Networks; performance analysis of networks; error control and security. Students will work in teams to design and implement a small computer network. Crosslisted as: EGRE 526.\nTopics: analysis, communication systems, computer networks, design, error control, local and wide area networks, osi reference model, security"
  },
  {
    "objectID": "catalog.html#cmsc-508---database-theory",
    "href": "catalog.html#cmsc-508---database-theory",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 508 - Database Theory",
    "text": "CMSC 508 - Database Theory\nSemester course. 3 hours.\nRestrictions: CMSC 303 with a minimum grade of C.\nDescription: Design and implementation of relational database systems. Emphasis is placed on entity-relationship diagrams, relational algebra, normal forms and normalization. Introduction to SQL. Discussion of physical level issues. Students will be required to complete a design project and give an oral presentation of the project. Not applicable toward the MS in Computer Science or the PHD in Engineering, computer science concentration.\nTopics: administration, ajax, configuration, cursors, data , data storage, database, database installation, design, design, entities, entity-relationship diagrams, entity-relationship diagrams, functional programming, functions, functions, indexes, mysql, normalization, php, physical level issues, procedures, queries, relational algebra, relational algebra, relational design, relations, sql, sql, subqueries, triggers, views"
  },
  {
    "objectID": "catalog.html#cmsc-510---regularization-methods-for-machine-learning",
    "href": "catalog.html#cmsc-510---regularization-methods-for-machine-learning",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 510 - Regularization Methods for Machine Learning",
    "text": "CMSC 510 - Regularization Methods for Machine Learning\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science or related discipline such as bioinformatics or acceptance into the accelerated BS to MS program in computer science.\nDescription: The course will assume undergraduate-level background in algorithms, linear algebra, calculus, statistics and probability. Upon successful completion of this course, the student will be able to understand recent advances in machine learning and apply machine-learning tools that go beyond learning from data, as well as have the ability to incorporate additional knowledge about the learning problem. Topics covered will include optimization-based view of supervised machine learning; classical regularization approaches including weight decay and Lasso; regularization terms incorporating additional knowledge about structures in the feature space, including group lasso and graph-based regularization terms; semi-supervised learning using graphs linking unlabeled and labeled samples.\nTopics: algorithms, calculus, data analysis, graph algorithms, linear algebra, machine learning, natural language, optimization, probability, regularization, statistics"
  },
  {
    "objectID": "catalog.html#cmsc-512---advanced-social-network-analysis-and-security",
    "href": "catalog.html#cmsc-512---advanced-social-network-analysis-and-security",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 512 - Advanced Social Network Analysis and Security",
    "text": "CMSC 512 - Advanced Social Network Analysis and Security\nSemester course. 3 hours.\nRestrictions: CMSC 412 and CMSC 501. Enrollment is restricted to students with graduate standing in computer science or a related discipline such as bioinformatics or acceptance into the accelerated BS to MS program in computer science.\nDescription: The purpose of the course is to teach algorithms for analyzing social networks and complex systems. The focus will be on understanding the inner workings of algorithms using in-network analysis and security threats in online social network sites. Topic covered will include modeling social and technological networks, methods for analyzing structure and dynamical processes on the network, and security and privacy issues in online social networks such as inference attacks, network anonymization, sybil attacks and defense, social bots.\nTopics: algorithms, analysis, networks, networks, security, social network"
  },
  {
    "objectID": "catalog.html#cmsc-516---advanced-natural-language-processing",
    "href": "catalog.html#cmsc-516---advanced-natural-language-processing",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 516 - Advanced Natural Language Processing",
    "text": "CMSC 516 - Advanced Natural Language Processing\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science or a related discipline, or those accepted into the accelerated BS to MS program in computer science.\nDescription: Upon successful completion of this course, the student will be able to understand recent advances in natural language processing and apply NLP algorithms and techniques for processing unstructured text. Word-level, syntactic and semantic processing will be considered. Specific topics include rule-based and statistical methods for creating computer programs that analyze, generate and understand human language. Regular expressions and automata, context-free grammars, probabilistic classifiers and machine learning. Applications to real-world problems such as spell-checking, Web search, automatic question answering, authorship identification and developing conversational interfaces.\nTopics: automation, context-free grammars, machine learning, natural language, nlp algorithms, probabilistic classifiers, regular expressions, semantics, statistics, syntax"
  },
  {
    "objectID": "catalog.html#cmsc-525---introduction-to-software-analysis-testing-and-verification",
    "href": "catalog.html#cmsc-525---introduction-to-software-analysis-testing-and-verification",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 525 - Introduction to Software Analysis, Testing and Verification",
    "text": "CMSC 525 - Introduction to Software Analysis, Testing and Verification\nSemester course. 3 hours.\nRestrictions: CMSC 401 and 403. Enrollment is restricted to students with graduate standing or those accepted into the accelerated BS to MS program in computer science.\nDescription: An introduction to concepts and techniques used in the analysis of software for certain properties. Using analytic results to derive test data and verify the correct implementation of programs. Flow graphs, fault/failure model, theoretical and practical limitations. Control flow, data flow and error flow analyses. Testing strategies including random, structural, mutation and error flow. Software metrics.\nTopics: advanced testing strategies, analysis, analysis, concolic hybrid analysis, control flow, coverage-driven systematic software testing, data, data-flow, dynamic programming, flow control, graphs, limitations, program analysis-driven testing, software management, software validation, software verification, static programming, symbolic program analysis, test case coverage, testing, testing"
  },
  {
    "objectID": "catalog.html#cmsc-526---theory-of-programming-languages",
    "href": "catalog.html#cmsc-526---theory-of-programming-languages",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 526 - Theory of Programming Languages",
    "text": "CMSC 526 - Theory of Programming Languages\nSemester course. 3 hours.\nRestrictions: CMSC 403, graduate student standing or acceptance into the five-year accelerated BS and MS program in computer science.\nDescription: An introduction to the formal semantics of programming languages, logic programming and functional programming. Topics include denotational semantics, attribute grammars, Backus Formal Functional Programming, fixed point semantics, model-theoretic semantics and PROLOG.\nTopics: languages, logic, model-theoretic semtances, semantics"
  },
  {
    "objectID": "catalog.html#cmsc-531---3d-computer-vision-for-robot-navigation",
    "href": "catalog.html#cmsc-531---3d-computer-vision-for-robot-navigation",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 531 - 3D Computer Vision for Robot Navigation",
    "text": "CMSC 531 - 3D Computer Vision for Robot Navigation\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to graduate students in computer science or related discipline or to students accepted into the five-year accelerated program in computer science.\nDescription: The course focuses on recent advancements in 3D robotic vision. It covers basic concepts and computational models of 3D sensing, robotic mapping, visual odometry, simultaneous localization and mapping, as well as 3D point data processing for robotic navigation. Students will acquire in-depth knowledge in robotic vision by completing a course project.\nTopics: 3d robotic vision, localization, mapping, robotic mapping, robotic navigation, visual odometry"
  },
  {
    "objectID": "catalog.html#cmsc-591---topics-in-computer-science",
    "href": "catalog.html#cmsc-591---topics-in-computer-science",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 591 - Topics in Computer Science",
    "text": "CMSC 591 - Topics in Computer Science\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: May be repeated for credit. Enrollment requires permission of the instructor. The course is open to students with graduate standing or those accepted into the accelerated BS to MS program in computer science. A study of selected topic(s) in computer science at the graduate level. See the Schedule of Classes for specific topics to be offered each semester.\nTopics: circuits, compact representations, complexity analysis, convex sets, limitations, linear algebra, loss function, machine learning, models, neural networks, optimization, quantum computation, quantum gates, quantum measurement, selected topics, tensor"
  },
  {
    "objectID": "catalog.html#cmsc-601---convex-optimization",
    "href": "catalog.html#cmsc-601---convex-optimization",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 601 - Convex Optimization",
    "text": "CMSC 601 - Convex Optimization\nSemester course. 3 hours.\nRestrictions: CMSC 501 or permission of instructor. Enrollment restricted to students with graduate standing in computer science or related discipline.\nDescription: A background in undergraduate-level linear algebra is assumed. Convex sets and functions. Convex optimization problems: Linear, quadratic, semi-definite and cone programs. Duality theory. Approximation algorithms for NP-complete integer optimization problems via semi-definite relaxations and rounding schemes. Algorithms for optimization, such as gradient descent, proximal descent, alternating directions method of multipliers, interior point methods.\nTopics: approximation, convex sets, duality theory, gradient descent, interior point methods, linear algebra, multipliers, optimization, proximal descent"
  },
  {
    "objectID": "catalog.html#cmsc-602---operating-systems",
    "href": "catalog.html#cmsc-602---operating-systems",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 602 - Operating Systems",
    "text": "CMSC 602 - Operating Systems\nSemester course. 3 hours.\nRestrictions: CMSC 502.\nDescription: A study of operating systems including those in multiprocessor and distributed environments. I/O programming, resource management (including processor and memory management), security and system performance evaluation.\nTopics: input/output, multiprocessor environments, operating systems, resources management, security, system performance"
  },
  {
    "objectID": "catalog.html#cmsc-603---high-performance-distributed-systems",
    "href": "catalog.html#cmsc-603---high-performance-distributed-systems",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 603 - High Performance Distributed Systems",
    "text": "CMSC 603 - High Performance Distributed Systems\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science or related discipline or those accepted into the accelerated BS to MS program in computer science.\nDescription: The course will assume undergraduate-level background in algorithms, data structures and parallel programming. Upon successful completion of this course, the student will be able to understand the concepts underlying distributed systems; analyze problems to identify performance bottlenecks, parallelization opportunities and concurrency issues in a distributed environment; create distributed and scalable implementations using multiple hosts/GPUs; design and implement algorithms using Hadoop, Spark and CUDA.\nTopics: algorithms, algorithms, concurrency, cuda, data structures, hadoop, parallel algorithms, performance bottlenecks, spark"
  },
  {
    "objectID": "catalog.html#cmsc-605---advanced-computer-architecture",
    "href": "catalog.html#cmsc-605---advanced-computer-architecture",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 605 - Advanced Computer Architecture",
    "text": "CMSC 605 - Advanced Computer Architecture\nSemester course. 3 hours.\nRestrictions: EGRE 426 or with permission of instructor.\nDescription: This course will focus on the design and analysis of high performance computer architectures. Topics investigated include pipeline design, superscalar computers, multiprocessors, memory systems, peripherals, interfacing techniques, networks, performance and software issues. Crosslisted as: EGRE 635.\nTopics: architecture, interfaces, memory systems, multiprocessor environments, networks, peripherals, pipeline design, software management, software quality, superscalar computers"
  },
  {
    "objectID": "catalog.html#cmsc-608---advanced-database",
    "href": "catalog.html#cmsc-608---advanced-database",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 608 - Advanced Database",
    "text": "CMSC 608 - Advanced Database\nSemester course. 3 hours.\nRestrictions: CMSC 508.\nDescription: Topics discussed include: handling of missing information; the relationship between relational calculus, relational algebra and SQL; logic databases; distributed databases; outer joins; and transaction processing. Emphasis is placed on theoretical issues involved in these topics. In addition students will work in teams to develop a working database application.\nTopics: calculus, logic, relational algebra, sql, teamwork"
  },
  {
    "objectID": "catalog.html#cmsc-610---algorithmic-foundations-of-bioinformatics",
    "href": "catalog.html#cmsc-610---algorithmic-foundations-of-bioinformatics",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 610 - Algorithmic Foundations of Bioinformatics",
    "text": "CMSC 610 - Algorithmic Foundations of Bioinformatics\nSemester course. 3 hours.\nRestrictions: Graduate student standing or acceptance into five-year accelerated program in computer science or related discipline such as bioinformatics.\nDescription: The purpose of the course is to teach algorithms for analyzing biological and medical data. The focus will be on understanding the inner workings of algorithms used in bioinformatics tools. Topic covered will include algorithms for assembling and searching biological sequences, finding patterns associated with disease, and exploring biological networks.\nTopics: algorithms, bioinformatics, biological sequences, data, networks, patterns"
  },
  {
    "objectID": "catalog.html#cmsc-611---computer-multimedia",
    "href": "catalog.html#cmsc-611---computer-multimedia",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 611 - Computer Multimedia",
    "text": "CMSC 611 - Computer Multimedia\nSemester course. 3 hours.\nRestrictions: permission of instructor.\nDescription: Study of computer multimedia techniques relating to images, sound, video and text. Emphasis on compression techniques and standard storage formats. This course is programming-intensive.\nTopics: compression, multimedia , storage formats"
  },
  {
    "objectID": "catalog.html#cmsc-612---game-theory-and-security",
    "href": "catalog.html#cmsc-612---game-theory-and-security",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 612 - Game Theory and Security",
    "text": "CMSC 612 - Game Theory and Security\nSemester course. 3 hours.\nRestrictions: CMSC 401. Enrollment is restricted to students with graduate standing in computer science or those accepted into the accelerated BS to MS program in computer science.\nDescription: The course will provide an introduction to game theory and mechanism design concepts. Lectures cover topics such as introduction of games, equilibrium concepts, computation of game-theoretic solution concepts, mechanism, and issues in game theory and mechanism design.\nTopics: abstract complexity, design, equilibrium concepts, game theory, security, universal programs, unsolvability"
  },
  {
    "objectID": "catalog.html#cmsc-615---cryptocurrency-and-blockchain-techniques",
    "href": "catalog.html#cmsc-615---cryptocurrency-and-blockchain-techniques",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 615 - Cryptocurrency and Blockchain Techniques",
    "text": "CMSC 615 - Cryptocurrency and Blockchain Techniques\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science or a related discipline.\nDescription: The course will assume undergraduate-level background in algorithms, data structures and programming. Upon successful completion of this course, the student will be able to understand the major concepts about cryptocurrency and blockchain techniques; be familiar with major blockchain applications as well as real-world issues; understand the underlying consensus mechanisms in the Bitcoin system and other alternative cryptocurrency systems; analyze the security of Nakamoto consensus; understand, write and execute smart contracts using an Ethereum-like platform.\nTopics: algorithms, altcoins, analysis, anonymity, bitcoin, bitcoin, blockchain, blockchain, consensus protocols, cryptocurrency, cryptocurrency, data structures, distributed systems, etherum, legal, nakamoto consensus, nakamoto’s blockchain, programming, real-world applications, security, security, sidechains"
  },
  {
    "objectID": "catalog.html#cmsc-618---database-and-application-security",
    "href": "catalog.html#cmsc-618---database-and-application-security",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 618 - Database and Application Security",
    "text": "CMSC 618 - Database and Application Security\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Theory and practice of database and software security focusing in particular on some common database software security risks and on the identification of potential threats and vulnerabilities. Crosslisted as: CISS 618.\nTopics: database, security, software management"
  },
  {
    "objectID": "catalog.html#cmsc-619---the-design-and-specifications-of-user-interfaces",
    "href": "catalog.html#cmsc-619---the-design-and-specifications-of-user-interfaces",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 619 - The Design and Specifications of User Interfaces",
    "text": "CMSC 619 - The Design and Specifications of User Interfaces\nSemester course. 3 hours.\nRestrictions: Graduate standing and permission of instructor.\nDescription: Requires knowledge of first order predicate calculus and context-free languages. Focuses on human-computer interface design principles and methodology and formal specifications of user interfaces.\nTopics: calculus, design, interfaces, languages, user interface"
  },
  {
    "objectID": "catalog.html#cmsc-620---applied-cryptography",
    "href": "catalog.html#cmsc-620---applied-cryptography",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 620 - Applied Cryptography",
    "text": "CMSC 620 - Applied Cryptography\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Provides a comprehensive survey of modern cryptography. Included are techniques of enciphering and deciphering messages using cryptographic algorithms, block ciphers and block cipher modes, hash functions and message authentication codes, public key cryptography and digital signatures, and steganography. Crosslisted as: CISS 624.\nTopics: authentication, block cipher, cryptographic systems, deciphering, digital signatures, enciphering, hash functions, public key encryption, steganography"
  },
  {
    "objectID": "catalog.html#cmsc-621---theory-of-computation",
    "href": "catalog.html#cmsc-621---theory-of-computation",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 621 - Theory of Computation",
    "text": "CMSC 621 - Theory of Computation\nSemester course. 3 hours.\nRestrictions: graduate student standing and permission of instructor.\nDescription: Discussion of the complexity and computability of problems and programs. Topics will include unsolvability, universal programs and abstract complexity.\nTopics:"
  },
  {
    "objectID": "catalog.html#cmsc-622---network-and-system-security",
    "href": "catalog.html#cmsc-622---network-and-system-security",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 622 - Network and System Security",
    "text": "CMSC 622 - Network and System Security\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Studies the principles of network security and system security. Included are topics relating to application layer security, TCP layer security, network layer security and link layer security and the use of access control, intrusion detection, intrusion prevention and other related tools.\nTopics: access control, assumption, computer security, concepts, intrustion detection, network security, networks, networks, presentation, security, security, security paper survey, system security, tcp layer security, technical paper reading, trust"
  },
  {
    "objectID": "catalog.html#cmsc-623---cloud-computing",
    "href": "catalog.html#cmsc-623---cloud-computing",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 623 - Cloud Computing",
    "text": "CMSC 623 - Cloud Computing\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Provides an introduction to cloud computing architecture and cloud computing security. The course covers the basic concepts of cloud computing, including memory virtualization, device virtualization and related security problems in cloud computing.\nTopics: cloud computing, device virtualization, memory virtualization, security"
  },
  {
    "objectID": "catalog.html#cmsc-624---software-quality-assurance",
    "href": "catalog.html#cmsc-624---software-quality-assurance",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 624 - Software Quality Assurance",
    "text": "CMSC 624 - Software Quality Assurance\nSemester course. 3 hours.\nRestrictions: a course in software engineering and graduate standing in computer science, or permission of instructor.\nDescription: A study of issues that affect the quality of software and of methodology to assure that software products are of the desired quality. This also includes issues in assessing product quality as well as the process by which the software is produced. Topics include various methodologies, standards, metrics and tools.\nTopics: metrics, software quality"
  },
  {
    "objectID": "catalog.html#cmsc-625---advanced-software-analysis-testing-and-verification",
    "href": "catalog.html#cmsc-625---advanced-software-analysis-testing-and-verification",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 625 - Advanced Software Analysis, Testing and Verification",
    "text": "CMSC 625 - Advanced Software Analysis, Testing and Verification\nSemester course. 3 hours.\nRestrictions: CMSC 525.\nDescription: Studies the concepts and techniques used in the analysis of software and the derivation of test data. Focuses on software metrics and reliability; construction of tools to aid software analysis and testing. Requires students to review seminal and current papers from the literature, and lead their discussion in class.\nTopics: analysis, current literature, metrics, software management, testing"
  },
  {
    "objectID": "catalog.html#cmsc-628---mobile-networks-applications-modeling-and-analysis",
    "href": "catalog.html#cmsc-628---mobile-networks-applications-modeling-and-analysis",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 628 - Mobile Networks: Applications, Modeling and Analysis",
    "text": "CMSC 628 - Mobile Networks: Applications, Modeling and Analysis\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science or a related discipline.\nDescription: The course will assume undergraduate-level background in algorithms, data structures, programming and networks. Upon successful completion of this course, the student will be able to understand the major concepts about mobile networks such as device-to-device communication technologies, mobility models and coverage; be familiar with various mobile network types (e.g., mobile social networks, delay tolerant networks, overlay networks, vehicular networks and cellular networks) and devices (e.g., smartphones, femtocells, WiFi), learn how to model mobile networks with stochastic processes and real datasets; be able to use different networking simulators; and understand various routing algorithms and analyze their behavior.\nTopics: algorithms, analysis, analysis, communication systems, communication systems, data, data driven stimulations, data structures, evaluation, mobile networks, mobile networks, mobility models, modeling, network simulators, networks, networks, programming, routing"
  },
  {
    "objectID": "catalog.html#cmsc-630---image-analysis",
    "href": "catalog.html#cmsc-630---image-analysis",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 630 - Image Analysis",
    "text": "CMSC 630 - Image Analysis\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in engineering or science or by permission of the instructor.\nDescription: Introduces theoretical and practical aspects of computer vision for image processing and understanding. It provides a comprehensive walkthrough from basics of image preparation to using computational intelligence tools for knowledge discovery from images. The course will cover basics of image processing and computer vision, including image sampling and quantization, color, pixel-based operations, image filtering, morphological image processing, and image transforms; information extraction including segmentation and feature extraction; pattern recognition for computer vision: classification, novelty and object detection, image understanding, learning from video streams, and tensor-based methods. Examples will include medical image analysis, object recognition in ground and aerial photographs and hyperspectral imaging.\nTopics: analysis, computers, feature extraction, feature selection, image, image, image analysis, image filtering, image processing, image processing, image segmentation, images, information extraction, machine learning, patterns, pixel-based operations, quantization, segmentation, segmentation, tensor"
  },
  {
    "objectID": "catalog.html#cmsc-635---knowledge-discovery-and-data-mining",
    "href": "catalog.html#cmsc-635---knowledge-discovery-and-data-mining",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 635 - Knowledge Discovery and Data Mining",
    "text": "CMSC 635 - Knowledge Discovery and Data Mining\nSemester course. 3 hours.\nRestrictions: CMSC 401 or corequisite: CMSC 501. Enrollment is restricted to students with graduate standing in computer science or a related discipline such as bioinformatics, or those accepted into the accelerated BS to MS program in computer science.\nDescription: Covers knowledge discovery and data mining concepts, tools and methods; provides hands-on experience based on a project involving analysis of large real-life data. Topics include the knowledge discovery process, data storage and representation, preprocessing algorithms for missing data imputation, feature selection and discretization; unsupervised learning algorithms for clustering and association mining; supervised learning algorithms including decision trees, Bayesian models and introduction to support vector machines and neural networks; ensemble learning; protocols and measures for validation of predictive models; and data security and privacy issues.\nTopics: algorithms, analysis, bayesian models, data, data, data imputation, data mining, data preprocessing, data security, data storage, decision trees, discovery process, discretization, ensemble learning, feature selection, neural networks, real-world applications, security, supervised data analysis, support vector machines, unsupervised data analysis"
  },
  {
    "objectID": "catalog.html#cmsc-636---artificial-neural-networks-and-deep-learning",
    "href": "catalog.html#cmsc-636---artificial-neural-networks-and-deep-learning",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 636 - Artificial Neural Networks and Deep Learning",
    "text": "CMSC 636 - Artificial Neural Networks and Deep Learning\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science.\nDescription: The course will assume undergraduate-level background in programming, algorithms, linear algebra, calculus, statistics and probability. Topics ranging from fundamental learning rules, functional, cascade correlational, recurrent and gradient descent networks, to neocognitron, softmax, deep convolutional networks, autoencoders and pretrained deep learning (restricted Boltzmann machines). Students will be required to work in teams on a class paper.\nTopics: architecture, autoencoders, calculus, cascade correlational, chatgpt, convolutional neural networks, deep belief networks, deep convolutional networks, deep learning, deep neural networks, google, gradient descent, linear algebra, neocognitron, neural networks, neural networks, probability, recurrences, recurrences, restricted boltzmann machines, statistics"
  },
  {
    "objectID": "catalog.html#cmsc-654---memory-and-malware-forensics",
    "href": "catalog.html#cmsc-654---memory-and-malware-forensics",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 654 - Memory and Malware Forensics",
    "text": "CMSC 654 - Memory and Malware Forensics\nSemester course. 3 hours.\nRestrictions: CMSC 312. Enrollment is restricted to students with graduate standing in computer science or a related discipline, or those accepted into the accelerated BS to MS program in computer science.\nDescription: Students should have significant programming experience. This course provides foundation for memory and malware forensics, using the Volatility memory forensics framework, an open source toolkit written in Python. It is focused on investigation of the contents of volatile computer memory (RAM), to reveal hidden malware processes, network connections, clipboard contents, evidence of malware and other malicious evidence. The course will teach skills for analyzing internals of operating systems, such as Mac, Windows and Linux, by concentrating on data structures used by these operating systems.\nTopics: malicious evidence, malware forensics, memory, networks, operating systems, python, volatility memory forensics"
  },
  {
    "objectID": "catalog.html#cmsc-678---statistical-learning-and-fuzzy-logic-algorithms",
    "href": "catalog.html#cmsc-678---statistical-learning-and-fuzzy-logic-algorithms",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 678 - Statistical Learning and Fuzzy Logic Algorithms",
    "text": "CMSC 678 - Statistical Learning and Fuzzy Logic Algorithms\nSemester course. 3 hours.\nRestrictions: MATH/STAT 309 or MATH 310.\nDescription: The course considers two central problems in modern science and engineering: i) the problem of statistical learning from examples (empirical data) and ii) the problem of embedding existing human knowledge into workable mathematics. Topics include: examples of multivariate functional mapping, basics of classic classification and regression, support vector machines as a learning paradigm based on structural risk minimization, fuzzy logic algorithms, basics of multi-class classification over high dimensional spaces, curve and surface fittings, multivariate function approximation and nonlinear optimization; fuzzy logic systems; crisp and fuzzy sets, linguistic variables, fuzzy set theory; if-then rules, fuzzy interference, fuzzification and defuzzification, neuro-fuzzy paradigms.\nTopics: classification, functional mapping, functions, fuzzification, fuzzy logic algorithms, linguistic variables, multi-class classification, neuro-fuzzy paradigms, nonlinear optimization, optimization, regression, statistical learning, statistics, support vector machines"
  },
  {
    "objectID": "catalog.html#cmsc-691---special-topics-in-computer-science",
    "href": "catalog.html#cmsc-691---special-topics-in-computer-science",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 691 - Special Topics in Computer Science",
    "text": "CMSC 691 - Special Topics in Computer Science\nSemester course. 3 hours.\nRestrictions: at least one graduate-level computer science course pertaining to the topic area and permission of instructor.\nDescription: An advanced study of selected topic(s) in computer science at the graduate level. See the Schedule of Classes for specific topics to be offered each semester.\nTopics: selected topics"
  },
  {
    "objectID": "catalog.html#cmsc-692---independent-study",
    "href": "catalog.html#cmsc-692---independent-study",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 692 - Independent Study",
    "text": "CMSC 692 - Independent Study\nSemester course. 3 hours.\nRestrictions: Enrollment restricted to students with graduate standing and consent of instructor.\nDescription: Independent study done under the supervision of a faculty member. The student must identify a faculty member willing to supervise the research and submit a proposal for approval by the computer science graduate committee no later than the 10th week of the prior semester. A written report and an oral presentation are required upon completion of the research project. Graded as Pass/Fail.\nTopics: independent study"
  },
  {
    "objectID": "catalog.html#cmsc-697---directed-research",
    "href": "catalog.html#cmsc-697---directed-research",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 697 - Directed Research",
    "text": "CMSC 697 - Directed Research\nSemester course. 5 hours.\nRestrictions: (none)\nDescription: May be repeated for credit. A total of three credits may be used to fulfill the MS in Computer Science thesis requirement. Independent research culminating in the writing of the required thesis or dissertation. The student must identify a faculty member willing to supervise the research and submit a proposal to the computer science graduate committee no later than the 10th week of the prior semester. This proposal must be approved before the student can register for the course. Graded as S/U/F.\nTopics: research"
  },
  {
    "objectID": "catalog.html#cmsc-701---research-methods",
    "href": "catalog.html#cmsc-701---research-methods",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 701 - Research Methods",
    "text": "CMSC 701 - Research Methods\nSemester course. 3 hours.\nRestrictions: PHD standing or permission of instructor.\nDescription: Covers the principles of conducting a research project, reporting the findings in the form of a journal paper and promoting the research through public presentations. Students learn to write grant proposals and practice reviewing research papers and grant proposals. The main emphasis of the course is writing a paper and a grant proposal in a format compliant with NSF, NIH or DoD guidelines.\nTopics: grant proposal, research"
  },
  {
    "objectID": "catalog.html#cmsc-702---computer-science-seminar",
    "href": "catalog.html#cmsc-702---computer-science-seminar",
    "title": "Catalog of CMSC Courses and Titles",
    "section": "CMSC 702 - Computer Science Seminar",
    "text": "CMSC 702 - Computer Science Seminar\nSemester course. 1 hour.\nRestrictions: Enrollment restricted to students in the doctoral program in computer science. Students will attend a week\nDescription: Students will attend a weekly research seminar in which the topic and speaker will change each week in order to cover a broad range of subjects at the forefront of computer science research. Students will have to present and to write a report on at least one seminar presented by other speakers. The objective is to expose students to research topics and scholars in the field of computer science as well as to provide them experience in delivering and critiquing seminar talks. Graded as satisfactory/unsatisfactory.\nTopics: research, seminar"
  },
  {
    "objectID": "CMSC101.html",
    "href": "CMSC101.html",
    "title": "CMSC 101 - Introduction to Computer Science",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: MATH 139 or MATH 141 with a minimum grade of C. An introduction to the work of computer scientists, including an overview of current research and application areas as well as career opportunities. Topics include problem-solving, the basics of computer organization, the software engineering life cycle, research resources and social and ethical aspects of technology. Additional topics also include binary, hexadecimal, two’s complement, floating point representation, ASCII and Unicode."
  },
  {
    "objectID": "CMSC101.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC101.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 101 - Introduction to Computer Science",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nMATH 139 or MATH 141 with a minimum grade of C."
  },
  {
    "objectID": "CMSC101.html#description",
    "href": "CMSC101.html#description",
    "title": "CMSC 101 - Introduction to Computer Science",
    "section": "Description",
    "text": "Description\nAn introduction to the work of computer scientists, including an overview of current research and application areas as well as career opportunities. Topics include problem-solving, the basics of computer organization, the software engineering life cycle, research resources and social and ethical aspects of technology. Additional topics also include binary, hexadecimal, two’s complement, floating point representation, ASCII and Unicode."
  },
  {
    "objectID": "CMSC101.html#topics",
    "href": "CMSC101.html#topics",
    "title": "CMSC 101 - Introduction to Computer Science",
    "section": "Topics",
    "text": "Topics\nascii, basics of computer organiation, ethical aspects of technology, numeric representation, problem solving, research resources, social aspects of technology, software engineering life cycle, unicode"
  },
  {
    "objectID": "CMSC101.html#syllabus-statements",
    "href": "CMSC101.html#syllabus-statements",
    "title": "CMSC 101 - Introduction to Computer Science",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC144.html",
    "href": "CMSC144.html",
    "title": "CMSC 144 - Code Beats With Python",
    "section": "",
    "text": "Semester course; 2 laboratory hours. 1 credit. An introduction to computer programming in Python by teaching students to create hip hop beats. Teaches fundamental programming concepts including sequencing, syntax, variables, functions, parameters, lists, repetition and modularization. Teaches just enough music theory to ensure that student-made beats sound great, including fundamental concepts such as melody, rhythm, harmony, chord progression and orchestration. Students will complete in-class activities that reinforce class concepts and, if completed correctly, demonstrate a clear understanding of the material."
  },
  {
    "objectID": "CMSC144.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC144.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 144 - Code Beats With Python",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC144.html#description",
    "href": "CMSC144.html#description",
    "title": "CMSC 144 - Code Beats With Python",
    "section": "Description",
    "text": "Description\nAn introduction to computer programming in Python by teaching students to create hip hop beats. Teaches fundamental programming concepts including sequencing, syntax, variables, functions, parameters, lists, repetition and modularization. Teaches just enough music theory to ensure that student-made beats sound great, including fundamental concepts such as melody, rhythm, harmony, chord progression and orchestration. Students will complete in-class activities that reinforce class concepts and, if completed correctly, demonstrate a clear understanding of the material."
  },
  {
    "objectID": "CMSC144.html#topics",
    "href": "CMSC144.html#topics",
    "title": "CMSC 144 - Code Beats With Python",
    "section": "Topics",
    "text": "Topics\nchord progression, functions, harmony, lists, melody, modularization, orchestration, parameters, repetition, rhytum, sequencing, syntax, variables"
  },
  {
    "objectID": "CMSC144.html#syllabus-statements",
    "href": "CMSC144.html#syllabus-statements",
    "title": "CMSC 144 - Code Beats With Python",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC191.html",
    "href": "CMSC191.html",
    "title": "CMSC 191 - Topics in Computer Science",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. May be repeated for credit. Prerequisite: permission of the instructor. This course will teach selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester and prerequisites."
  },
  {
    "objectID": "CMSC191.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC191.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 191 - Topics in Computer Science",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\npermission of the instructor."
  },
  {
    "objectID": "CMSC191.html#description",
    "href": "CMSC191.html#description",
    "title": "CMSC 191 - Topics in Computer Science",
    "section": "Description",
    "text": "Description\nThis course will teach selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester and prerequisites."
  },
  {
    "objectID": "CMSC191.html#topics",
    "href": "CMSC191.html#topics",
    "title": "CMSC 191 - Topics in Computer Science",
    "section": "Topics",
    "text": "Topics\nselected topics"
  },
  {
    "objectID": "CMSC191.html#syllabus-statements",
    "href": "CMSC191.html#syllabus-statements",
    "title": "CMSC 191 - Topics in Computer Science",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC210.html",
    "href": "CMSC210.html",
    "title": "CMSC 210 - Computers and Programming",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online). 3 credits. Introduction to object-oriented programming using Python. The course introduces students to structured programming logic and design techniques. The course content also includes instruction in critical thinking and problem-solving skills using contemporary tools. Specific topics include flowcharting, pseudocode and program control structures, including sequence, selection and repetition. This course is not applicable for credit toward the B.S. in Computer Science."
  },
  {
    "objectID": "CMSC210.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC210.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 210 - Computers and Programming",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC210.html#description",
    "href": "CMSC210.html#description",
    "title": "CMSC 210 - Computers and Programming",
    "section": "Description",
    "text": "Description\nIntroduction to object-oriented programming using Python. The course introduces students to structured programming logic and design techniques. The course content also includes instruction in critical thinking and problem-solving skills using contemporary tools. Specific topics include flowcharting, pseudocode and program control structures, including sequence, selection and repetition. This course is not applicable for credit toward the BS in Computer Science."
  },
  {
    "objectID": "CMSC210.html#topics",
    "href": "CMSC210.html#topics",
    "title": "CMSC 210 - Computers and Programming",
    "section": "Topics",
    "text": "Topics\ncalling functions, conditional execution, control structures, critical thinking, debugging, dictionaries, expressions, files, flow charting, lists, loops and iterations, network programming, problem solving, program design, programming logic, pseudocode, regular expressions, repetition, sequencing, statement, strings, structured programming, tuples, variables, writing functions"
  },
  {
    "objectID": "CMSC210.html#syllabus-statements",
    "href": "CMSC210.html#syllabus-statements",
    "title": "CMSC 210 - Computers and Programming",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC235.html",
    "href": "CMSC235.html",
    "title": "CMSC 235 - Computing and Data Ethics",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Introduction to ethical considerations for computing and working with data, legal implications surrounding data and computational systems, and sociotechnical responsibilities."
  },
  {
    "objectID": "CMSC235.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC235.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 235 - Computing and Data Ethics",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC235.html#description",
    "href": "CMSC235.html#description",
    "title": "CMSC 235 - Computing and Data Ethics",
    "section": "Description",
    "text": "Description\nIntroduction to ethical considerations for computing and working with data, legal implications surrounding data and computational systems, and sociotechnical responsibilities."
  },
  {
    "objectID": "CMSC235.html#topics",
    "href": "CMSC235.html#topics",
    "title": "CMSC 235 - Computing and Data Ethics",
    "section": "Topics",
    "text": "Topics\nethics, Legal implications, sociotechnical responsibilities"
  },
  {
    "objectID": "CMSC235.html#syllabus-statements",
    "href": "CMSC235.html#syllabus-statements",
    "title": "CMSC 235 - Computing and Data Ethics",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC245.html",
    "href": "CMSC245.html",
    "title": "CMSC 245 - Introduction to Programming Using C++",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: MATH 151 or satisfactory score on the Mathematical Placement Test. Students registering for CMSC 245 must have taken the VCU Mathematics Placement Test within the one-year period immediately preceding the beginning of the course. An exception to this policy is made in the case in which the stated alternative prerequisite course has been completed at VCU. Students are expected to have fundamental computer skills. Introduction to the concepts and practice of structured programming using C++. Problem-solving, top-down design of algorithms, objects, basic C++ syntax, control structures, functions and arrays. This course is intended for engineering majors."
  },
  {
    "objectID": "CMSC245.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC245.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 245 - Introduction to Programming Using C++",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nMATH 151 or satisfactory score on the Mathematical Placement Test. Students registering for CMSC 245 must have taken the VCU Mathematics Placement Test within the one-year period immediately preceding the beginning of the course. An exception to this policy is made in the case in which the stated alternative prerequisite course has been completed at VCU. Students are expected to have fundamental computer skills."
  },
  {
    "objectID": "CMSC245.html#description",
    "href": "CMSC245.html#description",
    "title": "CMSC 245 - Introduction to Programming Using C++",
    "section": "Description",
    "text": "Description\nIntroduction to the concepts and practice of structured programming using C++. Problem-solving, top-down design of algorithms, objects, basic C++ syntax, control structures, functions and arrays. This course is intended for engineering majors."
  },
  {
    "objectID": "CMSC245.html#topics",
    "href": "CMSC245.html#topics",
    "title": "CMSC 245 - Introduction to Programming Using C++",
    "section": "Topics",
    "text": "Topics\narrays, c++ syntax, control structures, functions, problem solving, top down design"
  },
  {
    "objectID": "CMSC245.html#syllabus-statements",
    "href": "CMSC245.html#syllabus-statements",
    "title": "CMSC 245 - Introduction to Programming Using C++",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC246.html",
    "href": "CMSC246.html",
    "title": "CMSC 246 - Advanced Programming Using C++",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 245. Advanced programming in C++. Topics include program design, objects, classes, inheritance, files, strings, linked lists, stacks, queues, binary trees, recursion, and basic searching and sorting techniques. This course is intended for engineering majors."
  },
  {
    "objectID": "CMSC246.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC246.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 246 - Advanced Programming Using C++",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 245."
  },
  {
    "objectID": "CMSC246.html#description",
    "href": "CMSC246.html#description",
    "title": "CMSC 246 - Advanced Programming Using C++",
    "section": "Description",
    "text": "Description\nAdvanced programming in C++. Topics include program design, objects, classes, inheritance, files, strings, linked lists, stacks, queues, binary trees, recursion, and basic searching and sorting techniques. This course is intended for engineering majors."
  },
  {
    "objectID": "CMSC246.html#topics",
    "href": "CMSC246.html#topics",
    "title": "CMSC 246 - Advanced Programming Using C++",
    "section": "Topics",
    "text": "Topics\nbasic searching, basic sorting, binary trees, classes, files, inheritance, linked lists, objects, program design, queues, recursion, stacks, strings"
  },
  {
    "objectID": "CMSC246.html#syllabus-statements",
    "href": "CMSC246.html#syllabus-statements",
    "title": "CMSC 246 - Advanced Programming Using C++",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC254.html",
    "href": "CMSC254.html",
    "title": "CMSC 254 - Introduction to Problem-solving",
    "section": "",
    "text": "Semester course; 3 lecture and 2 laboratory hours. 4 credits. Introduction to problem solving and implementation of solutions using Python. The course introduces students to concepts and practice of structured programming, problem-solving, top-down design of algorithms, a Python language syntax, control structures and arrays. The course content also includes instruction in critical-thinking and problem-solving skills using contemporary tools. Specific topics include flowcharting, pseudocode and program control structures, including sequence, selection, repetition and modularization."
  },
  {
    "objectID": "CMSC254.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC254.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 254 - Introduction to Problem-solving",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC254.html#description",
    "href": "CMSC254.html#description",
    "title": "CMSC 254 - Introduction to Problem-solving",
    "section": "Description",
    "text": "Description\nIntroduction to problem solving and implementation of solutions using Python. The course introduces students to concepts and practice of structured programming, problem-solving, top-down design of algorithms, a Python language syntax, control structures and arrays. The course content also includes instruction in critical-thinking and problem-solving skills using contemporary tools. Specific topics include flowcharting, pseudocode and program control structures, including sequence, selection, repetition and modularization."
  },
  {
    "objectID": "CMSC254.html#topics",
    "href": "CMSC254.html#topics",
    "title": "CMSC 254 - Introduction to Problem-solving",
    "section": "Topics",
    "text": "Topics\nanalysis, arrays, basic concepts of computer systems, control structures, critical thinking, data, decision structures, dictionaries, flow charting, functions, lists, modeling, modularization, problem solving, processing code, programming, pseudocode, python syntax, repetition, repetition structures, selection, sequencing, sequential data structures, structured programming, structures, top down design, tuples"
  },
  {
    "objectID": "CMSC254.html#syllabus-statements",
    "href": "CMSC254.html#syllabus-statements",
    "title": "CMSC 254 - Introduction to Problem-solving",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC255.html",
    "href": "CMSC255.html",
    "title": "CMSC 255 - Introduction to Programming",
    "section": "",
    "text": "Semester course; 3 lecture and 2 laboratory hours. 4 credits. Prerequisite: calculus-level placement on the VCU Mathematics Placement Test within the one-year period immediately preceding enrollment in the course, or MATH 151 or equivalent. Students are expected to have fundamental computer skills. Introduction to object-oriented programming using Java. Topics include problem-solving, top-down design of algorithms using control structures, methods, arrays, basic I/O, basic concepts of objects and classes in Java, Java classes for manipulating strings, and introduction to program testing, UML notation and integrated development environments. Students may not receive credit for both CMSC 255 and INFO 250."
  },
  {
    "objectID": "CMSC255.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC255.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 255 - Introduction to Programming",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\ncalculus-level placement on the VCU Mathematics Placement Test within the one-year period immediately preceding enrollment in the course, or MATH 151 or equivalent. Students are expected to have fundamental computer skills."
  },
  {
    "objectID": "CMSC255.html#description",
    "href": "CMSC255.html#description",
    "title": "CMSC 255 - Introduction to Programming",
    "section": "Description",
    "text": "Description\nIntroduction to object-oriented programming using Java. Topics include problem-solving, top-down design of algorithms using control structures, methods, arrays, basic I/O, basic concepts of objects and classes in Java, Java classes for manipulating strings, and introduction to program testing, UML notation and integrated development environments. Students may not receive credit for both CMSC 255 and INFO 250."
  },
  {
    "objectID": "CMSC255.html#topics",
    "href": "CMSC255.html#topics",
    "title": "CMSC 255 - Introduction to Programming",
    "section": "Topics",
    "text": "Topics\nalgorithms, arrays, input/output, classes, computers, control structures, ide, java, methods, objects, problem solving, program testing, simple data types, strings, syntax, top down design, uml"
  },
  {
    "objectID": "CMSC255.html#syllabus-statements",
    "href": "CMSC255.html#syllabus-statements",
    "title": "CMSC 255 - Introduction to Programming",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC256.html",
    "href": "CMSC256.html",
    "title": "CMSC 256 - Data Structures and Object Oriented Programming",
    "section": "",
    "text": "Semester course; 3 lecture and 2 laboratory hours. 4 credits. Prerequisite: CMSC 255 with a minimum grade of C; corequisite: CMSC 302. Advanced programming using Java. Topics include introduction to object-oriented design, inheritance, polymorphism, exceptions, interfaces, linked lists, stacks, queues, binary trees, recursion, and basic searching and sorting techniques. Continued focus on program testing and UML notation. Students may not receive credit for both CMSC 256 and INFO 350."
  },
  {
    "objectID": "CMSC256.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC256.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 256 - Data Structures and Object Oriented Programming",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 255 with a minimum grade of C; corequisite: CMSC 302."
  },
  {
    "objectID": "CMSC256.html#description",
    "href": "CMSC256.html#description",
    "title": "CMSC 256 - Data Structures and Object Oriented Programming",
    "section": "Description",
    "text": "Description\nAdvanced programming using Java. Topics include introduction to object-oriented design, inheritance, polymorphism, exceptions, interfaces, linked lists, stacks, queues, binary trees, recursion, and basic searching and sorting techniques. Continued focus on program testing and UML notation. Students may not receive credit for both CMSC 256 and INFO 350."
  },
  {
    "objectID": "CMSC256.html#topics",
    "href": "CMSC256.html#topics",
    "title": "CMSC 256 - Data Structures and Object Oriented Programming",
    "section": "Topics",
    "text": "Topics\nabstract complexity, algorithms, basic searching, binary trees, classes, data structures, deques, exceptions, generics, graphs, hash functions, inheritance, interfaces, iterators, linked lists, lists, object oriented programming, objects, polymorphism, queues, recursion, sorting, stacks, trees, uml"
  },
  {
    "objectID": "CMSC256.html#syllabus-statements",
    "href": "CMSC256.html#syllabus-statements",
    "title": "CMSC 256 - Data Structures and Object Oriented Programming",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC257.html",
    "href": "CMSC257.html",
    "title": "CMSC 257 - Computer Systems",
    "section": "",
    "text": "Semester course; 3 lecture and 2 laboratory hours. 4 credits. Prerequisite: CMSC 256 with a minimum grade of C. Topics include UNIX essentials; system programming in C; machine-level representation and organization of programs/data, arrays and pointers; types, structs and unions; strings; bit/byte operations; memory management; shell programming; input/output, including file handling; debugging; signals; network programming using sockets; program concurrency using forks and threads; experiments on program performance and optimization techniques."
  },
  {
    "objectID": "CMSC257.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC257.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 257 - Computer Systems",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 256 with a minimum grade of C."
  },
  {
    "objectID": "CMSC257.html#description",
    "href": "CMSC257.html#description",
    "title": "CMSC 257 - Computer Systems",
    "section": "Description",
    "text": "Description\nTopics include UNIX essentials; system programming in C; machine-level representation and organization of programs/data, arrays and pointers; types, structs and unions; strings; bit/byte operations; memory management; shell programming; input/output, including file handling; debugging; signals; network programming using sockets; program concurrency using forks and threads; experiments on program performance and optimization techniques."
  },
  {
    "objectID": "CMSC257.html#topics",
    "href": "CMSC257.html#topics",
    "title": "CMSC 257 - Computer Systems",
    "section": "Topics",
    "text": "Topics\narrays, bit/bye operations, debugging, files, forks and threads, input/output, machine-level representation, memory management, network programming using sockets, optimization, pointers, program performance, programming in c, shell programming, signals, types, structs, and unions"
  },
  {
    "objectID": "CMSC257.html#syllabus-statements",
    "href": "CMSC257.html#syllabus-statements",
    "title": "CMSC 257 - Computer Systems",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC302.html",
    "href": "CMSC302.html",
    "title": "CMSC 302 - Introduction to Discrete Structures",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 255 with minimum grade of C. Logic and proofs, sets, functions, sequences and sums, relations, graphs, trees, induction and recursion, advanced counting technique (recurrences)."
  },
  {
    "objectID": "CMSC302.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC302.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 302 - Introduction to Discrete Structures",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 255 with minimum grade of C."
  },
  {
    "objectID": "CMSC302.html#description",
    "href": "CMSC302.html#description",
    "title": "CMSC 302 - Introduction to Discrete Structures",
    "section": "Description",
    "text": "Description\nLogic and proofs, sets, functions, sequences and sums, relations, graphs, trees, induction and recursion, advanced counting technique (recurrences)."
  },
  {
    "objectID": "CMSC302.html#topics",
    "href": "CMSC302.html#topics",
    "title": "CMSC 302 - Introduction to Discrete Structures",
    "section": "Topics",
    "text": "Topics\nalgebra, counting, functions, graphs, induction, logic, matrices, probability, proofs, recurrences, recursion, relations, sequences, sequencing, set theory, sets, summations, sums, trees"
  },
  {
    "objectID": "CMSC302.html#syllabus-statements",
    "href": "CMSC302.html#syllabus-statements",
    "title": "CMSC 302 - Introduction to Discrete Structures",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC303.html",
    "href": "CMSC303.html",
    "title": "CMSC 303 - Introduction to the Theory of Computation",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 302 or the equivalent with a grade of C or better. Complexity classes, grammars, automata, formal languages, Turing machines, computability."
  },
  {
    "objectID": "CMSC303.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC303.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 303 - Introduction to the Theory of Computation",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 302 or the equivalent with a grade of C or better."
  },
  {
    "objectID": "CMSC303.html#description",
    "href": "CMSC303.html#description",
    "title": "CMSC 303 - Introduction to the Theory of Computation",
    "section": "Description",
    "text": "Description\nComplexity classes, grammars, automata, formal languages, Turing machines, computability."
  },
  {
    "objectID": "CMSC303.html#topics",
    "href": "CMSC303.html#topics",
    "title": "CMSC 303 - Introduction to the Theory of Computation",
    "section": "Topics",
    "text": "Topics\nautomata, complexity analysis, computability theory, context-free grammars, discrete math, finite automata, logic, pushdown automata, regular expressions, turing machines"
  },
  {
    "objectID": "CMSC303.html#syllabus-statements",
    "href": "CMSC303.html#syllabus-statements",
    "title": "CMSC 303 - Introduction to the Theory of Computation",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC311.html",
    "href": "CMSC311.html",
    "title": "CMSC 311 - Computer Organization",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 302 with minimum grade of C; corequisite: CMSC 257. Introduction to the basic organization of computers including elementary digital logic design, processor and arithmetic/logic unit design, data paths, memory hierarchy, I/O devices, instruction set architecture and addressing modes."
  },
  {
    "objectID": "CMSC311.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC311.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 311 - Computer Organization",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 302 with minimum grade of C; corequisite: CMSC 257."
  },
  {
    "objectID": "CMSC311.html#description",
    "href": "CMSC311.html#description",
    "title": "CMSC 311 - Computer Organization",
    "section": "Description",
    "text": "Description\nIntroduction to the basic organization of computers including elementary digital logic design, processor and arithmetic/logic unit design, data paths, memory hierarchy, I/O devices, instruction set architecture and addressing modes."
  },
  {
    "objectID": "CMSC311.html#topics",
    "href": "CMSC311.html#topics",
    "title": "CMSC 311 - Computer Organization",
    "section": "Topics",
    "text": "Topics\naddressing modes, architecture, assembly language, cache memories, computers, data, data paths, data types, digital logic structures, input/output, instruction set architecture, logic, machine language, memory hierarchy, organization, stacks, trap routines, trap subroutines, unit design, virtual memory, von neumann model"
  },
  {
    "objectID": "CMSC311.html#syllabus-statements",
    "href": "CMSC311.html#syllabus-statements",
    "title": "CMSC 311 - Computer Organization",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC312.html",
    "href": "CMSC312.html",
    "title": "CMSC 312 - Introduction to Operating Systems",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 311 or EGRE 364. Computer systems design, I/O processing, secondary memory organization, command languages, memory management and job scheduling. Students will work in teams to design and implement an operating system simulation."
  },
  {
    "objectID": "CMSC312.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC312.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 312 - Introduction to Operating Systems",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 311 or EGRE 364."
  },
  {
    "objectID": "CMSC312.html#description",
    "href": "CMSC312.html#description",
    "title": "CMSC 312 - Introduction to Operating Systems",
    "section": "Description",
    "text": "Description\nComputer systems design, I/O processing, secondary memory organization, command languages, memory management and job scheduling. Students will work in teams to design and implement an operating system simulation."
  },
  {
    "objectID": "CMSC312.html#topics",
    "href": "CMSC312.html#topics",
    "title": "CMSC 312 - Introduction to Operating Systems",
    "section": "Topics",
    "text": "Topics\ncommand languages, computer systems design, concurrency, debugging, distributed systems, file management, input/output, job scheduling, memory management, operating systems, process scheduling, secondary memory"
  },
  {
    "objectID": "CMSC312.html#syllabus-statements",
    "href": "CMSC312.html#syllabus-statements",
    "title": "CMSC 312 - Introduction to Operating Systems",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC320.html",
    "href": "CMSC320.html",
    "title": "CMSC 320 - Software Engineering and Web Development",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online). 3 credits. Prerequisite: CMSC 210. Introduction to software engineering and web development. The course introduces students to the software development process, including design, development and testing principles. Students will apply these principles in the development of a web application. This course is not applicable for credit toward any College of Engineering degrees."
  },
  {
    "objectID": "CMSC320.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC320.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 320 - Software Engineering and Web Development",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 210."
  },
  {
    "objectID": "CMSC320.html#description",
    "href": "CMSC320.html#description",
    "title": "CMSC 320 - Software Engineering and Web Development",
    "section": "Description",
    "text": "Description\nIntroduction to software engineering and web development. The course introduces students to the software development process, including design, development and testing principles. Students will apply these principles in the development of a web application. This course is not applicable for credit toward any College of Engineering degrees."
  },
  {
    "objectID": "CMSC320.html#topics",
    "href": "CMSC320.html#topics",
    "title": "CMSC 320 - Software Engineering and Web Development",
    "section": "Topics",
    "text": "Topics\ndesign, development, documentation, gathering, software development, systems development, testing, testing functionality, web development"
  },
  {
    "objectID": "CMSC320.html#syllabus-statements",
    "href": "CMSC320.html#syllabus-statements",
    "title": "CMSC 320 - Software Engineering and Web Development",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC330.html",
    "href": "CMSC330.html",
    "title": "CMSC 330 - Data Science Skills",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online). 3 credits. Prerequisite: CMSC 210. Introduction to data science skills. The course introduces students to the foundations of data science and the tools used to collect, analyze and represent data. Students will apply these principles in both analysis and visualization projects. This course is not applicable for credit toward any College of Engineering degrees."
  },
  {
    "objectID": "CMSC330.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC330.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 330 - Data Science Skills",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 210."
  },
  {
    "objectID": "CMSC330.html#description",
    "href": "CMSC330.html#description",
    "title": "CMSC 330 - Data Science Skills",
    "section": "Description",
    "text": "Description\nIntroduction to data science skills. The course introduces students to the foundations of data science and the tools used to collect, analyze and represent data. Students will apply these principles in both analysis and visualization projects. This course is not applicable for credit toward any College of Engineering degrees."
  },
  {
    "objectID": "CMSC330.html#topics",
    "href": "CMSC330.html#topics",
    "title": "CMSC 330 - Data Science Skills",
    "section": "Topics",
    "text": "Topics\nanalysis, data, data management, data manipulation, data quality, security, visualization"
  },
  {
    "objectID": "CMSC330.html#syllabus-statements",
    "href": "CMSC330.html#syllabus-statements",
    "title": "CMSC 330 - Data Science Skills",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC340.html",
    "href": "CMSC340.html",
    "title": "CMSC 340 - Cybersecurity Skills",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online). 3 credits. Prerequisite: CMSC 210. Introduction to cybersecurity skills. The course introduces students to cybersecurity terminology, standards and best practices. Students will apply these practices as part of a cybersecurity-focused project. This course is not applicable for credit toward any College of Engineering degrees."
  },
  {
    "objectID": "CMSC340.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC340.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 340 - Cybersecurity Skills",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 210."
  },
  {
    "objectID": "CMSC340.html#description",
    "href": "CMSC340.html#description",
    "title": "CMSC 340 - Cybersecurity Skills",
    "section": "Description",
    "text": "Description\nIntroduction to cybersecurity skills. The course introduces students to cybersecurity terminology, standards and best practices. Students will apply these practices as part of a cybersecurity-focused project. This course is not applicable for credit toward any College of Engineering degrees."
  },
  {
    "objectID": "CMSC340.html#topics",
    "href": "CMSC340.html#topics",
    "title": "CMSC 340 - Cybersecurity Skills",
    "section": "Topics",
    "text": "Topics\ncryptographic systems, cybersecurity, ethics, firewalls, information security, logic, physical security, risk management, security, security maintenance, security technology, vpns"
  },
  {
    "objectID": "CMSC340.html#syllabus-statements",
    "href": "CMSC340.html#syllabus-statements",
    "title": "CMSC 340 - Cybersecurity Skills",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC355.html",
    "href": "CMSC355.html",
    "title": "CMSC 355 - Fundamentals of Software Engineering",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 256 or EGRE 246, either with a minimum grade of C. Provides an overview of how to engineer software systems, including all stages of the software development process based on agile principles. Familiarizes students with modern software tooling and the principles of software quality and testing. Students will work in teams to gain experience in software development methodology, write specification and design documents, and develop a prototype."
  },
  {
    "objectID": "CMSC355.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC355.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 355 - Fundamentals of Software Engineering",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 256 or EGRE 246, either with a minimum grade of C."
  },
  {
    "objectID": "CMSC355.html#description",
    "href": "CMSC355.html#description",
    "title": "CMSC 355 - Fundamentals of Software Engineering",
    "section": "Description",
    "text": "Description\nProvides an overview of how to engineer software systems, including all stages of the software development process based on agile principles. Familiarizes students with modern software tooling and the principles of software quality and testing. Students will work in teams to gain experience in software development methodology, write specification and design documents, and develop a prototype."
  },
  {
    "objectID": "CMSC355.html#topics",
    "href": "CMSC355.html#topics",
    "title": "CMSC 355 - Fundamentals of Software Engineering",
    "section": "Topics",
    "text": "Topics\nagile, ci/cd, code management, containerization, design, github, patterns, prototyping, requirement engineering, serverless coding, service oriented design techniques, software architecture, software design, software development, software lifecycle, software maintenance, software modeling, software quality, software validation, software verification, testing"
  },
  {
    "objectID": "CMSC355.html#syllabus-statements",
    "href": "CMSC355.html#syllabus-statements",
    "title": "CMSC 355 - Fundamentals of Software Engineering",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC391.html",
    "href": "CMSC391.html",
    "title": "CMSC 391 - Topics in Computer Science",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. May be repeated for credit. Prerequisite: permission of the instructor. This course will teach selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester and prerequisites."
  },
  {
    "objectID": "CMSC391.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC391.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 391 - Topics in Computer Science",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\npermission of the instructor."
  },
  {
    "objectID": "CMSC391.html#description",
    "href": "CMSC391.html#description",
    "title": "CMSC 391 - Topics in Computer Science",
    "section": "Description",
    "text": "Description\nThis course will teach selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester and prerequisites."
  },
  {
    "objectID": "CMSC391.html#topics",
    "href": "CMSC391.html#topics",
    "title": "CMSC 391 - Topics in Computer Science",
    "section": "Topics",
    "text": "Topics\nselected topics"
  },
  {
    "objectID": "CMSC391.html#syllabus-statements",
    "href": "CMSC391.html#syllabus-statements",
    "title": "CMSC 391 - Topics in Computer Science",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC401.html",
    "href": "CMSC401.html",
    "title": "CMSC 401 - Algorithm Analysis with Advanced Data Structures",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisites: CMSC 256 with a grade of C or better and CMSC 302 with a grade of C or better. Introduction to algorithm analysis and complexity classes. Advanced data structures topics including multiple linked lists, height-balanced trees, B-trees, hashing and graph representation; incorporating data structures into object-oriented design. Analysis of various searching and sorting algorithms. Algorithm design topics include divide-and-conquer, dynamic programming and greedy methods."
  },
  {
    "objectID": "CMSC401.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC401.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 401 - Algorithm Analysis with Advanced Data Structures",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 256 with a grade of C or better and CMSC 302 with a grade of C or better."
  },
  {
    "objectID": "CMSC401.html#description",
    "href": "CMSC401.html#description",
    "title": "CMSC 401 - Algorithm Analysis with Advanced Data Structures",
    "section": "Description",
    "text": "Description\nIntroduction to algorithm analysis and complexity classes. Advanced data structures topics including multiple linked lists, height-balanced trees, B-trees, hashing and graph representation; incorporating data structures into object-oriented design. Analysis of various searching and sorting algorithms. Algorithm design topics include divide-and-conquer, dynamic programming and greedy methods."
  },
  {
    "objectID": "CMSC401.html#topics",
    "href": "CMSC401.html#topics",
    "title": "CMSC 401 - Algorithm Analysis with Advanced Data Structures",
    "section": "Topics",
    "text": "Topics\nalgorithms, analysis, b-trees, complexity analysis, data structures, design, divide and conquer approach, dynamic programming, graph algorithms, graphs, greedy approach, hashing, height-balanced trees, linked lists, objects, recurrences, sorting"
  },
  {
    "objectID": "CMSC401.html#syllabus-statements",
    "href": "CMSC401.html#syllabus-statements",
    "title": "CMSC 401 - Algorithm Analysis with Advanced Data Structures",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC403.html",
    "href": "CMSC403.html",
    "title": "CMSC 403 - Programming Languages",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisites: CMSC 256 and CMSC 303, both with a minimum grade of C. Survey of representative modern programming languages. Formal definition of programming languages including specifications of syntax and semantics. Precedence, infix, prefix and postfix notation. Global properties of algorithmic languages. Sub-routines, co-routines and tasks. List processing, string manipulation, data description and simulation languages. Run-time representation of program and data structures."
  },
  {
    "objectID": "CMSC403.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC403.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 403 - Programming Languages",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 256 and CMSC 303, both with a minimum grade of C."
  },
  {
    "objectID": "CMSC403.html#description",
    "href": "CMSC403.html#description",
    "title": "CMSC 403 - Programming Languages",
    "section": "Description",
    "text": "Description\nSurvey of representative modern programming languages. Formal definition of programming languages including specifications of syntax and semantics. Precedence, infix, prefix and postfix notation. Global properties of algorithmic languages. Sub-routines, co-routines and tasks. List processing, string manipulation, data description and simulation languages. Run-time representation of program and data structures."
  },
  {
    "objectID": "CMSC403.html#topics",
    "href": "CMSC403.html#topics",
    "title": "CMSC 403 - Programming Languages",
    "section": "Topics",
    "text": "Topics\nalgorithms, co-routines, data, data structures, design, functional programming, infix, languages, lists, object oriented programming, parsing, postfix, precendence, prefix, semantics, strings, sub-routines, symbol table, syntax"
  },
  {
    "objectID": "CMSC403.html#syllabus-statements",
    "href": "CMSC403.html#syllabus-statements",
    "title": "CMSC 403 - Programming Languages",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC404.html",
    "href": "CMSC404.html",
    "title": "CMSC 404 - Compiler Construction",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisites: CMSC 401 and 403. A first course in compiler theory and construction. Formal description of languages, underlying theory and design techniques for compilers, lexical analysis, syntax analysis, syntax-directed translation, intermediate languages, run-time system management, code generation, code optimization, compiler-building tools."
  },
  {
    "objectID": "CMSC404.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC404.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 404 - Compiler Construction",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 and 403."
  },
  {
    "objectID": "CMSC404.html#description",
    "href": "CMSC404.html#description",
    "title": "CMSC 404 - Compiler Construction",
    "section": "Description",
    "text": "Description\nA first course in compiler theory and construction. Formal description of languages, underlying theory and design techniques for compilers, lexical analysis, syntax analysis, syntax-directed translation, intermediate languages, run-time system management, code generation, code optimization, compiler-building tools."
  },
  {
    "objectID": "CMSC404.html#topics",
    "href": "CMSC404.html#topics",
    "title": "CMSC 404 - Compiler Construction",
    "section": "Topics",
    "text": "Topics\ncode management, compilers, intermediate languages, languages, lexical analysis, optimization, run-time system management, syntax"
  },
  {
    "objectID": "CMSC404.html#syllabus-statements",
    "href": "CMSC404.html#syllabus-statements",
    "title": "CMSC 404 - Compiler Construction",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC409.html",
    "href": "CMSC409.html",
    "title": "CMSC 409 - Artificial Intelligence",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisites: CMSC 401 with a minimum grade of C and MATH 310. Covers problem spaces, problem-solving methods, game playing, knowledge representatives, expert systems, natural language understanding."
  },
  {
    "objectID": "CMSC409.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC409.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 409 - Artificial Intelligence",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 with a minimum grade of C and MATH 310."
  },
  {
    "objectID": "CMSC409.html#description",
    "href": "CMSC409.html#description",
    "title": "CMSC 409 - Artificial Intelligence",
    "section": "Description",
    "text": "Description\nCovers problem spaces, problem-solving methods, game playing, knowledge representatives, expert systems, natural language understanding."
  },
  {
    "objectID": "CMSC409.html#topics",
    "href": "CMSC409.html#topics",
    "title": "CMSC 409 - Artificial Intelligence",
    "section": "Topics",
    "text": "Topics\nexpert systems, game playing, knowledge representatives, machine learning, natural language, problem solving, problem spaces"
  },
  {
    "objectID": "CMSC409.html#syllabus-statements",
    "href": "CMSC409.html#syllabus-statements",
    "title": "CMSC 409 - Artificial Intelligence",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC410.html",
    "href": "CMSC410.html",
    "title": "CMSC 410 - Introduction to Quantum Computing",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisites: CMSC 401 and MATH 310, both with a minimum grade of B. Introduction to quantum information processing: state vectors and density operators, tensor product space, unitary evolution, no-go theorems, measurement, qubit, gate model of quantum computing, quantum complexity theory, quantum error correction, quantum algorithms, and quantum machine learning."
  },
  {
    "objectID": "CMSC410.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC410.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 410 - Introduction to Quantum Computing",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 and MATH 310, both with a minimum grade of B."
  },
  {
    "objectID": "CMSC410.html#description",
    "href": "CMSC410.html#description",
    "title": "CMSC 410 - Introduction to Quantum Computing",
    "section": "Description",
    "text": "Description\nIntroduction to quantum information processing: state vectors and density operators, tensor product space, unitary evolution, no-go theorems, measurement, qubit, gate model of quantum computing, quantum complexity theory, quantum error correction, quantum algorithms, and quantum machine learning."
  },
  {
    "objectID": "CMSC410.html#topics",
    "href": "CMSC410.html#topics",
    "title": "CMSC 410 - Introduction to Quantum Computing",
    "section": "Topics",
    "text": "Topics\ndensity operators, measurement, no-go theorems, quantum algorithms, quantum complexity, quantum computing, quantum error correction, quantum machine learning, qubit, state vectors, tensor, unitary evolution"
  },
  {
    "objectID": "CMSC410.html#syllabus-statements",
    "href": "CMSC410.html#syllabus-statements",
    "title": "CMSC 410 - Introduction to Quantum Computing",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC411.html",
    "href": "CMSC411.html",
    "title": "CMSC 411 - Computer Graphics",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisites: CMSC 355 and MATH 310. Presents mathematical techniques for graphic development and transformation, curve and surface approximation and projections, graphical languages and data structures and their implementation, graphic modeling."
  },
  {
    "objectID": "CMSC411.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC411.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 411 - Computer Graphics",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 355 and MATH 310."
  },
  {
    "objectID": "CMSC411.html#description",
    "href": "CMSC411.html#description",
    "title": "CMSC 411 - Computer Graphics",
    "section": "Description",
    "text": "Description\nPresents mathematical techniques for graphic development and transformation, curve and surface approximation and projections, graphical languages and data structures and their implementation, graphic modeling."
  },
  {
    "objectID": "CMSC411.html#topics",
    "href": "CMSC411.html#topics",
    "title": "CMSC 411 - Computer Graphics",
    "section": "Topics",
    "text": "Topics\ncurve and surface approximations, data structures, graphic development, projections, transformation"
  },
  {
    "objectID": "CMSC411.html#syllabus-statements",
    "href": "CMSC411.html#syllabus-statements",
    "title": "CMSC 411 - Computer Graphics",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC412.html",
    "href": "CMSC412.html",
    "title": "CMSC 412 - Social Network Analysis and Cybersecurity Risks",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisites: CMSC 401 with a minimum grade of C. Covers network models, link prediction and analysis, centrality measures, random networks, power-laws and preferential attachment, small world phenomenon and decentralized search, community structure, information propagation in networks, and security and privacy issues in OSNs."
  },
  {
    "objectID": "CMSC412.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC412.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 412 - Social Network Analysis and Cybersecurity Risks",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 with a minimum grade of C."
  },
  {
    "objectID": "CMSC412.html#description",
    "href": "CMSC412.html#description",
    "title": "CMSC 412 - Social Network Analysis and Cybersecurity Risks",
    "section": "Description",
    "text": "Description\nCovers network models, link prediction and analysis, centrality measures, random networks, power-laws and preferential attachment, small world phenomenon and decentralized search, community structure, information propagation in networks, and security and privacy issues in OSNs."
  },
  {
    "objectID": "CMSC412.html#topics",
    "href": "CMSC412.html#topics",
    "title": "CMSC 412 - Social Network Analysis and Cybersecurity Risks",
    "section": "Topics",
    "text": "Topics\ncentrality, community structure, decentralized search, information propagation, link analysis, network models, networks, osns, power-laws, preferential attachment, random networks, security, small world phenomenon"
  },
  {
    "objectID": "CMSC412.html#syllabus-statements",
    "href": "CMSC412.html#syllabus-statements",
    "title": "CMSC 412 - Social Network Analysis and Cybersecurity Risks",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC413.html",
    "href": "CMSC413.html",
    "title": "CMSC 413 - Introduction to Cybersecurity",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 401 with a minimum grade of C. This course provides introduction and basic concepts of computer security, cyber attacks, cyber defense, cyber forensics and cyber ethics."
  },
  {
    "objectID": "CMSC413.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC413.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 413 - Introduction to Cybersecurity",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 with a minimum grade of C."
  },
  {
    "objectID": "CMSC413.html#description",
    "href": "CMSC413.html#description",
    "title": "CMSC 413 - Introduction to Cybersecurity",
    "section": "Description",
    "text": "Description\nThis course provides introduction and basic concepts of computer security, cyber attacks, cyber defense, cyber forensics and cyber ethics."
  },
  {
    "objectID": "CMSC413.html#topics",
    "href": "CMSC413.html#topics",
    "title": "CMSC 413 - Introduction to Cybersecurity",
    "section": "Topics",
    "text": "Topics\ncyber defense, cyber ethics, cyber forensics, cybersecurity, security"
  },
  {
    "objectID": "CMSC413.html#syllabus-statements",
    "href": "CMSC413.html#syllabus-statements",
    "title": "CMSC 413 - Introduction to Cybersecurity",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC414.html",
    "href": "CMSC414.html",
    "title": "CMSC 414 - Computer and Network Security",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 401 with a minimum grade of C. Corequisite: CMSC 312. This course covers the best practices of computer systems and network security. Key topics include security architecture, cryptographic systems and security management tools."
  },
  {
    "objectID": "CMSC414.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC414.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 414 - Computer and Network Security",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 with a minimum grade of C. Corequisite: CMSC 312."
  },
  {
    "objectID": "CMSC414.html#description",
    "href": "CMSC414.html#description",
    "title": "CMSC 414 - Computer and Network Security",
    "section": "Description",
    "text": "Description\nThis course covers the best practices of computer systems and network security. Key topics include security architecture, cryptographic systems and security management tools."
  },
  {
    "objectID": "CMSC414.html#topics",
    "href": "CMSC414.html#topics",
    "title": "CMSC 414 - Computer and Network Security",
    "section": "Topics",
    "text": "Topics\napplication layer attacks, architecture, computer networks, computer security, computer systems design, cryptographic systems, firewalls, internet, link layer attacks, network penetration, networks, security"
  },
  {
    "objectID": "CMSC414.html#syllabus-statements",
    "href": "CMSC414.html#syllabus-statements",
    "title": "CMSC 414 - Computer and Network Security",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC415.html",
    "href": "CMSC415.html",
    "title": "CMSC 415 - Introduction to Cryptography",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 401 with a minimum grade of C. This course provides a rigorous and theoretical introduction to modern cryptography. Key topics include symmetric key encryption and authentication, public key encryption, and digital signatures."
  },
  {
    "objectID": "CMSC415.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC415.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 415 - Introduction to Cryptography",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 with a minimum grade of C."
  },
  {
    "objectID": "CMSC415.html#description",
    "href": "CMSC415.html#description",
    "title": "CMSC 415 - Introduction to Cryptography",
    "section": "Description",
    "text": "Description\nThis course provides a rigorous and theoretical introduction to modern cryptography. Key topics include symmetric key encryption and authentication, public key encryption, and digital signatures."
  },
  {
    "objectID": "CMSC415.html#topics",
    "href": "CMSC415.html#topics",
    "title": "CMSC 415 - Introduction to Cryptography",
    "section": "Topics",
    "text": "Topics\nauthentication, cryptographic systems, digital signatures, public key encryption, symmetric key encryption"
  },
  {
    "objectID": "CMSC415.html#syllabus-statements",
    "href": "CMSC415.html#syllabus-statements",
    "title": "CMSC 415 - Introduction to Cryptography",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC416.html",
    "href": "CMSC416.html",
    "title": "CMSC 416 - Introduction to Natural Language Processing",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 401 with a minimum grade of C. Covers rule-based and statistical methods for creating computer programs that analyze, generate and understand human language. Topics include regular expressions and automata, context-free grammars, probabilistic classifiers, and machine learning. Word-level, syntactic and semantic processing are all considered. Application to real-world problems such as spell-checking, Web search, automatic question answering, authorship identification and developing conversational interfaces."
  },
  {
    "objectID": "CMSC416.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC416.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 416 - Introduction to Natural Language Processing",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 with a minimum grade of C."
  },
  {
    "objectID": "CMSC416.html#description",
    "href": "CMSC416.html#description",
    "title": "CMSC 416 - Introduction to Natural Language Processing",
    "section": "Description",
    "text": "Description\nCovers rule-based and statistical methods for creating computer programs that analyze, generate and understand human language. Topics include regular expressions and automata, context-free grammars, probabilistic classifiers, and machine learning. Word-level, syntactic and semantic processing are all considered. Application to real-world problems such as spell-checking, Web search, automatic question answering, authorship identification and developing conversational interfaces."
  },
  {
    "objectID": "CMSC416.html#topics",
    "href": "CMSC416.html#topics",
    "title": "CMSC 416 - Introduction to Natural Language Processing",
    "section": "Topics",
    "text": "Topics\nautomation, computer systems design, context-free grammars, machine learning, natural language, probabilistic classifiers, real-world applications, regular expressions, semantics, spell-checking, statistics, syntax, web search"
  },
  {
    "objectID": "CMSC416.html#syllabus-statements",
    "href": "CMSC416.html#syllabus-statements",
    "title": "CMSC 416 - Introduction to Natural Language Processing",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC420.html",
    "href": "CMSC420.html",
    "title": "CMSC 420 - Software Project Management",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 355 with a minimum grade of C. Study of the logistics of team software development. Students work in teams to gain experience in software management and develop the components of a larger software product. Topics include risk management, project planning, quality management, configuration management and software testing."
  },
  {
    "objectID": "CMSC420.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC420.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 420 - Software Project Management",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 355 with a minimum grade of C."
  },
  {
    "objectID": "CMSC420.html#description",
    "href": "CMSC420.html#description",
    "title": "CMSC 420 - Software Project Management",
    "section": "Description",
    "text": "Description\nStudy of the logistics of team software development. Students work in teams to gain experience in software management and develop the components of a larger software product. Topics include risk management, project planning, quality management, configuration management and software testing."
  },
  {
    "objectID": "CMSC420.html#topics",
    "href": "CMSC420.html#topics",
    "title": "CMSC 420 - Software Project Management",
    "section": "Topics",
    "text": "Topics\nproject planning, quality management, risk management, software development, software management, software quality"
  },
  {
    "objectID": "CMSC420.html#syllabus-statements",
    "href": "CMSC420.html#syllabus-statements",
    "title": "CMSC 420 - Software Project Management",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC425.html",
    "href": "CMSC425.html",
    "title": "CMSC 425 - Introduction to Software Analysis and Testing",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program. A practical introduction to testing complex software applications. An introduction to concepts and techniques used in the analysis of software, including basic and advanced control flow and data flow analyses. Using analytic results to derive test data and validate the correct implementation of programs. Advanced testing strategies including random, structural, mutation and fuzzing."
  },
  {
    "objectID": "CMSC425.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC425.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 425 - Introduction to Software Analysis and Testing",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program."
  },
  {
    "objectID": "CMSC425.html#description",
    "href": "CMSC425.html#description",
    "title": "CMSC 425 - Introduction to Software Analysis and Testing",
    "section": "Description",
    "text": "Description\nA practical introduction to testing complex software applications. An introduction to concepts and techniques used in the analysis of software, including basic and advanced control flow and data flow analyses. Using analytic results to derive test data and validate the correct implementation of programs. Advanced testing strategies including random, structural, mutation and fuzzing."
  },
  {
    "objectID": "CMSC425.html#topics",
    "href": "CMSC425.html#topics",
    "title": "CMSC 425 - Introduction to Software Analysis and Testing",
    "section": "Topics",
    "text": "Topics\nadvanced testing strategies, analysis, concolic hybrid analysis, control flow, coverage-driven systematic software testing, data flow, data-flow, dynamic programming, limitations, program analysis-driven testing, software development, software management, software validation, software verification, static programming, symbolic program analysis, test case coverage, testing"
  },
  {
    "objectID": "CMSC425.html#syllabus-statements",
    "href": "CMSC425.html#syllabus-statements",
    "title": "CMSC 425 - Introduction to Software Analysis and Testing",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC428.html",
    "href": "CMSC428.html",
    "title": "CMSC 428 - Mobile Programming: iOS",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 355, with a minimum grade of C. This course covers the fundamentals of Swift, Xcode and iOS for programming and design of iOS applications. Background in object-oriented programming and access to a computer with Xcode platform is required."
  },
  {
    "objectID": "CMSC428.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC428.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 428 - Mobile Programming: iOS",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 355, with a minimum grade of C."
  },
  {
    "objectID": "CMSC428.html#description",
    "href": "CMSC428.html#description",
    "title": "CMSC 428 - Mobile Programming: iOS",
    "section": "Description",
    "text": "Description\nThis course covers the fundamentals of Swift, Xcode and iOS for programming and design of iOS applications. Background in object-oriented programming and access to a computer with Xcode platform is required."
  },
  {
    "objectID": "CMSC428.html#topics",
    "href": "CMSC428.html#topics",
    "title": "CMSC 428 - Mobile Programming: iOS",
    "section": "Topics",
    "text": "Topics\nios, objects, swift, xcode"
  },
  {
    "objectID": "CMSC428.html#syllabus-statements",
    "href": "CMSC428.html#syllabus-statements",
    "title": "CMSC 428 - Mobile Programming: iOS",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC435.html",
    "href": "CMSC435.html",
    "title": "CMSC 435 - Introduction to Data Science",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 401 with a minimum grade of C. This course covers understanding, representation, storage, retrieval, preprocessing and analysis of data. Specific topics include data quality and preprocessing, database management systems, data warehouses, selected methods for scalable unsupervised and supervised data analysis, and assessment of results generated by these methods. Students will be engaged in analysis of real-life data from data preprocessing, through data analysis, to the assessment of a knowledge product."
  },
  {
    "objectID": "CMSC435.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC435.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 435 - Introduction to Data Science",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 with a minimum grade of C."
  },
  {
    "objectID": "CMSC435.html#description",
    "href": "CMSC435.html#description",
    "title": "CMSC 435 - Introduction to Data Science",
    "section": "Description",
    "text": "Description\nThis course covers understanding, representation, storage, retrieval, preprocessing and analysis of data. Specific topics include data quality and preprocessing, database management systems, data warehouses, selected methods for scalable unsupervised and supervised data analysis, and assessment of results generated by these methods. Students will be engaged in analysis of real-life data from data preprocessing, through data analysis, to the assessment of a knowledge product."
  },
  {
    "objectID": "CMSC435.html#topics",
    "href": "CMSC435.html#topics",
    "title": "CMSC 435 - Introduction to Data Science",
    "section": "Topics",
    "text": "Topics\nanalysis, data, data analysis, data quality, data structures, database"
  },
  {
    "objectID": "CMSC435.html#syllabus-statements",
    "href": "CMSC435.html#syllabus-statements",
    "title": "CMSC 435 - Introduction to Data Science",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC440.html",
    "href": "CMSC440.html",
    "title": "CMSC 440 - Data Communication and Networking",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 257 with a minimum grade of C. Enrollment is restricted to majors in the College of Engineering. This course explores computer networking, focusing on the applications and protocols that run on the Internet. Students will take a top-down approach to the layered network architecture, studying applications first and then proceeding down the network “stack” toward the physical link. Students will examine the operation of applications such as the web, FTP, e-mail and DNS. At the transport layer, students will study both connectionless UDP and connection-oriented TCP, with an in-depth study of TCP operation, specifically flow control and congestion control. Data communications are explored through various data routing protocols. Additional topics include network security and wireless/mobile networking."
  },
  {
    "objectID": "CMSC440.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC440.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 440 - Data Communication and Networking",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 257 with a minimum grade of C. Enrollment is restricted to majors in the College of Engineering."
  },
  {
    "objectID": "CMSC440.html#description",
    "href": "CMSC440.html#description",
    "title": "CMSC 440 - Data Communication and Networking",
    "section": "Description",
    "text": "Description\nThis course explores computer networking, focusing on the applications and protocols that run on the Internet. Students will take a top-down approach to the layered network architecture, studying applications first and then proceeding down the network “stack” toward the physical link. Students will examine the operation of applications such as the web, FTP, e-mail and DNS. At the transport layer, students will study both connectionless UDP and connection-oriented TCP, with an in-depth study of TCP operation, specifically flow control and congestion control. Data communications are explored through various data routing protocols. Additional topics include network security and wireless/mobile networking."
  },
  {
    "objectID": "CMSC440.html#topics",
    "href": "CMSC440.html#topics",
    "title": "CMSC 440 - Data Communication and Networking",
    "section": "Topics",
    "text": "Topics\narchitecture, client-server model, computer networks, data, dns, dns , e-mail, flow control, http application, internet, mail applications, network edge, network models, networks, networks vulnerability, pipelining, protocol layers, reliable transmission, socket programming, tcp, udp, web development"
  },
  {
    "objectID": "CMSC440.html#syllabus-statements",
    "href": "CMSC440.html#syllabus-statements",
    "title": "CMSC 440 - Data Communication and Networking",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC441.html",
    "href": "CMSC441.html",
    "title": "CMSC 441 - Senior Design Studio I (Laboratory/Project Time)",
    "section": "",
    "text": "Semester course; 6 laboratory hours. 2 credits. Prerequisites: CMSC 355; and UNIV 200 or HONR 200 or equivalent, both with minimum grades of C. Corequisite: CMSC 451. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses. A minimum of six laboratory hours per week dedicated to the execution phase of the senior design (capstone) project for the computer science major. Tasks include team meetings, brainstorming, sponsor advising, researching, designing, implementing, reviewing, testing and validating projects. Each student will participate, either individually or as part of a team, in a project or other experience approved by the course coordinator or sponsored by another computer science faculty member. Students will submit a detailed written description of their proposed project or experience and will present orally some aspect of what they have learned and/or done during the semester. This course cannot be counted as upper-level CMSC electives for students graduating under bulletins prior to 2008-09."
  },
  {
    "objectID": "CMSC441.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC441.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 441 - Senior Design Studio I (Laboratory/Project Time)",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 355; and UNIV 200 or HONR 200 or equivalent, both with minimum grades of C. Corequisite: CMSC 451. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses."
  },
  {
    "objectID": "CMSC441.html#description",
    "href": "CMSC441.html#description",
    "title": "CMSC 441 - Senior Design Studio I (Laboratory/Project Time)",
    "section": "Description",
    "text": "Description\nA minimum of six laboratory hours per week dedicated to the execution phase of the senior design (capstone) project for the computer science major. Tasks include team meetings, brainstorming, sponsor advising, researching, designing, implementing, reviewing, testing and validating projects. Each student will participate, either individually or as part of a team, in a project or other experience approved by the course coordinator or sponsored by another computer science faculty member. Students will submit a detailed written description of their proposed project or experience and will present orally some aspect of what they have learned and/or done during the semester. This course cannot be counted as upper-level CMSC electives for students graduating under bullet"
  },
  {
    "objectID": "CMSC441.html#topics",
    "href": "CMSC441.html#topics",
    "title": "CMSC 441 - Senior Design Studio I (Laboratory/Project Time)",
    "section": "Topics",
    "text": "Topics\nbrainstorming, capstone, design, final project, project planning, research, teamwork, testing"
  },
  {
    "objectID": "CMSC441.html#syllabus-statements",
    "href": "CMSC441.html#syllabus-statements",
    "title": "CMSC 441 - Senior Design Studio I (Laboratory/Project Time)",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC442.html",
    "href": "CMSC442.html",
    "title": "CMSC 442 - Senior Design Studio II (Laboratory/Project Time)",
    "section": "",
    "text": "Semester course; 6 laboratory hours. 2 credits. Prerequisites: CMSC 441, CMSC 451 and CMSC 508, each with a minimum grade of C. Corequisite: CMSC 452. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses. A minimum of six laboratory hours per week dedicated to the execution phase of the senior design (capstone) project for the computer science major. Tasks include team meetings, brainstorming, sponsor advising, researching, designing, implementing, reviewing, testing and validating projects. Each student will participate, either individually or as part of a team, in a project or other experience approved by the course coordinator or sponsored by another computer science faculty member. Students must continue on the same project that was started in CMSC 441 and CMSC 451. A final project report and presentation are due at the conclusion of the two-semester project or experience. This course cannot be counted as upper-level CMSC electives for students graduating under bulletins prior to 2008-09."
  },
  {
    "objectID": "CMSC442.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC442.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 442 - Senior Design Studio II (Laboratory/Project Time)",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 441, CMSC 451 and CMSC 508, each with a minimum grade of C. Corequisite: CMSC 452. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses."
  },
  {
    "objectID": "CMSC442.html#description",
    "href": "CMSC442.html#description",
    "title": "CMSC 442 - Senior Design Studio II (Laboratory/Project Time)",
    "section": "Description",
    "text": "Description\nA minimum of six laboratory hours per week dedicated to the execution phase of the senior design (capstone) project for the computer science major. Tasks include team meetings, brainstorming, sponsor advising, researching, designing, implementing, reviewing, testing and validating projects. Each student will participate, either individually or as part of a team, in a project or other experience approved by the course coordinator or sponsored by another computer science faculty member. Students must continue on the same project that was started in CMSC 441 and CMSC 451. A final project report and presentation are due at the conclusion of the two-semester project or experience. This course cannot be counted as upper-level CMSC electives for students graduating under bulletins prio"
  },
  {
    "objectID": "CMSC442.html#topics",
    "href": "CMSC442.html#topics",
    "title": "CMSC 442 - Senior Design Studio II (Laboratory/Project Time)",
    "section": "Topics",
    "text": "Topics\nbrainstorming, final project, project planning, researching, teamwork, testing"
  },
  {
    "objectID": "CMSC442.html#syllabus-statements",
    "href": "CMSC442.html#syllabus-statements",
    "title": "CMSC 442 - Senior Design Studio II (Laboratory/Project Time)",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC451.html",
    "href": "CMSC451.html",
    "title": "CMSC 451 - Senior Project I",
    "section": "",
    "text": "Semester course; 1 lecture hour. 1 credit. Prerequisites: CMSC 355 with minimum grade of C; and UNIV 200 or HONR 200 or equivalent. Corequisite: CMSC 441. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses. This weekly seminar presents and discusses topics relevant to senior-level computer science students in support of the capstone project and upcoming graduation. A single course coordinator manages and administers the course and schedules the various faculty lectures and guest speakers. Topics include, but are not limited to, the following: proposal writing; project planning and management; scheduling resources and budgeting for software development projects; patents and intellectual property; entrepreneurship; ethical, legal and social issues in computing; and professional responsibilities of computer scientists. Each student will write and revise a research paper on a technical topic associated with his or her project or experience. A final project report and presentation, which will include a discussion of associated legal, social and/or ethical issues, are due at the conclusion of the two-semester project or experience. The courses in this sequence cannot be counted as upper-level CMSC electives for students graduating under bulletins prior to 2008-09."
  },
  {
    "objectID": "CMSC451.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC451.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 451 - Senior Project I",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 355 with minimum grade of C; and UNIV 200 or HONR 200 or equivalent. Corequisite: CMSC 441. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses."
  },
  {
    "objectID": "CMSC451.html#description",
    "href": "CMSC451.html#description",
    "title": "CMSC 451 - Senior Project I",
    "section": "Description",
    "text": "Description\nThis weekly seminar presents and discusses topics relevant to senior-level computer science students in support of the capstone project and upcoming graduation. A single course coordinator manages and administers the course and schedules the various faculty lectures and guest speakers. Topics include, but are not limited to, the following: proposal writing; project planning and management; scheduling resources and budgeting for software development projects; patents and intellectual property; entrepreneurship; ethical, legal and social issues in computing; and professional responsibilities of computer scientists. Each student will write and revise a research paper on a technical topic associated with his or her project or experience. A final project report and presentat"
  },
  {
    "objectID": "CMSC451.html#topics",
    "href": "CMSC451.html#topics",
    "title": "CMSC 451 - Senior Project I",
    "section": "Topics",
    "text": "Topics\ncapstone, entrepreneurship, ethics, final project, project planning, social aspects of technology, software development"
  },
  {
    "objectID": "CMSC451.html#syllabus-statements",
    "href": "CMSC451.html#syllabus-statements",
    "title": "CMSC 451 - Senior Project I",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC452.html",
    "href": "CMSC452.html",
    "title": "CMSC 452 - Senior Project II",
    "section": "",
    "text": "Semester course; 1 lecture hour. 1 credit. Prerequisites: CMSC 441, CMSC 451 and CMSC 508, each with a minimum grade of C. Corequisite: CMSC 442. Enrollment is restricted to students with senior standing in the computer science department. This weekly seminar presents and discusses topics relevant to senior-level computer science students in support of the capstone project and upcoming graduation. A single course coordinator manages and administers the course and schedules the various faculty lectures and guest speakers. Topics include, but are not limited to, the following: proposal writing; project planning and management; scheduling resources and budgeting for software development projects; patents and intellectual property; entrepreneurship; ethical, legal and social issues in computing; and professional responsibilities of computer scientists. Each student will write and revise a research paper on a technical topic associated with his or her project or experience. Students must continue on the same project that was started in CMSC 451. A final project report and presentation, which will include a discussion of associated legal, social and/or ethical issues, are due at the conclusion of the two-semester project or experience. The courses in this sequence cannot be counted as upper-level CMSC electives for students graduating under bulletins prior to 2008-09."
  },
  {
    "objectID": "CMSC452.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC452.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 452 - Senior Project II",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 441, CMSC 451 and CMSC 508, each with a minimum grade of C. Corequisite: CMSC 442. Enrollment is restricted to students with senior standing in the computer science department."
  },
  {
    "objectID": "CMSC452.html#description",
    "href": "CMSC452.html#description",
    "title": "CMSC 452 - Senior Project II",
    "section": "Description",
    "text": "Description\nThis weekly seminar presents and discusses topics relevant to senior-level computer science students in support of the capstone project and upcoming graduation. A single course coordinator manages and administers the course and schedules the various faculty lectures and guest speakers. Topics include, but are not limited to, the following: proposal writing; project planning and management; scheduling resources and budgeting for software development projects; patents and intellectual property; entrepreneurship; ethical, legal and social issues in computing; and professional responsibilities of computer scientists. Each student will write and revise a research paper on a technical topic associated with his or her project or experience. Students must continue on the same project that was started in CMSC 451."
  },
  {
    "objectID": "CMSC452.html#topics",
    "href": "CMSC452.html#topics",
    "title": "CMSC 452 - Senior Project II",
    "section": "Topics",
    "text": "Topics\nagile, code management, ci/cd, entrepreneurship, final project, maintainability, project planning, scalability, security, social aspects of technology, software development, teamwork, testing"
  },
  {
    "objectID": "CMSC452.html#syllabus-statements",
    "href": "CMSC452.html#syllabus-statements",
    "title": "CMSC 452 - Senior Project II",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC455.html",
    "href": "CMSC455.html",
    "title": "CMSC 455 - Software as a Service",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program. Students will examine the challenges, opportunities and open problems of software-as-a-service deployed on commodity cloud computing platforms. Covers relevant software architectures and API design principles. Includes concepts of modern software frameworks for software development, cloud computing for software deployment and software operations. Students participate in projects that use modern tooling to develop, deploy and monitor a software application."
  },
  {
    "objectID": "CMSC455.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC455.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 455 - Software as a Service",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program."
  },
  {
    "objectID": "CMSC455.html#description",
    "href": "CMSC455.html#description",
    "title": "CMSC 455 - Software as a Service",
    "section": "Description",
    "text": "Description\nStudents will examine the challenges, opportunities and open problems of software-as-a-service deployed on commodity cloud computing platforms. Covers relevant software architectures and API design principles. Includes concepts of modern software frameworks for software development, cloud computing for software deployment and software operations. Students participate in projects that use modern tooling to develop, deploy and monitor a software application."
  },
  {
    "objectID": "CMSC455.html#topics",
    "href": "CMSC455.html#topics",
    "title": "CMSC 455 - Software as a Service",
    "section": "Topics",
    "text": "Topics\napi, applications, cloud computing, software development, software management"
  },
  {
    "objectID": "CMSC455.html#syllabus-statements",
    "href": "CMSC455.html#syllabus-statements",
    "title": "CMSC 455 - Software as a Service",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC475.html",
    "href": "CMSC475.html",
    "title": "CMSC 475 - Design and Implementation of User Interfaces",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program. This course investigates the design and implementation of user interfaces and the evaluation of user experiences. Particular emphasis is placed on creating professional-quality designs and implementations and on evaluating these implementations with end-users. Students will create their own UIs as well as critique others to develop a deep understanding of what works in practice."
  },
  {
    "objectID": "CMSC475.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC475.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 475 - Design and Implementation of User Interfaces",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program."
  },
  {
    "objectID": "CMSC475.html#description",
    "href": "CMSC475.html#description",
    "title": "CMSC 475 - Design and Implementation of User Interfaces",
    "section": "Description",
    "text": "Description\nThis course investigates the design and implementation of user interfaces and the evaluation of user experiences. Particular emphasis is placed on creating professional-quality designs and implementations and on evaluating these implementations with end-users. Students will create their own UIs as well as critique others to develop a deep understanding of what works in practice."
  },
  {
    "objectID": "CMSC475.html#topics",
    "href": "CMSC475.html#topics",
    "title": "CMSC 475 - Design and Implementation of User Interfaces",
    "section": "Topics",
    "text": "Topics\ndesign, end-users, interfaces, user interface"
  },
  {
    "objectID": "CMSC475.html#syllabus-statements",
    "href": "CMSC475.html#syllabus-statements",
    "title": "CMSC 475 - Design and Implementation of User Interfaces",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC491.html",
    "href": "CMSC491.html",
    "title": "CMSC 491 - Topics in Computer Science",
    "section": "",
    "text": "Semester course; variable hours. 1-3 credits. May be repeated for credit with different content. Prerequisite: permission of instructor. This course will cover selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester."
  },
  {
    "objectID": "CMSC491.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC491.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 491 - Topics in Computer Science",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\npermission of instructor."
  },
  {
    "objectID": "CMSC491.html#description",
    "href": "CMSC491.html#description",
    "title": "CMSC 491 - Topics in Computer Science",
    "section": "Description",
    "text": "Description\nThis course will cover selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester."
  },
  {
    "objectID": "CMSC491.html#topics",
    "href": "CMSC491.html#topics",
    "title": "CMSC 491 - Topics in Computer Science",
    "section": "Topics",
    "text": "Topics\nselected topics"
  },
  {
    "objectID": "CMSC491.html#syllabus-statements",
    "href": "CMSC491.html#syllabus-statements",
    "title": "CMSC 491 - Topics in Computer Science",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC492.html",
    "href": "CMSC492.html",
    "title": "CMSC 492 - Independent Study",
    "section": "",
    "text": "Semester course; variable hours. 2, 3 or 4 credits per semester. Maximum 4 credits per semester; maximum total of 6 credits. Generally open only to students of junior or senior standing who have acquired at least 12 credits in the departmental discipline. Determination of the amount of credit and permission of instructor and department chair must be procured prior to registration of the course. The student must submit a proposal for investigating some area or problem not contained in the regular curriculum. The results of the student’s study will be presented in a report."
  },
  {
    "objectID": "CMSC492.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC492.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 492 - Independent Study",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC492.html#description",
    "href": "CMSC492.html#description",
    "title": "CMSC 492 - Independent Study",
    "section": "Description",
    "text": "Description\nMaximum 4 credits per semester; maximum total of 6 credits. Generally open only to students of junior or senior standing who have acquired at least 12 credits in the departmental discipline. Determination of the amount of credit and permission of instructor and department chair must be procured prior to registration of the course. The student must submit a proposal for investigating some area or problem not contained in the regular curriculum. The results of the student’s study will be presented in a report."
  },
  {
    "objectID": "CMSC492.html#topics",
    "href": "CMSC492.html#topics",
    "title": "CMSC 492 - Independent Study",
    "section": "Topics",
    "text": "Topics\nindependent study"
  },
  {
    "objectID": "CMSC492.html#syllabus-statements",
    "href": "CMSC492.html#syllabus-statements",
    "title": "CMSC 492 - Independent Study",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC501.html",
    "href": "CMSC501.html",
    "title": "CMSC 501 - Advanced Algorithms",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Prerequisite: CMSC 401 or equivalent. Enrollment is restricted to students with graduate standing or those accepted into the accelerated B.S. to M.S. program in computer science. Advanced graph algorithms, advanced data structures, applied numerical algorithms, optimization methods, approximation methods for hard graph and string problems and computational geometry algorithms."
  },
  {
    "objectID": "CMSC501.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC501.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 501 - Advanced Algorithms",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 or equivalent. Enrollment is restricted to students with graduate standing or those accepted into the accelerated BS to MS program in computer science."
  },
  {
    "objectID": "CMSC501.html#description",
    "href": "CMSC501.html#description",
    "title": "CMSC 501 - Advanced Algorithms",
    "section": "Description",
    "text": "Description\nAdvanced graph algorithms, advanced data structures, applied numerical algorithms, optimization methods, approximation methods for hard graph and string problems and computational geometry algorithms."
  },
  {
    "objectID": "CMSC501.html#topics",
    "href": "CMSC501.html#topics",
    "title": "CMSC 501 - Advanced Algorithms",
    "section": "Topics",
    "text": "Topics\nalgorithms, approximation, computational geometry, data structures, graph algorithms, optimization, strings"
  },
  {
    "objectID": "CMSC501.html#syllabus-statements",
    "href": "CMSC501.html#syllabus-statements",
    "title": "CMSC 501 - Advanced Algorithms",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC502.html",
    "href": "CMSC502.html",
    "title": "CMSC 502 - Parallel Algorithms",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Prerequisites: CMSC 312 and CMSC 401. Enrollment is restricted to students with graduate standing or those accepted into the accelerated B.S. to M.S. program in computer science. Software and hardware mechanisms for providing mutual exclusion in uniprocessor and multiprocessor environments. Architectural issues including pipeline design, superscalar computers, multiprocessors, memory systems, peripherals, interfacing techniques, networks, performance and software issues. Design and uses of parallel algorithms to solve concurrency problems in a distributed environment including message passing and remote procedure calls. Students will work in teams (as well as on individual projects) to design and implement parallel algorithms."
  },
  {
    "objectID": "CMSC502.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC502.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 502 - Parallel Algorithms",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 312 and CMSC 401. Enrollment is restricted to students with graduate standing or those accepted into the accelerated BS to MS program in computer science."
  },
  {
    "objectID": "CMSC502.html#description",
    "href": "CMSC502.html#description",
    "title": "CMSC 502 - Parallel Algorithms",
    "section": "Description",
    "text": "Description\nSoftware and hardware mechanisms for providing mutual exclusion in uniprocessor and multiprocessor environments. Architectural issues including pipeline design, superscalar computers, multiprocessors, memory systems, peripherals, interfacing techniques, networks, performance and software issues. Design and uses of parallel algorithms to solve concurrency problems in a distributed environment including message passing and remote procedure calls. Students will work in teams (as well as on individual projects) to design and implement parallel algorithms."
  },
  {
    "objectID": "CMSC502.html#topics",
    "href": "CMSC502.html#topics",
    "title": "CMSC 502 - Parallel Algorithms",
    "section": "Topics",
    "text": "Topics\nconcurrency, interfaces, networks, parallel algorithms, software quality"
  },
  {
    "objectID": "CMSC502.html#syllabus-statements",
    "href": "CMSC502.html#syllabus-statements",
    "title": "CMSC 502 - Parallel Algorithms",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC506.html",
    "href": "CMSC506.html",
    "title": "CMSC 506 - Computer Networks and Communications",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 312. Theoretical and applied analysis of basic data communication systems; design of networks in the framework of the OSI reference model; Local and Wide Area Networks; performance analysis of networks; error control and security. Students will work in teams to design and implement a small computer network. Crosslisted as: EGRE 526."
  },
  {
    "objectID": "CMSC506.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC506.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 506 - Computer Networks and Communications",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 312."
  },
  {
    "objectID": "CMSC506.html#description",
    "href": "CMSC506.html#description",
    "title": "CMSC 506 - Computer Networks and Communications",
    "section": "Description",
    "text": "Description\nTheoretical and applied analysis of basic data communication systems; design of networks in the framework of the OSI reference model; Local and Wide Area Networks; performance analysis of networks; error control and security. Students will work in teams to design and implement a small computer network. Crosslisted as: EGRE 526."
  },
  {
    "objectID": "CMSC506.html#topics",
    "href": "CMSC506.html#topics",
    "title": "CMSC 506 - Computer Networks and Communications",
    "section": "Topics",
    "text": "Topics\nanalysis, communication systems, computer networks, design, error control, local and wide area networks, osi reference model, security"
  },
  {
    "objectID": "CMSC506.html#syllabus-statements",
    "href": "CMSC506.html#syllabus-statements",
    "title": "CMSC 506 - Computer Networks and Communications",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC508.html",
    "href": "CMSC508.html",
    "title": "CMSC 508 - Database Theory",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 303 with a minimum grade of C. Design and implementation of relational database systems. Emphasis is placed on entity-relationship diagrams, relational algebra, normal forms and normalization. Introduction to SQL. Discussion of physical level issues. Students will be required to complete a design project and give an oral presentation of the project. Not applicable toward the M.S. in Computer Science or the Ph.D. in Engineering, computer science concentration."
  },
  {
    "objectID": "CMSC508.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC508.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 508 - Database Theory",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 303 with a minimum grade of C."
  },
  {
    "objectID": "CMSC508.html#description",
    "href": "CMSC508.html#description",
    "title": "CMSC 508 - Database Theory",
    "section": "Description",
    "text": "Description\nDesign and implementation of relational database systems. Emphasis is placed on entity-relationship diagrams, relational algebra, normal forms and normalization. Introduction to SQL. Discussion of physical level issues. Students will be required to complete a design project and give an oral presentation of the project. Not applicable toward the MS in Computer Science or the PHD in Engineering, computer science concentration."
  },
  {
    "objectID": "CMSC508.html#topics",
    "href": "CMSC508.html#topics",
    "title": "CMSC 508 - Database Theory",
    "section": "Topics",
    "text": "Topics\nadministration, ajax, configuration, cursors, data , data storage, database, database installation, design, entities, entity-relationship diagrams, functional programming, functions, indexes, mysql, normalization, php, physical level issues, procedures, queries, relational algebra, relational design, relations, sql, subqueries, triggers, views"
  },
  {
    "objectID": "CMSC508.html#syllabus-statements",
    "href": "CMSC508.html#syllabus-statements",
    "title": "CMSC 508 - Database Theory",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC510.html",
    "href": "CMSC510.html",
    "title": "CMSC 510 - Regularization Methods for Machine Learning",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Enrollment is restricted to students with graduate standing in computer science or related discipline such as bioinformatics or acceptance into the accelerated B.S. to M.S. program in computer science. The course will assume undergraduate-level background in algorithms, linear algebra, calculus, statistics and probability. Upon successful completion of this course, the student will be able to understand recent advances in machine learning and apply machine-learning tools that go beyond learning from data, as well as have the ability to incorporate additional knowledge about the learning problem. Topics covered will include optimization-based view of supervised machine learning; classical regularization approaches including weight decay and Lasso; regularization terms incorporating additional knowledge about structures in the feature space, including group lasso and graph-based regularization terms; semi-supervised learning using graphs linking unlabeled and labeled samples."
  },
  {
    "objectID": "CMSC510.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC510.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 510 - Regularization Methods for Machine Learning",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEnrollment is restricted to students with graduate standing in computer science or related discipline such as bioinformatics or acceptance into the accelerated BS to MS program in computer science."
  },
  {
    "objectID": "CMSC510.html#description",
    "href": "CMSC510.html#description",
    "title": "CMSC 510 - Regularization Methods for Machine Learning",
    "section": "Description",
    "text": "Description\nThe course will assume undergraduate-level background in algorithms, linear algebra, calculus, statistics and probability. Upon successful completion of this course, the student will be able to understand recent advances in machine learning and apply machine-learning tools that go beyond learning from data, as well as have the ability to incorporate additional knowledge about the learning problem. Topics covered will include optimization-based view of supervised machine learning; classical regularization approaches including weight decay and Lasso; regularization terms incorporating additional knowledge about structures in the feature space, including group lasso and graph-based regularization terms; semi-supervised learning using graphs linking unlabeled and labeled samples."
  },
  {
    "objectID": "CMSC510.html#topics",
    "href": "CMSC510.html#topics",
    "title": "CMSC 510 - Regularization Methods for Machine Learning",
    "section": "Topics",
    "text": "Topics\nalgorithms, calculus, data analysis, graph algorithms, linear algebra, machine learning, natural language, optimization, probability, regularization, statistics"
  },
  {
    "objectID": "CMSC510.html#syllabus-statements",
    "href": "CMSC510.html#syllabus-statements",
    "title": "CMSC 510 - Regularization Methods for Machine Learning",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC512.html",
    "href": "CMSC512.html",
    "title": "CMSC 512 - Advanced Social Network Analysis and Security",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Pre- or corequisites: CMSC 412 and CMSC 501. Enrollment is restricted to students with graduate standing in computer science or a related discipline such as bioinformatics or acceptance into the accelerated B.S. to M.S. program in computer science. The purpose of the course is to teach algorithms for analyzing social networks and complex systems. The focus will be on understanding the inner workings of algorithms using in-network analysis and security threats in online social network sites. Topic covered will include modeling social and technological networks, methods for analyzing structure and dynamical processes on the network, and security and privacy issues in online social networks such as inference attacks, network anonymization, sybil attacks and defense, social bots."
  },
  {
    "objectID": "CMSC512.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC512.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 512 - Advanced Social Network Analysis and Security",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 412 and CMSC 501. Enrollment is restricted to students with graduate standing in computer science or a related discipline such as bioinformatics or acceptance into the accelerated BS to MS program in computer science."
  },
  {
    "objectID": "CMSC512.html#description",
    "href": "CMSC512.html#description",
    "title": "CMSC 512 - Advanced Social Network Analysis and Security",
    "section": "Description",
    "text": "Description\nThe purpose of the course is to teach algorithms for analyzing social networks and complex systems. The focus will be on understanding the inner workings of algorithms using in-network analysis and security threats in online social network sites. Topic covered will include modeling social and technological networks, methods for analyzing structure and dynamical processes on the network, and security and privacy issues in online social networks such as inference attacks, network anonymization, sybil attacks and defense, social bots."
  },
  {
    "objectID": "CMSC512.html#topics",
    "href": "CMSC512.html#topics",
    "title": "CMSC 512 - Advanced Social Network Analysis and Security",
    "section": "Topics",
    "text": "Topics\nalgorithms, analysis, networks, security, social network"
  },
  {
    "objectID": "CMSC512.html#syllabus-statements",
    "href": "CMSC512.html#syllabus-statements",
    "title": "CMSC 512 - Advanced Social Network Analysis and Security",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC516.html",
    "href": "CMSC516.html",
    "title": "CMSC 516 - Advanced Natural Language Processing",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Enrollment is restricted to students with graduate standing in computer science or a related discipline, or those accepted into the accelerated B.S. to M.S. program in computer science. Upon successful completion of this course, the student will be able to understand recent advances in natural language processing and apply NLP algorithms and techniques for processing unstructured text. Word-level, syntactic and semantic processing will be considered. Specific topics include rule-based and statistical methods for creating computer programs that analyze, generate and understand human language. Regular expressions and automata, context-free grammars, probabilistic classifiers and machine learning. Applications to real-world problems such as spell-checking, Web search, automatic question answering, authorship identification and developing conversational interfaces."
  },
  {
    "objectID": "CMSC516.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC516.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 516 - Advanced Natural Language Processing",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEnrollment is restricted to students with graduate standing in computer science or a related discipline, or those accepted into the accelerated BS to MS program in computer science."
  },
  {
    "objectID": "CMSC516.html#description",
    "href": "CMSC516.html#description",
    "title": "CMSC 516 - Advanced Natural Language Processing",
    "section": "Description",
    "text": "Description\nUpon successful completion of this course, the student will be able to understand recent advances in natural language processing and apply NLP algorithms and techniques for processing unstructured text. Word-level, syntactic and semantic processing will be considered. Specific topics include rule-based and statistical methods for creating computer programs that analyze, generate and understand human language. Regular expressions and automata, context-free grammars, probabilistic classifiers and machine learning. Applications to real-world problems such as spell-checking, Web search, automatic question answering, authorship identification and developing conversational interfaces."
  },
  {
    "objectID": "CMSC516.html#topics",
    "href": "CMSC516.html#topics",
    "title": "CMSC 516 - Advanced Natural Language Processing",
    "section": "Topics",
    "text": "Topics\nautomation, context-free grammars, machine learning, natural language, nlp algorithms, probabilistic classifiers, regular expressions, semantics, statistics, syntax"
  },
  {
    "objectID": "CMSC516.html#syllabus-statements",
    "href": "CMSC516.html#syllabus-statements",
    "title": "CMSC 516 - Advanced Natural Language Processing",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC525.html",
    "href": "CMSC525.html",
    "title": "CMSC 525 - Introduction to Software Analysis, Testing and Verification",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Prerequisites: CMSC 401 and 403. Enrollment is restricted to students with graduate standing or those accepted into the accelerated B.S. to M.S. program in computer science. An introduction to concepts and techniques used in the analysis of software for certain properties. Using analytic results to derive test data and verify the correct implementation of programs. Flow graphs, fault/failure model, theoretical and practical limitations. Control flow, data flow and error flow analyses. Testing strategies including random, structural, mutation and error flow. Software metrics."
  },
  {
    "objectID": "CMSC525.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC525.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 525 - Introduction to Software Analysis, Testing and Verification",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 and 403. Enrollment is restricted to students with graduate standing or those accepted into the accelerated BS to MS program in computer science."
  },
  {
    "objectID": "CMSC525.html#description",
    "href": "CMSC525.html#description",
    "title": "CMSC 525 - Introduction to Software Analysis, Testing and Verification",
    "section": "Description",
    "text": "Description\nAn introduction to concepts and techniques used in the analysis of software for certain properties. Using analytic results to derive test data and verify the correct implementation of programs. Flow graphs, fault/failure model, theoretical and practical limitations. Control flow, data flow and error flow analyses. Testing strategies including random, structural, mutation and error flow. Software metrics."
  },
  {
    "objectID": "CMSC525.html#topics",
    "href": "CMSC525.html#topics",
    "title": "CMSC 525 - Introduction to Software Analysis, Testing and Verification",
    "section": "Topics",
    "text": "Topics\nadvanced testing strategies, analysis, concolic hybrid analysis, control flow, coverage-driven systematic software testing, data, data-flow, dynamic programming, flow control, graphs, limitations, program analysis-driven testing, software management, software validation, software verification, static programming, symbolic program analysis, test case coverage, testing"
  },
  {
    "objectID": "CMSC525.html#syllabus-statements",
    "href": "CMSC525.html#syllabus-statements",
    "title": "CMSC 525 - Introduction to Software Analysis, Testing and Verification",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC526.html",
    "href": "CMSC526.html",
    "title": "CMSC 526 - Theory of Programming Languages",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 403, graduate student standing or acceptance into the five-year accelerated B.S. and M.S. program in computer science. An introduction to the formal semantics of programming languages, logic programming and functional programming. Topics include denotational semantics, attribute grammars, Backus Formal Functional Programming, fixed point semantics, model-theoretic semantics and PROLOG."
  },
  {
    "objectID": "CMSC526.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC526.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 526 - Theory of Programming Languages",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 403, graduate student standing or acceptance into the five-year accelerated BS and MS program in computer science."
  },
  {
    "objectID": "CMSC526.html#description",
    "href": "CMSC526.html#description",
    "title": "CMSC 526 - Theory of Programming Languages",
    "section": "Description",
    "text": "Description\nAn introduction to the formal semantics of programming languages, logic programming and functional programming. Topics include denotational semantics, attribute grammars, Backus Formal Functional Programming, fixed point semantics, model-theoretic semantics and PROLOG."
  },
  {
    "objectID": "CMSC526.html#topics",
    "href": "CMSC526.html#topics",
    "title": "CMSC 526 - Theory of Programming Languages",
    "section": "Topics",
    "text": "Topics\nlanguages, logic, model-theoretic semtances, semantics"
  },
  {
    "objectID": "CMSC526.html#syllabus-statements",
    "href": "CMSC526.html#syllabus-statements",
    "title": "CMSC 526 - Theory of Programming Languages",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC531.html",
    "href": "CMSC531.html",
    "title": "CMSC 531 - 3D Computer Vision for Robot Navigation",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Enrollment is restricted to graduate students in computer science or related discipline or to students accepted into the five-year accelerated program in computer science. The course focuses on recent advancements in 3D robotic vision. It covers basic concepts and computational models of 3D sensing, robotic mapping, visual odometry, simultaneous localization and mapping, as well as 3D point data processing for robotic navigation. Students will acquire in-depth knowledge in robotic vision by completing a course project."
  },
  {
    "objectID": "CMSC531.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC531.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 531 - 3D Computer Vision for Robot Navigation",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEnrollment is restricted to graduate students in computer science or related discipline or to students accepted into the five-year accelerated program in computer science."
  },
  {
    "objectID": "CMSC531.html#description",
    "href": "CMSC531.html#description",
    "title": "CMSC 531 - 3D Computer Vision for Robot Navigation",
    "section": "Description",
    "text": "Description\nThe course focuses on recent advancements in 3D robotic vision. It covers basic concepts and computational models of 3D sensing, robotic mapping, visual odometry, simultaneous localization and mapping, as well as 3D point data processing for robotic navigation. Students will acquire in-depth knowledge in robotic vision by completing a course project."
  },
  {
    "objectID": "CMSC531.html#topics",
    "href": "CMSC531.html#topics",
    "title": "CMSC 531 - 3D Computer Vision for Robot Navigation",
    "section": "Topics",
    "text": "Topics\n3d robotic vision, localization, mapping, robotic mapping, robotic navigation, visual odometry"
  },
  {
    "objectID": "CMSC531.html#syllabus-statements",
    "href": "CMSC531.html#syllabus-statements",
    "title": "CMSC 531 - 3D Computer Vision for Robot Navigation",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC591.html",
    "href": "CMSC591.html",
    "title": "CMSC 591 - Topics in Computer Science",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. May be repeated for credit. Enrollment requires permission of the instructor. The course is open to students with graduate standing or those accepted into the accelerated B.S. to M.S. program in computer science. A study of selected topic(s) in computer science at the graduate level. See the Schedule of Classes for specific topics to be offered each semester."
  },
  {
    "objectID": "CMSC591.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC591.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 591 - Topics in Computer Science",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC591.html#description",
    "href": "CMSC591.html#description",
    "title": "CMSC 591 - Topics in Computer Science",
    "section": "Description",
    "text": "Description\nMay be repeated for credit. Enrollment requires permission of the instructor. The course is open to students with graduate standing or those accepted into the accelerated BS to MS program in computer science. A study of selected topic(s) in computer science at the graduate level. See the Schedule of Classes for specific topics to be offered each semester."
  },
  {
    "objectID": "CMSC591.html#topics",
    "href": "CMSC591.html#topics",
    "title": "CMSC 591 - Topics in Computer Science",
    "section": "Topics",
    "text": "Topics\ncircuits, compact representations, complexity analysis, convex sets, limitations, linear algebra, loss function, machine learning, models, neural networks, optimization, quantum computation, quantum gates, quantum measurement, selected topics, tensor"
  },
  {
    "objectID": "CMSC591.html#syllabus-statements",
    "href": "CMSC591.html#syllabus-statements",
    "title": "CMSC 591 - Topics in Computer Science",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC601.html",
    "href": "CMSC601.html",
    "title": "CMSC 601 - Convex Optimization",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 501 or permission of instructor. Enrollment restricted to students with graduate standing in computer science or related discipline. A background in undergraduate-level linear algebra is assumed. Convex sets and functions. Convex optimization problems: Linear, quadratic, semi-definite and cone programs. Duality theory. Approximation algorithms for NP-complete integer optimization problems via semi-definite relaxations and rounding schemes. Algorithms for optimization, such as gradient descent, proximal descent, alternating directions method of multipliers, interior point methods."
  },
  {
    "objectID": "CMSC601.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC601.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 601 - Convex Optimization",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 501 or permission of instructor. Enrollment restricted to students with graduate standing in computer science or related discipline."
  },
  {
    "objectID": "CMSC601.html#description",
    "href": "CMSC601.html#description",
    "title": "CMSC 601 - Convex Optimization",
    "section": "Description",
    "text": "Description\nA background in undergraduate-level linear algebra is assumed. Convex sets and functions. Convex optimization problems: Linear, quadratic, semi-definite and cone programs. Duality theory. Approximation algorithms for NP-complete integer optimization problems via semi-definite relaxations and rounding schemes. Algorithms for optimization, such as gradient descent, proximal descent, alternating directions method of multipliers, interior point methods."
  },
  {
    "objectID": "CMSC601.html#topics",
    "href": "CMSC601.html#topics",
    "title": "CMSC 601 - Convex Optimization",
    "section": "Topics",
    "text": "Topics\napproximation, convex sets, duality theory, gradient descent, interior point methods, linear algebra, multipliers, optimization, proximal descent"
  },
  {
    "objectID": "CMSC601.html#syllabus-statements",
    "href": "CMSC601.html#syllabus-statements",
    "title": "CMSC 601 - Convex Optimization",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC602.html",
    "href": "CMSC602.html",
    "title": "CMSC 602 - Operating Systems",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 502. A study of operating systems including those in multiprocessor and distributed environments. I/O programming, resource management (including processor and memory management), security and system performance evaluation."
  },
  {
    "objectID": "CMSC602.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC602.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 602 - Operating Systems",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 502."
  },
  {
    "objectID": "CMSC602.html#description",
    "href": "CMSC602.html#description",
    "title": "CMSC 602 - Operating Systems",
    "section": "Description",
    "text": "Description\nA study of operating systems including those in multiprocessor and distributed environments. I/O programming, resource management (including processor and memory management), security and system performance evaluation."
  },
  {
    "objectID": "CMSC602.html#topics",
    "href": "CMSC602.html#topics",
    "title": "CMSC 602 - Operating Systems",
    "section": "Topics",
    "text": "Topics\ninput/output, multiprocessor environments, operating systems, resources management, security, system performance"
  },
  {
    "objectID": "CMSC602.html#syllabus-statements",
    "href": "CMSC602.html#syllabus-statements",
    "title": "CMSC 602 - Operating Systems",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC603.html",
    "href": "CMSC603.html",
    "title": "CMSC 603 - High Performance Distributed Systems",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Enrollment is restricted to students with graduate standing in computer science or related discipline or those accepted into the accelerated B.S. to M.S. program in computer science. The course will assume undergraduate-level background in algorithms, data structures and parallel programming. Upon successful completion of this course, the student will be able to understand the concepts underlying distributed systems; analyze problems to identify performance bottlenecks, parallelization opportunities and concurrency issues in a distributed environment; create distributed and scalable implementations using multiple hosts/GPUs; design and implement algorithms using Hadoop, Spark and CUDA."
  },
  {
    "objectID": "CMSC603.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC603.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 603 - High Performance Distributed Systems",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEnrollment is restricted to students with graduate standing in computer science or related discipline or those accepted into the accelerated BS to MS program in computer science."
  },
  {
    "objectID": "CMSC603.html#description",
    "href": "CMSC603.html#description",
    "title": "CMSC 603 - High Performance Distributed Systems",
    "section": "Description",
    "text": "Description\nThe course will assume undergraduate-level background in algorithms, data structures and parallel programming. Upon successful completion of this course, the student will be able to understand the concepts underlying distributed systems; analyze problems to identify performance bottlenecks, parallelization opportunities and concurrency issues in a distributed environment; create distributed and scalable implementations using multiple hosts/GPUs; design and implement algorithms using Hadoop, Spark and CUDA."
  },
  {
    "objectID": "CMSC603.html#topics",
    "href": "CMSC603.html#topics",
    "title": "CMSC 603 - High Performance Distributed Systems",
    "section": "Topics",
    "text": "Topics\nalgorithms, concurrency, cuda, data structures, hadoop, parallel algorithms, performance bottlenecks, spark"
  },
  {
    "objectID": "CMSC603.html#syllabus-statements",
    "href": "CMSC603.html#syllabus-statements",
    "title": "CMSC 603 - High Performance Distributed Systems",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC605.html",
    "href": "CMSC605.html",
    "title": "CMSC 605 - Advanced Computer Architecture",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: EGRE 426 or with permission of instructor. This course will focus on the design and analysis of high performance computer architectures. Topics investigated include pipeline design, superscalar computers, multiprocessors, memory systems, peripherals, interfacing techniques, networks, performance and software issues. Crosslisted as: EGRE 635."
  },
  {
    "objectID": "CMSC605.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC605.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 605 - Advanced Computer Architecture",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEGRE 426 or with permission of instructor."
  },
  {
    "objectID": "CMSC605.html#description",
    "href": "CMSC605.html#description",
    "title": "CMSC 605 - Advanced Computer Architecture",
    "section": "Description",
    "text": "Description\nThis course will focus on the design and analysis of high performance computer architectures. Topics investigated include pipeline design, superscalar computers, multiprocessors, memory systems, peripherals, interfacing techniques, networks, performance and software issues. Crosslisted as: EGRE 635."
  },
  {
    "objectID": "CMSC605.html#topics",
    "href": "CMSC605.html#topics",
    "title": "CMSC 605 - Advanced Computer Architecture",
    "section": "Topics",
    "text": "Topics\narchitecture, interfaces, memory systems, multiprocessor environments, networks, peripherals, pipeline design, software management, software quality, superscalar computers"
  },
  {
    "objectID": "CMSC605.html#syllabus-statements",
    "href": "CMSC605.html#syllabus-statements",
    "title": "CMSC 605 - Advanced Computer Architecture",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC608.html",
    "href": "CMSC608.html",
    "title": "CMSC 608 - Advanced Database",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 508. Topics discussed include: handling of missing information; the relationship between relational calculus, relational algebra and SQL; logic databases; distributed databases; outer joins; and transaction processing. Emphasis is placed on theoretical issues involved in these topics. In addition students will work in teams to develop a working database application."
  },
  {
    "objectID": "CMSC608.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC608.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 608 - Advanced Database",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 508."
  },
  {
    "objectID": "CMSC608.html#description",
    "href": "CMSC608.html#description",
    "title": "CMSC 608 - Advanced Database",
    "section": "Description",
    "text": "Description\nTopics discussed include: handling of missing information; the relationship between relational calculus, relational algebra and SQL; logic databases; distributed databases; outer joins; and transaction processing. Emphasis is placed on theoretical issues involved in these topics. In addition students will work in teams to develop a working database application."
  },
  {
    "objectID": "CMSC608.html#topics",
    "href": "CMSC608.html#topics",
    "title": "CMSC 608 - Advanced Database",
    "section": "Topics",
    "text": "Topics\ncalculus, logic, relational algebra, sql, teamwork"
  },
  {
    "objectID": "CMSC608.html#syllabus-statements",
    "href": "CMSC608.html#syllabus-statements",
    "title": "CMSC 608 - Advanced Database",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC610.html",
    "href": "CMSC610.html",
    "title": "CMSC 610 - Algorithmic Foundations of Bioinformatics",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: Graduate student standing or acceptance into five-year accelerated program in computer science or related discipline such as bioinformatics. The purpose of the course is to teach algorithms for analyzing biological and medical data. The focus will be on understanding the inner workings of algorithms used in bioinformatics tools. Topic covered will include algorithms for assembling and searching biological sequences, finding patterns associated with disease, and exploring biological networks."
  },
  {
    "objectID": "CMSC610.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC610.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 610 - Algorithmic Foundations of Bioinformatics",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nGraduate student standing or acceptance into five-year accelerated program in computer science or related discipline such as bioinformatics."
  },
  {
    "objectID": "CMSC610.html#description",
    "href": "CMSC610.html#description",
    "title": "CMSC 610 - Algorithmic Foundations of Bioinformatics",
    "section": "Description",
    "text": "Description\nThe purpose of the course is to teach algorithms for analyzing biological and medical data. The focus will be on understanding the inner workings of algorithms used in bioinformatics tools. Topic covered will include algorithms for assembling and searching biological sequences, finding patterns associated with disease, and exploring biological networks."
  },
  {
    "objectID": "CMSC610.html#topics",
    "href": "CMSC610.html#topics",
    "title": "CMSC 610 - Algorithmic Foundations of Bioinformatics",
    "section": "Topics",
    "text": "Topics\nalgorithms, bioinformatics, biological sequences, data, networks, patterns"
  },
  {
    "objectID": "CMSC610.html#syllabus-statements",
    "href": "CMSC610.html#syllabus-statements",
    "title": "CMSC 610 - Algorithmic Foundations of Bioinformatics",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC611.html",
    "href": "CMSC611.html",
    "title": "CMSC 611 - Computer Multimedia",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: permission of instructor. Study of computer multimedia techniques relating to images, sound, video and text. Emphasis on compression techniques and standard storage formats. This course is programming-intensive."
  },
  {
    "objectID": "CMSC611.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC611.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 611 - Computer Multimedia",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\npermission of instructor."
  },
  {
    "objectID": "CMSC611.html#description",
    "href": "CMSC611.html#description",
    "title": "CMSC 611 - Computer Multimedia",
    "section": "Description",
    "text": "Description\nStudy of computer multimedia techniques relating to images, sound, video and text. Emphasis on compression techniques and standard storage formats. This course is programming-intensive."
  },
  {
    "objectID": "CMSC611.html#topics",
    "href": "CMSC611.html#topics",
    "title": "CMSC 611 - Computer Multimedia",
    "section": "Topics",
    "text": "Topics\ncompression, multimedia , storage formats"
  },
  {
    "objectID": "CMSC611.html#syllabus-statements",
    "href": "CMSC611.html#syllabus-statements",
    "title": "CMSC 611 - Computer Multimedia",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC612.html",
    "href": "CMSC612.html",
    "title": "CMSC 612 - Game Theory and Security",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Prerequisite: CMSC 401. Enrollment is restricted to students with graduate standing in computer science or those accepted into the accelerated B.S. to M.S. program in computer science. The course will provide an introduction to game theory and mechanism design concepts. Lectures cover topics such as introduction of games, equilibrium concepts, computation of game-theoretic solution concepts, mechanism, and issues in game theory and mechanism design."
  },
  {
    "objectID": "CMSC612.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC612.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 612 - Game Theory and Security",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401. Enrollment is restricted to students with graduate standing in computer science or those accepted into the accelerated BS to MS program in computer science."
  },
  {
    "objectID": "CMSC612.html#description",
    "href": "CMSC612.html#description",
    "title": "CMSC 612 - Game Theory and Security",
    "section": "Description",
    "text": "Description\nThe course will provide an introduction to game theory and mechanism design concepts. Lectures cover topics such as introduction of games, equilibrium concepts, computation of game-theoretic solution concepts, mechanism, and issues in game theory and mechanism design."
  },
  {
    "objectID": "CMSC612.html#topics",
    "href": "CMSC612.html#topics",
    "title": "CMSC 612 - Game Theory and Security",
    "section": "Topics",
    "text": "Topics\nabstract complexity, design, equilibrium concepts, game theory, security, universal programs, unsolvability"
  },
  {
    "objectID": "CMSC612.html#syllabus-statements",
    "href": "CMSC612.html#syllabus-statements",
    "title": "CMSC 612 - Game Theory and Security",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC615.html",
    "href": "CMSC615.html",
    "title": "CMSC 615 - Cryptocurrency and Blockchain Techniques",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Enrollment is restricted to students with graduate standing in computer science or a related discipline. The course will assume undergraduate-level background in algorithms, data structures and programming. Upon successful completion of this course, the student will be able to understand the major concepts about cryptocurrency and blockchain techniques; be familiar with major blockchain applications as well as real-world issues; understand the underlying consensus mechanisms in the Bitcoin system and other alternative cryptocurrency systems; analyze the security of Nakamoto consensus; understand, write and execute smart contracts using an Ethereum-like platform."
  },
  {
    "objectID": "CMSC615.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC615.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 615 - Cryptocurrency and Blockchain Techniques",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEnrollment is restricted to students with graduate standing in computer science or a related discipline."
  },
  {
    "objectID": "CMSC615.html#description",
    "href": "CMSC615.html#description",
    "title": "CMSC 615 - Cryptocurrency and Blockchain Techniques",
    "section": "Description",
    "text": "Description\nThe course will assume undergraduate-level background in algorithms, data structures and programming. Upon successful completion of this course, the student will be able to understand the major concepts about cryptocurrency and blockchain techniques; be familiar with major blockchain applications as well as real-world issues; understand the underlying consensus mechanisms in the Bitcoin system and other alternative cryptocurrency systems; analyze the security of Nakamoto consensus; understand, write and execute smart contracts using an Ethereum-like platform."
  },
  {
    "objectID": "CMSC615.html#topics",
    "href": "CMSC615.html#topics",
    "title": "CMSC 615 - Cryptocurrency and Blockchain Techniques",
    "section": "Topics",
    "text": "Topics\nalgorithms, altcoins, analysis, anonymity, bitcoin, blockchain, consensus protocols, cryptocurrency, data structures, distributed systems, etherum, legal, nakamoto consensus, nakamoto’s blockchain, programming, real-world applications, security, sidechains"
  },
  {
    "objectID": "CMSC615.html#syllabus-statements",
    "href": "CMSC615.html#syllabus-statements",
    "title": "CMSC 615 - Cryptocurrency and Blockchain Techniques",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC618.html",
    "href": "CMSC618.html",
    "title": "CMSC 618 - Database and Application Security",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Theory and practice of database and software security focusing in particular on some common database software security risks and on the identification of potential threats and vulnerabilities. Crosslisted as: CISS 618."
  },
  {
    "objectID": "CMSC618.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC618.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 618 - Database and Application Security",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC618.html#description",
    "href": "CMSC618.html#description",
    "title": "CMSC 618 - Database and Application Security",
    "section": "Description",
    "text": "Description\nTheory and practice of database and software security focusing in particular on some common database software security risks and on the identification of potential threats and vulnerabilities. Crosslisted as: CISS 618."
  },
  {
    "objectID": "CMSC618.html#topics",
    "href": "CMSC618.html#topics",
    "title": "CMSC 618 - Database and Application Security",
    "section": "Topics",
    "text": "Topics\ndatabase, security, software management"
  },
  {
    "objectID": "CMSC618.html#syllabus-statements",
    "href": "CMSC618.html#syllabus-statements",
    "title": "CMSC 618 - Database and Application Security",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC619.html",
    "href": "CMSC619.html",
    "title": "CMSC 619 - The Design and Specifications of User Interfaces",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: Graduate standing and permission of instructor. Requires knowledge of first order predicate calculus and context-free languages. Focuses on human-computer interface design principles and methodology and formal specifications of user interfaces."
  },
  {
    "objectID": "CMSC619.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC619.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 619 - The Design and Specifications of User Interfaces",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nGraduate standing and permission of instructor."
  },
  {
    "objectID": "CMSC619.html#description",
    "href": "CMSC619.html#description",
    "title": "CMSC 619 - The Design and Specifications of User Interfaces",
    "section": "Description",
    "text": "Description\nRequires knowledge of first order predicate calculus and context-free languages. Focuses on human-computer interface design principles and methodology and formal specifications of user interfaces."
  },
  {
    "objectID": "CMSC619.html#topics",
    "href": "CMSC619.html#topics",
    "title": "CMSC 619 - The Design and Specifications of User Interfaces",
    "section": "Topics",
    "text": "Topics\ncalculus, design, interfaces, languages, user interface"
  },
  {
    "objectID": "CMSC619.html#syllabus-statements",
    "href": "CMSC619.html#syllabus-statements",
    "title": "CMSC 619 - The Design and Specifications of User Interfaces",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC620.html",
    "href": "CMSC620.html",
    "title": "CMSC 620 - Applied Cryptography",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Provides a comprehensive survey of modern cryptography. Included are techniques of enciphering and deciphering messages using cryptographic algorithms, block ciphers and block cipher modes, hash functions and message authentication codes, public key cryptography and digital signatures, and steganography. Crosslisted as: CISS 624."
  },
  {
    "objectID": "CMSC620.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC620.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 620 - Applied Cryptography",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC620.html#description",
    "href": "CMSC620.html#description",
    "title": "CMSC 620 - Applied Cryptography",
    "section": "Description",
    "text": "Description\nProvides a comprehensive survey of modern cryptography. Included are techniques of enciphering and deciphering messages using cryptographic algorithms, block ciphers and block cipher modes, hash functions and message authentication codes, public key cryptography and digital signatures, and steganography. Crosslisted as: CISS 624."
  },
  {
    "objectID": "CMSC620.html#topics",
    "href": "CMSC620.html#topics",
    "title": "CMSC 620 - Applied Cryptography",
    "section": "Topics",
    "text": "Topics\nauthentication, block cipher, cryptographic systems, deciphering, digital signatures, enciphering, hash functions, public key encryption, steganography"
  },
  {
    "objectID": "CMSC620.html#syllabus-statements",
    "href": "CMSC620.html#syllabus-statements",
    "title": "CMSC 620 - Applied Cryptography",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC621.html",
    "href": "CMSC621.html",
    "title": "CMSC 621 - Theory of Computation",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: graduate student standing and permission of instructor. Discussion of the complexity and computability of problems and programs. Topics will include unsolvability, universal programs and abstract complexity."
  },
  {
    "objectID": "CMSC621.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC621.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 621 - Theory of Computation",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\ngraduate student standing and permission of instructor."
  },
  {
    "objectID": "CMSC621.html#description",
    "href": "CMSC621.html#description",
    "title": "CMSC 621 - Theory of Computation",
    "section": "Description",
    "text": "Description\nDiscussion of the complexity and computability of problems and programs. Topics will include unsolvability, universal programs and abstract complexity."
  },
  {
    "objectID": "CMSC621.html#topics",
    "href": "CMSC621.html#topics",
    "title": "CMSC 621 - Theory of Computation",
    "section": "Topics",
    "text": "Topics"
  },
  {
    "objectID": "CMSC621.html#syllabus-statements",
    "href": "CMSC621.html#syllabus-statements",
    "title": "CMSC 621 - Theory of Computation",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC622.html",
    "href": "CMSC622.html",
    "title": "CMSC 622 - Network and System Security",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Studies the principles of network security and system security. Included are topics relating to application layer security, TCP layer security, network layer security and link layer security and the use of access control, intrusion detection, intrusion prevention and other related tools."
  },
  {
    "objectID": "CMSC622.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC622.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 622 - Network and System Security",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC622.html#description",
    "href": "CMSC622.html#description",
    "title": "CMSC 622 - Network and System Security",
    "section": "Description",
    "text": "Description\nStudies the principles of network security and system security. Included are topics relating to application layer security, TCP layer security, network layer security and link layer security and the use of access control, intrusion detection, intrusion prevention and other related tools."
  },
  {
    "objectID": "CMSC622.html#topics",
    "href": "CMSC622.html#topics",
    "title": "CMSC 622 - Network and System Security",
    "section": "Topics",
    "text": "Topics\naccess control, assumption, computer security, concepts, intrustion detection, network security, networks, presentation, security, security paper survey, system security, tcp layer security, technical paper reading, trust"
  },
  {
    "objectID": "CMSC622.html#syllabus-statements",
    "href": "CMSC622.html#syllabus-statements",
    "title": "CMSC 622 - Network and System Security",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC623.html",
    "href": "CMSC623.html",
    "title": "CMSC 623 - Cloud Computing",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Provides an introduction to cloud computing architecture and cloud computing security. The course covers the basic concepts of cloud computing, including memory virtualization, device virtualization and related security problems in cloud computing."
  },
  {
    "objectID": "CMSC623.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC623.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 623 - Cloud Computing",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC623.html#description",
    "href": "CMSC623.html#description",
    "title": "CMSC 623 - Cloud Computing",
    "section": "Description",
    "text": "Description\nProvides an introduction to cloud computing architecture and cloud computing security. The course covers the basic concepts of cloud computing, including memory virtualization, device virtualization and related security problems in cloud computing."
  },
  {
    "objectID": "CMSC623.html#topics",
    "href": "CMSC623.html#topics",
    "title": "CMSC 623 - Cloud Computing",
    "section": "Topics",
    "text": "Topics\ncloud computing, device virtualization, memory virtualization, security"
  },
  {
    "objectID": "CMSC623.html#syllabus-statements",
    "href": "CMSC623.html#syllabus-statements",
    "title": "CMSC 623 - Cloud Computing",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC624.html",
    "href": "CMSC624.html",
    "title": "CMSC 624 - Software Quality Assurance",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisites: a course in software engineering and graduate standing in computer science, or permission of instructor. A study of issues that affect the quality of software and of methodology to assure that software products are of the desired quality. This also includes issues in assessing product quality as well as the process by which the software is produced. Topics include various methodologies, standards, metrics and tools."
  },
  {
    "objectID": "CMSC624.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC624.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 624 - Software Quality Assurance",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\na course in software engineering and graduate standing in computer science, or permission of instructor."
  },
  {
    "objectID": "CMSC624.html#description",
    "href": "CMSC624.html#description",
    "title": "CMSC 624 - Software Quality Assurance",
    "section": "Description",
    "text": "Description\nA study of issues that affect the quality of software and of methodology to assure that software products are of the desired quality. This also includes issues in assessing product quality as well as the process by which the software is produced. Topics include various methodologies, standards, metrics and tools."
  },
  {
    "objectID": "CMSC624.html#topics",
    "href": "CMSC624.html#topics",
    "title": "CMSC 624 - Software Quality Assurance",
    "section": "Topics",
    "text": "Topics\nmetrics, software quality"
  },
  {
    "objectID": "CMSC624.html#syllabus-statements",
    "href": "CMSC624.html#syllabus-statements",
    "title": "CMSC 624 - Software Quality Assurance",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC625.html",
    "href": "CMSC625.html",
    "title": "CMSC 625 - Advanced Software Analysis, Testing and Verification",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: CMSC 525. Studies the concepts and techniques used in the analysis of software and the derivation of test data. Focuses on software metrics and reliability; construction of tools to aid software analysis and testing. Requires students to review seminal and current papers from the literature, and lead their discussion in class."
  },
  {
    "objectID": "CMSC625.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC625.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 625 - Advanced Software Analysis, Testing and Verification",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 525."
  },
  {
    "objectID": "CMSC625.html#description",
    "href": "CMSC625.html#description",
    "title": "CMSC 625 - Advanced Software Analysis, Testing and Verification",
    "section": "Description",
    "text": "Description\nStudies the concepts and techniques used in the analysis of software and the derivation of test data. Focuses on software metrics and reliability; construction of tools to aid software analysis and testing. Requires students to review seminal and current papers from the literature, and lead their discussion in class."
  },
  {
    "objectID": "CMSC625.html#topics",
    "href": "CMSC625.html#topics",
    "title": "CMSC 625 - Advanced Software Analysis, Testing and Verification",
    "section": "Topics",
    "text": "Topics\nanalysis, current literature, metrics, software management, testing"
  },
  {
    "objectID": "CMSC625.html#syllabus-statements",
    "href": "CMSC625.html#syllabus-statements",
    "title": "CMSC 625 - Advanced Software Analysis, Testing and Verification",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC628.html",
    "href": "CMSC628.html",
    "title": "CMSC 628 - Mobile Networks: Applications, Modeling and Analysis",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Enrollment is restricted to students with graduate standing in computer science or a related discipline. The course will assume undergraduate-level background in algorithms, data structures, programming and networks. Upon successful completion of this course, the student will be able to understand the major concepts about mobile networks such as device-to-device communication technologies, mobility models and coverage; be familiar with various mobile network types (e.g., mobile social networks, delay tolerant networks, overlay networks, vehicular networks and cellular networks) and devices (e.g., smartphones, femtocells, WiFi), learn how to model mobile networks with stochastic processes and real datasets; be able to use different networking simulators; and understand various routing algorithms and analyze their behavior."
  },
  {
    "objectID": "CMSC628.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC628.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 628 - Mobile Networks: Applications, Modeling and Analysis",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEnrollment is restricted to students with graduate standing in computer science or a related discipline."
  },
  {
    "objectID": "CMSC628.html#description",
    "href": "CMSC628.html#description",
    "title": "CMSC 628 - Mobile Networks: Applications, Modeling and Analysis",
    "section": "Description",
    "text": "Description\nThe course will assume undergraduate-level background in algorithms, data structures, programming and networks. Upon successful completion of this course, the student will be able to understand the major concepts about mobile networks such as device-to-device communication technologies, mobility models and coverage; be familiar with various mobile network types (e.g., mobile social networks, delay tolerant networks, overlay networks, vehicular networks and cellular networks) and devices (e.g., smartphones, femtocells, WiFi), learn how to model mobile networks with stochastic processes and real datasets; be able to use different networking simulators; and understand various routing algorithms and analyze their behavior."
  },
  {
    "objectID": "CMSC628.html#topics",
    "href": "CMSC628.html#topics",
    "title": "CMSC 628 - Mobile Networks: Applications, Modeling and Analysis",
    "section": "Topics",
    "text": "Topics\nalgorithms, analysis, communication systems, data, data driven stimulations, data structures, evaluation, mobile networks, mobility models, modeling, network simulators, networks, programming, routing"
  },
  {
    "objectID": "CMSC628.html#syllabus-statements",
    "href": "CMSC628.html#syllabus-statements",
    "title": "CMSC 628 - Mobile Networks: Applications, Modeling and Analysis",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC630.html",
    "href": "CMSC630.html",
    "title": "CMSC 630 - Image Analysis",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Enrollment is restricted to students with graduate standing in engineering or science or by permission of the instructor. Introduces theoretical and practical aspects of computer vision for image processing and understanding. It provides a comprehensive walkthrough from basics of image preparation to using computational intelligence tools for knowledge discovery from images. The course will cover basics of image processing and computer vision, including image sampling and quantization, color, pixel-based operations, image filtering, morphological image processing, and image transforms; information extraction including segmentation and feature extraction; pattern recognition for computer vision: classification, novelty and object detection, image understanding, learning from video streams, and tensor-based methods. Examples will include medical image analysis, object recognition in ground and aerial photographs and hyperspectral imaging."
  },
  {
    "objectID": "CMSC630.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC630.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 630 - Image Analysis",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEnrollment is restricted to students with graduate standing in engineering or science or by permission of the instructor."
  },
  {
    "objectID": "CMSC630.html#description",
    "href": "CMSC630.html#description",
    "title": "CMSC 630 - Image Analysis",
    "section": "Description",
    "text": "Description\nIntroduces theoretical and practical aspects of computer vision for image processing and understanding. It provides a comprehensive walkthrough from basics of image preparation to using computational intelligence tools for knowledge discovery from images. The course will cover basics of image processing and computer vision, including image sampling and quantization, color, pixel-based operations, image filtering, morphological image processing, and image transforms; information extraction including segmentation and feature extraction; pattern recognition for computer vision: classification, novelty and object detection, image understanding, learning from video streams, and tensor-based methods. Examples will include medical image analysis, object recognition in ground and aerial photographs and hyperspectral imaging."
  },
  {
    "objectID": "CMSC630.html#topics",
    "href": "CMSC630.html#topics",
    "title": "CMSC 630 - Image Analysis",
    "section": "Topics",
    "text": "Topics\nanalysis, computers, feature extraction, feature selection, image, image analysis, image filtering, image processing, image segmentation, images, information extraction, machine learning, patterns, pixel-based operations, quantization, segmentation, tensor"
  },
  {
    "objectID": "CMSC630.html#syllabus-statements",
    "href": "CMSC630.html#syllabus-statements",
    "title": "CMSC 630 - Image Analysis",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC635.html",
    "href": "CMSC635.html",
    "title": "CMSC 635 - Knowledge Discovery and Data Mining",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Prerequisite: CMSC 401 or corequisite: CMSC 501. Enrollment is restricted to students with graduate standing in computer science or a related discipline such as bioinformatics, or those accepted into the accelerated B.S. to M.S. program in computer science. Covers knowledge discovery and data mining concepts, tools and methods; provides hands-on experience based on a project involving analysis of large real-life data. Topics include the knowledge discovery process, data storage and representation, preprocessing algorithms for missing data imputation, feature selection and discretization; unsupervised learning algorithms for clustering and association mining; supervised learning algorithms including decision trees, Bayesian models and introduction to support vector machines and neural networks; ensemble learning; protocols and measures for validation of predictive models; and data security and privacy issues."
  },
  {
    "objectID": "CMSC635.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC635.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 635 - Knowledge Discovery and Data Mining",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 401 or corequisite: CMSC 501. Enrollment is restricted to students with graduate standing in computer science or a related discipline such as bioinformatics, or those accepted into the accelerated BS to MS program in computer science."
  },
  {
    "objectID": "CMSC635.html#description",
    "href": "CMSC635.html#description",
    "title": "CMSC 635 - Knowledge Discovery and Data Mining",
    "section": "Description",
    "text": "Description\nCovers knowledge discovery and data mining concepts, tools and methods; provides hands-on experience based on a project involving analysis of large real-life data. Topics include the knowledge discovery process, data storage and representation, preprocessing algorithms for missing data imputation, feature selection and discretization; unsupervised learning algorithms for clustering and association mining; supervised learning algorithms including decision trees, Bayesian models and introduction to support vector machines and neural networks; ensemble learning; protocols and measures for validation of predictive models; and data security and privacy issues."
  },
  {
    "objectID": "CMSC635.html#topics",
    "href": "CMSC635.html#topics",
    "title": "CMSC 635 - Knowledge Discovery and Data Mining",
    "section": "Topics",
    "text": "Topics\nalgorithms, analysis, bayesian models, data, data imputation, data mining, data preprocessing, data security, data storage, decision trees, discovery process, discretization, ensemble learning, feature selection, neural networks, real-world applications, security, supervised data analysis, support vector machines, unsupervised data analysis"
  },
  {
    "objectID": "CMSC635.html#syllabus-statements",
    "href": "CMSC635.html#syllabus-statements",
    "title": "CMSC 635 - Knowledge Discovery and Data Mining",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC636.html",
    "href": "CMSC636.html",
    "title": "CMSC 636 - Artificial Neural Networks and Deep Learning",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Enrollment is restricted to students with graduate standing in computer science. The course will assume undergraduate-level background in programming, algorithms, linear algebra, calculus, statistics and probability. Topics ranging from fundamental learning rules, functional, cascade correlational, recurrent and gradient descent networks, to neocognitron, softmax, deep convolutional networks, autoencoders and pretrained deep learning (restricted Boltzmann machines). Students will be required to work in teams on a class paper."
  },
  {
    "objectID": "CMSC636.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC636.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 636 - Artificial Neural Networks and Deep Learning",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEnrollment is restricted to students with graduate standing in computer science."
  },
  {
    "objectID": "CMSC636.html#description",
    "href": "CMSC636.html#description",
    "title": "CMSC 636 - Artificial Neural Networks and Deep Learning",
    "section": "Description",
    "text": "Description\nThe course will assume undergraduate-level background in programming, algorithms, linear algebra, calculus, statistics and probability. Topics ranging from fundamental learning rules, functional, cascade correlational, recurrent and gradient descent networks, to neocognitron, softmax, deep convolutional networks, autoencoders and pretrained deep learning (restricted Boltzmann machines). Students will be required to work in teams on a class paper."
  },
  {
    "objectID": "CMSC636.html#topics",
    "href": "CMSC636.html#topics",
    "title": "CMSC 636 - Artificial Neural Networks and Deep Learning",
    "section": "Topics",
    "text": "Topics\narchitecture, autoencoders, calculus, cascade correlational, chatgpt, convolutional neural networks, deep belief networks, deep convolutional networks, deep learning, deep neural networks, google, gradient descent, linear algebra, neocognitron, neural networks, probability, recurrences, restricted boltzmann machines, statistics"
  },
  {
    "objectID": "CMSC636.html#syllabus-statements",
    "href": "CMSC636.html#syllabus-statements",
    "title": "CMSC 636 - Artificial Neural Networks and Deep Learning",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC654.html",
    "href": "CMSC654.html",
    "title": "CMSC 654 - Memory and Malware Forensics",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Prerequisite: CMSC 312. Enrollment is restricted to students with graduate standing in computer science or a related discipline, or those accepted into the accelerated B.S. to M.S. program in computer science. Students should have significant programming experience. This course provides foundation for memory and malware forensics, using the Volatility memory forensics framework, an open source toolkit written in Python. It is focused on investigation of the contents of volatile computer memory (RAM), to reveal hidden malware processes, network connections, clipboard contents, evidence of malware and other malicious evidence. The course will teach skills for analyzing internals of operating systems, such as Mac, Windows and Linux, by concentrating on data structures used by these operating systems."
  },
  {
    "objectID": "CMSC654.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC654.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 654 - Memory and Malware Forensics",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nCMSC 312. Enrollment is restricted to students with graduate standing in computer science or a related discipline, or those accepted into the accelerated BS to MS program in computer science."
  },
  {
    "objectID": "CMSC654.html#description",
    "href": "CMSC654.html#description",
    "title": "CMSC 654 - Memory and Malware Forensics",
    "section": "Description",
    "text": "Description\nStudents should have significant programming experience. This course provides foundation for memory and malware forensics, using the Volatility memory forensics framework, an open source toolkit written in Python. It is focused on investigation of the contents of volatile computer memory (RAM), to reveal hidden malware processes, network connections, clipboard contents, evidence of malware and other malicious evidence. The course will teach skills for analyzing internals of operating systems, such as Mac, Windows and Linux, by concentrating on data structures used by these operating systems."
  },
  {
    "objectID": "CMSC654.html#topics",
    "href": "CMSC654.html#topics",
    "title": "CMSC 654 - Memory and Malware Forensics",
    "section": "Topics",
    "text": "Topics\nmalicious evidence, malware forensics, memory, networks, operating systems, python, volatility memory forensics"
  },
  {
    "objectID": "CMSC654.html#syllabus-statements",
    "href": "CMSC654.html#syllabus-statements",
    "title": "CMSC 654 - Memory and Malware Forensics",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC678.html",
    "href": "CMSC678.html",
    "title": "CMSC 678 - Statistical Learning and Fuzzy Logic Algorithms",
    "section": "",
    "text": "Semester course; 3 lecture hours (delivered online, face-to-face or hybrid). 3 credits. Prerequisite: MATH/STAT 309 or MATH 310. The course considers two central problems in modern science and engineering: i) the problem of statistical learning from examples (empirical data) and ii) the problem of embedding existing human knowledge into workable mathematics. Topics include: examples of multivariate functional mapping, basics of classic classification and regression, support vector machines as a learning paradigm based on structural risk minimization, fuzzy logic algorithms, basics of multi-class classification over high dimensional spaces, curve and surface fittings, multivariate function approximation and nonlinear optimization; fuzzy logic systems; crisp and fuzzy sets, linguistic variables, fuzzy set theory; if-then rules, fuzzy interference, fuzzification and defuzzification, neuro-fuzzy paradigms."
  },
  {
    "objectID": "CMSC678.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC678.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 678 - Statistical Learning and Fuzzy Logic Algorithms",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nMATH/STAT 309 or MATH 310."
  },
  {
    "objectID": "CMSC678.html#description",
    "href": "CMSC678.html#description",
    "title": "CMSC 678 - Statistical Learning and Fuzzy Logic Algorithms",
    "section": "Description",
    "text": "Description\nThe course considers two central problems in modern science and engineering: i) the problem of statistical learning from examples (empirical data) and ii) the problem of embedding existing human knowledge into workable mathematics. Topics include: examples of multivariate functional mapping, basics of classic classification and regression, support vector machines as a learning paradigm based on structural risk minimization, fuzzy logic algorithms, basics of multi-class classification over high dimensional spaces, curve and surface fittings, multivariate function approximation and nonlinear optimization; fuzzy logic systems; crisp and fuzzy sets, linguistic variables, fuzzy set theory; if-then rules, fuzzy interference, fuzzification and defuzzification, neuro-fuzzy paradigms."
  },
  {
    "objectID": "CMSC678.html#topics",
    "href": "CMSC678.html#topics",
    "title": "CMSC 678 - Statistical Learning and Fuzzy Logic Algorithms",
    "section": "Topics",
    "text": "Topics\nclassification, functional mapping, functions, fuzzification, fuzzy logic algorithms, linguistic variables, multi-class classification, neuro-fuzzy paradigms, nonlinear optimization, optimization, regression, statistical learning, statistics, support vector machines"
  },
  {
    "objectID": "CMSC678.html#syllabus-statements",
    "href": "CMSC678.html#syllabus-statements",
    "title": "CMSC 678 - Statistical Learning and Fuzzy Logic Algorithms",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC691.html",
    "href": "CMSC691.html",
    "title": "CMSC 691 - Special Topics in Computer Science",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. May be repeated for credit. Prerequisites: at least one graduate-level computer science course pertaining to the topic area and permission of instructor. An advanced study of selected topic(s) in computer science at the graduate level. See the Schedule of Classes for specific topics to be offered each semester."
  },
  {
    "objectID": "CMSC691.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC691.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 691 - Special Topics in Computer Science",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nat least one graduate-level computer science course pertaining to the topic area and permission of instructor."
  },
  {
    "objectID": "CMSC691.html#description",
    "href": "CMSC691.html#description",
    "title": "CMSC 691 - Special Topics in Computer Science",
    "section": "Description",
    "text": "Description\nAn advanced study of selected topic(s) in computer science at the graduate level. See the Schedule of Classes for specific topics to be offered each semester."
  },
  {
    "objectID": "CMSC691.html#topics",
    "href": "CMSC691.html#topics",
    "title": "CMSC 691 - Special Topics in Computer Science",
    "section": "Topics",
    "text": "Topics\nselected topics"
  },
  {
    "objectID": "CMSC691.html#syllabus-statements",
    "href": "CMSC691.html#syllabus-statements",
    "title": "CMSC 691 - Special Topics in Computer Science",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC692.html",
    "href": "CMSC692.html",
    "title": "CMSC 692 - Independent Study",
    "section": "",
    "text": "Semester course; 1-3 variable hours (to be arranged). 1-3 credits. Enrollment restricted to students with graduate standing and consent of instructor. Independent study done under the supervision of a faculty member. The student must identify a faculty member willing to supervise the research and submit a proposal for approval by the computer science graduate committee no later than the 10th week of the prior semester. A written report and an oral presentation are required upon completion of the research project. Graded as Pass/Fail."
  },
  {
    "objectID": "CMSC692.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC692.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 692 - Independent Study",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEnrollment restricted to students with graduate standing and consent of instructor."
  },
  {
    "objectID": "CMSC692.html#description",
    "href": "CMSC692.html#description",
    "title": "CMSC 692 - Independent Study",
    "section": "Description",
    "text": "Description\nIndependent study done under the supervision of a faculty member. The student must identify a faculty member willing to supervise the research and submit a proposal for approval by the computer science graduate committee no later than the 10th week of the prior semester. A written report and an oral presentation are required upon completion of the research project. Graded as Pass/Fail."
  },
  {
    "objectID": "CMSC692.html#topics",
    "href": "CMSC692.html#topics",
    "title": "CMSC 692 - Independent Study",
    "section": "Topics",
    "text": "Topics\nindependent study"
  },
  {
    "objectID": "CMSC692.html#syllabus-statements",
    "href": "CMSC692.html#syllabus-statements",
    "title": "CMSC 692 - Independent Study",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC697.html",
    "href": "CMSC697.html",
    "title": "CMSC 697 - Directed Research",
    "section": "",
    "text": "Semester course; 1-15 research hours (to be arranged). 1-15 credits. May be repeated for credit. A total of three credits may be used to fulfill the M.S. in Computer Science thesis requirement. Independent research culminating in the writing of the required thesis or dissertation. The student must identify a faculty member willing to supervise the research and submit a proposal to the computer science graduate committee no later than the 10th week of the prior semester. This proposal must be approved before the student can register for the course. Graded as S/U/F."
  },
  {
    "objectID": "CMSC697.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC697.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 697 - Directed Research",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\n(none)"
  },
  {
    "objectID": "CMSC697.html#description",
    "href": "CMSC697.html#description",
    "title": "CMSC 697 - Directed Research",
    "section": "Description",
    "text": "Description\nMay be repeated for credit. A total of three credits may be used to fulfill the MS in Computer Science thesis requirement. Independent research culminating in the writing of the required thesis or dissertation. The student must identify a faculty member willing to supervise the research and submit a proposal to the computer science graduate committee no later than the 10th week of the prior semester. This proposal must be approved before the student can register for the course. Graded as S/U/F."
  },
  {
    "objectID": "CMSC697.html#topics",
    "href": "CMSC697.html#topics",
    "title": "CMSC 697 - Directed Research",
    "section": "Topics",
    "text": "Topics\nresearch"
  },
  {
    "objectID": "CMSC697.html#syllabus-statements",
    "href": "CMSC697.html#syllabus-statements",
    "title": "CMSC 697 - Directed Research",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC701.html",
    "href": "CMSC701.html",
    "title": "CMSC 701 - Research Methods",
    "section": "",
    "text": "Semester course; 3 lecture hours. 3 credits. Prerequisite: Ph.D. standing or permission of instructor. Covers the principles of conducting a research project, reporting the findings in the form of a journal paper and promoting the research through public presentations. Students learn to write grant proposals and practice reviewing research papers and grant proposals. The main emphasis of the course is writing a paper and a grant proposal in a format compliant with NSF, NIH or DoD guidelines."
  },
  {
    "objectID": "CMSC701.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC701.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 701 - Research Methods",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nPHD standing or permission of instructor."
  },
  {
    "objectID": "CMSC701.html#description",
    "href": "CMSC701.html#description",
    "title": "CMSC 701 - Research Methods",
    "section": "Description",
    "text": "Description\nCovers the principles of conducting a research project, reporting the findings in the form of a journal paper and promoting the research through public presentations. Students learn to write grant proposals and practice reviewing research papers and grant proposals. The main emphasis of the course is writing a paper and a grant proposal in a format compliant with NSF, NIH or DoD guidelines."
  },
  {
    "objectID": "CMSC701.html#topics",
    "href": "CMSC701.html#topics",
    "title": "CMSC 701 - Research Methods",
    "section": "Topics",
    "text": "Topics\ngrant proposal, research"
  },
  {
    "objectID": "CMSC701.html#syllabus-statements",
    "href": "CMSC701.html#syllabus-statements",
    "title": "CMSC 701 - Research Methods",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "CMSC702.html",
    "href": "CMSC702.html",
    "title": "CMSC 702 - Computer Science Seminar",
    "section": "",
    "text": "Semester course; 1 seminar hour. 1 credit. May be repeated for credit. Enrollment restricted to students in the doctoral program in computer science. Students will attend a weekly research seminar in which the topic and speaker will change each week in order to cover a broad range of subjects at the forefront of computer science research. Students will have to present and to write a report on at least one seminar presented by other speakers. The objective is to expose students to research topics and scholars in the field of computer science as well as to provide them experience in delivering and critiquing seminar talks. Graded as satisfactory/unsatisfactory."
  },
  {
    "objectID": "CMSC702.html#restrictions-including-pre--or-co-requisities",
    "href": "CMSC702.html#restrictions-including-pre--or-co-requisities",
    "title": "CMSC 702 - Computer Science Seminar",
    "section": "Restrictions including pre- or co-requisities",
    "text": "Restrictions including pre- or co-requisities\nEnrollment restricted to students in the doctoral program in computer science. Students will attend a week"
  },
  {
    "objectID": "CMSC702.html#description",
    "href": "CMSC702.html#description",
    "title": "CMSC 702 - Computer Science Seminar",
    "section": "Description",
    "text": "Description\nStudents will attend a weekly research seminar in which the topic and speaker will change each week in order to cover a broad range of subjects at the forefront of computer science research. Students will have to present and to write a report on at least one seminar presented by other speakers. The objective is to expose students to research topics and scholars in the field of computer science as well as to provide them experience in delivering and critiquing seminar talks. Graded as satisfactory/unsatisfactory."
  },
  {
    "objectID": "CMSC702.html#topics",
    "href": "CMSC702.html#topics",
    "title": "CMSC 702 - Computer Science Seminar",
    "section": "Topics",
    "text": "Topics\nresearch, seminar"
  },
  {
    "objectID": "CMSC702.html#syllabus-statements",
    "href": "CMSC702.html#syllabus-statements",
    "title": "CMSC 702 - Computer Science Seminar",
    "section": "Syllabus Statements",
    "text": "Syllabus Statements\nStudents should visit the URL below and review all syllabus statement information. The full university syllabus statement includes information on safety, registration, the VCU Honor Code, student conduct, withdrawal and more.\nhttps://provost.vcu.edu/faculty/faculty-resources/syllabus/#statements"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CMSC Courses and Titles",
    "section": "",
    "text": "Course\nTitle\n\n\n\n\nCMSC 101\nIntroduction to Computer Science\n\n\nCMSC 144\nCode Beats With Python\n\n\nCMSC 191\nTopics in Computer Science\n\n\nCMSC 210\nComputers and Programming\n\n\nCMSC 235\nComputing and Data Ethics\n\n\nCMSC 245\nIntroduction to Programming Using C++\n\n\nCMSC 246\nAdvanced Programming Using C++\n\n\nCMSC 254\nIntroduction to Problem-solving\n\n\nCMSC 255\nIntroduction to Programming\n\n\nCMSC 256\nData Structures and Object Oriented Programming\n\n\nCMSC 257\nComputer Systems\n\n\nCMSC 302\nIntroduction to Discrete Structures\n\n\nCMSC 303\nIntroduction to the Theory of Computation\n\n\nCMSC 311\nComputer Organization\n\n\nCMSC 312\nIntroduction to Operating Systems\n\n\nCMSC 320\nSoftware Engineering and Web Development\n\n\nCMSC 330\nData Science Skills\n\n\nCMSC 340\nCybersecurity Skills\n\n\nCMSC 355\nFundamentals of Software Engineering\n\n\nCMSC 391\nTopics in Computer Science\n\n\nCMSC 401\nAlgorithm Analysis with Advanced Data Structures\n\n\nCMSC 403\nProgramming Languages\n\n\nCMSC 404\nCompiler Construction\n\n\nCMSC 409\nArtificial Intelligence\n\n\nCMSC 410\nIntroduction to Quantum Computing\n\n\nCMSC 411\nComputer Graphics\n\n\nCMSC 412\nSocial Network Analysis and Cybersecurity Risks\n\n\nCMSC 413\nIntroduction to Cybersecurity\n\n\nCMSC 414\nComputer and Network Security\n\n\nCMSC 415\nIntroduction to Cryptography\n\n\nCMSC 416\nIntroduction to Natural Language Processing\n\n\nCMSC 420\nSoftware Project Management\n\n\nCMSC 425\nIntroduction to Software Analysis and Testing\n\n\nCMSC 428\nMobile Programming: iOS\n\n\nCMSC 435\nIntroduction to Data Science\n\n\nCMSC 440\nData Communication and Networking\n\n\nCMSC 441\nSenior Design Studio I (Laboratory/Project Time)\n\n\nCMSC 442\nSenior Design Studio II (Laboratory/Project Time)\n\n\nCMSC 451\nSenior Project I\n\n\nCMSC 452\nSenior Project II\n\n\nCMSC 455\nSoftware as a Service\n\n\nCMSC 475\nDesign and Implementation of User Interfaces\n\n\nCMSC 491\nTopics in Computer Science\n\n\nCMSC 492\nIndependent Study\n\n\nCMSC 501\nAdvanced Algorithms\n\n\nCMSC 502\nParallel Algorithms\n\n\nCMSC 506\nComputer Networks and Communications\n\n\nCMSC 508\nDatabase Theory\n\n\nCMSC 510\nRegularization Methods for Machine Learning\n\n\nCMSC 512\nAdvanced Social Network Analysis and Security\n\n\nCMSC 516\nAdvanced Natural Language Processing\n\n\nCMSC 525\nIntroduction to Software Analysis, Testing and Verification\n\n\nCMSC 526\nTheory of Programming Languages\n\n\nCMSC 531\n3D Computer Vision for Robot Navigation\n\n\nCMSC 591\nTopics in Computer Science\n\n\nCMSC 601\nConvex Optimization\n\n\nCMSC 602\nOperating Systems\n\n\nCMSC 603\nHigh Performance Distributed Systems\n\n\nCMSC 605\nAdvanced Computer Architecture\n\n\nCMSC 608\nAdvanced Database\n\n\nCMSC 610\nAlgorithmic Foundations of Bioinformatics\n\n\nCMSC 611\nComputer Multimedia\n\n\nCMSC 612\nGame Theory and Security\n\n\nCMSC 615\nCryptocurrency and Blockchain Techniques\n\n\nCMSC 618\nDatabase and Application Security\n\n\nCMSC 619\nThe Design and Specifications of User Interfaces\n\n\nCMSC 620\nApplied Cryptography\n\n\nCMSC 621\nTheory of Computation\n\n\nCMSC 622\nNetwork and System Security\n\n\nCMSC 623\nCloud Computing\n\n\nCMSC 624\nSoftware Quality Assurance\n\n\nCMSC 625\nAdvanced Software Analysis, Testing and Verification\n\n\nCMSC 628\nMobile Networks: Applications, Modeling and Analysis\n\n\nCMSC 630\nImage Analysis\n\n\nCMSC 635\nKnowledge Discovery and Data Mining\n\n\nCMSC 636\nArtificial Neural Networks and Deep Learning\n\n\nCMSC 654\nMemory and Malware Forensics\n\n\nCMSC 678\nStatistical Learning and Fuzzy Logic Algorithms\n\n\nCMSC 691\nSpecial Topics in Computer Science\n\n\nCMSC 692\nIndependent Study\n\n\nCMSC 697\nDirected Research\n\n\nCMSC 701\nResearch Methods\n\n\nCMSC 702\nComputer Science Seminar"
  },
  {
    "objectID": "listing.html",
    "href": "listing.html",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "",
    "text": "Semester course. 3 hours.\nRestrictions: MATH 139 or MATH 141 with a minimum grade of C.\nDescription: An introduction to the work of computer scientists, including an overview of current research and application areas as well as career opportunities. Topics include problem-solving, the basics of computer organization, the software engineering life cycle, research resources and social and ethical aspects of technology. Additional topics also include binary, hexadecimal, two’s complement, floating point representation, ASCII and Unicode.\nTopics: ascii, basics of computer organiation, ethical aspects of technology, numeric representation, problem solving, research resources, social aspects of technology, software engineering life cycle, unicode"
  },
  {
    "objectID": "listing.html#cmsc-144---code-beats-with-python",
    "href": "listing.html#cmsc-144---code-beats-with-python",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 144 - Code Beats With Python",
    "text": "CMSC 144 - Code Beats With Python\nSemester course. 1 hour.\nRestrictions: (none)\nDescription: An introduction to computer programming in Python by teaching students to create hip hop beats. Teaches fundamental programming concepts including sequencing, syntax, variables, functions, parameters, lists, repetition and modularization. Teaches just enough music theory to ensure that student-made beats sound great, including fundamental concepts such as melody, rhythm, harmony, chord progression and orchestration. Students will complete in-class activities that reinforce class concepts and, if completed correctly, demonstrate a clear understanding of the material.\nTopics: chord progression, functions, harmony, lists, melody, modularization, orchestration, parameters, repetition, rhytum, sequencing, syntax, variables"
  },
  {
    "objectID": "listing.html#cmsc-191---topics-in-computer-science",
    "href": "listing.html#cmsc-191---topics-in-computer-science",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 191 - Topics in Computer Science",
    "text": "CMSC 191 - Topics in Computer Science\nSemester course. 3 hours.\nRestrictions: permission of the instructor.\nDescription: This course will teach selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester and prerequisites.\nTopics: selected topics"
  },
  {
    "objectID": "listing.html#cmsc-210---computers-and-programming",
    "href": "listing.html#cmsc-210---computers-and-programming",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 210 - Computers and Programming",
    "text": "CMSC 210 - Computers and Programming\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Introduction to object-oriented programming using Python. The course introduces students to structured programming logic and design techniques. The course content also includes instruction in critical thinking and problem-solving skills using contemporary tools. Specific topics include flowcharting, pseudocode and program control structures, including sequence, selection and repetition. This course is not applicable for credit toward the BS in Computer Science.\nTopics: calling functions, conditional execution, control structures, critical thinking, debugging, dictionaries, expressions, files, flow charting, lists, loops and iterations, network programming, problem solving, program design, programming logic, pseudocode, regular expressions, repetition, sequencing, statement, strings, structured programming, tuples, variables, writing functions"
  },
  {
    "objectID": "listing.html#cmsc-245---introduction-to-programming-using-c",
    "href": "listing.html#cmsc-245---introduction-to-programming-using-c",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 245 - Introduction to Programming Using C++",
    "text": "CMSC 245 - Introduction to Programming Using C++\nSemester course. 3 hours.\nRestrictions: MATH 151 or satisfactory score on the Mathematical Placement Test. Students registering for CMSC 245 must have taken the VCU Mathematics Placement Test within the one-year period immediately preceding the beginning of the course. An exception to this policy is made in the case in which the stated alternative prerequisite course has been completed at VCU. Students are expected to have fundamental computer skills.\nDescription: Introduction to the concepts and practice of structured programming using C++. Problem-solving, top-down design of algorithms, objects, basic C++ syntax, control structures, functions and arrays. This course is intended for engineering majors.\nTopics: arrays, c++ syntax, control structures, functions, problem solving, top down design"
  },
  {
    "objectID": "listing.html#cmsc-246---advanced-programming-using-c",
    "href": "listing.html#cmsc-246---advanced-programming-using-c",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 246 - Advanced Programming Using C++",
    "text": "CMSC 246 - Advanced Programming Using C++\nSemester course. 3 hours.\nRestrictions: CMSC 245.\nDescription: Advanced programming in C++. Topics include program design, objects, classes, inheritance, files, strings, linked lists, stacks, queues, binary trees, recursion, and basic searching and sorting techniques. This course is intended for engineering majors.\nTopics: basic searching, basic sorting, binary trees, classes, files, inheritance, linked lists, objects, program design, queues, recursion, stacks, strings"
  },
  {
    "objectID": "listing.html#cmsc-254---introduction-to-problem-solving",
    "href": "listing.html#cmsc-254---introduction-to-problem-solving",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 254 - Introduction to Problem-solving",
    "text": "CMSC 254 - Introduction to Problem-solving\nSemester course. 4 hours.\nRestrictions: (none)\nDescription: Introduction to problem solving and implementation of solutions using Python. The course introduces students to concepts and practice of structured programming, problem-solving, top-down design of algorithms, a Python language syntax, control structures and arrays. The course content also includes instruction in critical-thinking and problem-solving skills using contemporary tools. Specific topics include flowcharting, pseudocode and program control structures, including sequence, selection, repetition and modularization.\nTopics: analysis, arrays, basic concepts of computer systems, control structures, critical thinking, data, decision structures, dictionaries, flow charting, functions, lists, modeling, modularization, problem solving, processing code, programming, pseudocode, python syntax, repetition, repetition structures, selection, sequencing, sequential data structures, structured programming, structures, top down design, tuples"
  },
  {
    "objectID": "listing.html#cmsc-255---introduction-to-programming",
    "href": "listing.html#cmsc-255---introduction-to-programming",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 255 - Introduction to Programming",
    "text": "CMSC 255 - Introduction to Programming\nSemester course. 4 hours.\nRestrictions: calculus-level placement on the VCU Mathematics Placement Test within the one-year period immediately preceding enrollment in the course, or MATH 151 or equivalent. Students are expected to have fundamental computer skills.\nDescription: Introduction to object-oriented programming using Java. Topics include problem-solving, top-down design of algorithms using control structures, methods, arrays, basic I/O, basic concepts of objects and classes in Java, Java classes for manipulating strings, and introduction to program testing, UML notation and integrated development environments. Students may not receive credit for both CMSC 255 and INFO 250.\nTopics: algorithms, arrays, arrays, input/output, classes, computers, computers, control structures, control structures, ide, java, methods, objects, problem solving, problem solving, program testing, simple data types, strings, syntax, top down design, uml"
  },
  {
    "objectID": "listing.html#cmsc-256---data-structures-and-object-oriented-programming",
    "href": "listing.html#cmsc-256---data-structures-and-object-oriented-programming",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 256 - Data Structures and Object Oriented Programming",
    "text": "CMSC 256 - Data Structures and Object Oriented Programming\nSemester course. 4 hours.\nRestrictions: CMSC 255 with a minimum grade of C; corequisite: CMSC 302.\nDescription: Advanced programming using Java. Topics include introduction to object-oriented design, inheritance, polymorphism, exceptions, interfaces, linked lists, stacks, queues, binary trees, recursion, and basic searching and sorting techniques. Continued focus on program testing and UML notation. Students may not receive credit for both CMSC 256 and INFO 350.\nTopics: abstract complexity, algorithms, algorithms, basic searching, binary trees, classes, data structures, deques, exceptions, generics, graphs, hash functions, inheritance, interfaces, interfaces, iterators, linked lists, linked lists, lists, object oriented programming, objects, polymorphism, queues, queues, recursion, recursion, sorting, sorting, stacks, stacks, trees, uml"
  },
  {
    "objectID": "listing.html#cmsc-257---computer-systems",
    "href": "listing.html#cmsc-257---computer-systems",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 257 - Computer Systems",
    "text": "CMSC 257 - Computer Systems\nSemester course. 4 hours.\nRestrictions: CMSC 256 with a minimum grade of C.\nDescription: Topics include UNIX essentials; system programming in C; machine-level representation and organization of programs/data, arrays and pointers; types, structs and unions; strings; bit/byte operations; memory management; shell programming; input/output, including file handling; debugging; signals; network programming using sockets; program concurrency using forks and threads; experiments on program performance and optimization techniques.\nTopics: arrays, bit/bye operations, debugging, files, forks and threads, input/output, machine-level representation, memory management, network programming using sockets, optimization, pointers, program performance, programming in c, shell programming, signals, types, structs, and unions"
  },
  {
    "objectID": "listing.html#cmsc-302---introduction-to-discrete-structures",
    "href": "listing.html#cmsc-302---introduction-to-discrete-structures",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 302 - Introduction to Discrete Structures",
    "text": "CMSC 302 - Introduction to Discrete Structures\nSemester course. 3 hours.\nRestrictions: CMSC 255 with minimum grade of C.\nDescription: Logic and proofs, sets, functions, sequences and sums, relations, graphs, trees, induction and recursion, advanced counting technique (recurrences).\nTopics: algebra, counting, functions, functions, graphs, graphs, induction, logic, logic, matrices, probability, proofs, proofs, recurrences, recurrences, recursion, relations, relations, sequences, sequencing, set theory, sets, summations, sums, trees, trees"
  },
  {
    "objectID": "listing.html#cmsc-303---introduction-to-the-theory-of-computation",
    "href": "listing.html#cmsc-303---introduction-to-the-theory-of-computation",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 303 - Introduction to the Theory of Computation",
    "text": "CMSC 303 - Introduction to the Theory of Computation\nSemester course. 3 hours.\nRestrictions: CMSC 302 or the equivalent with a grade of C or better.\nDescription: Complexity classes, grammars, automata, formal languages, Turing machines, computability.\nTopics: automata, complexity analysis, computability theory, context-free grammars, discrete math, finite automata, logic, pushdown automata, regular expressions, turing machines"
  },
  {
    "objectID": "listing.html#cmsc-311---computer-organization",
    "href": "listing.html#cmsc-311---computer-organization",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 311 - Computer Organization",
    "text": "CMSC 311 - Computer Organization\nSemester course. 3 hours.\nRestrictions: CMSC 302 with minimum grade of C; corequisite: CMSC 257.\nDescription: Introduction to the basic organization of computers including elementary digital logic design, processor and arithmetic/logic unit design, data paths, memory hierarchy, I/O devices, instruction set architecture and addressing modes.\nTopics: addressing modes, architecture, assembly language, cache memories, computers, data, data paths, data types, digital logic structures, input/output, input/output, instruction set architecture, instruction set architecture, logic, machine language, memory hierarchy, memory hierarchy, organization, stacks, trap routines, trap subroutines, unit design, virtual memory, von neumann model"
  },
  {
    "objectID": "listing.html#cmsc-312---introduction-to-operating-systems",
    "href": "listing.html#cmsc-312---introduction-to-operating-systems",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 312 - Introduction to Operating Systems",
    "text": "CMSC 312 - Introduction to Operating Systems\nSemester course. 3 hours.\nRestrictions: CMSC 311 or EGRE 364.\nDescription: Computer systems design, I/O processing, secondary memory organization, command languages, memory management and job scheduling. Students will work in teams to design and implement an operating system simulation.\nTopics: command languages, computer systems design, concurrency, debugging, distributed systems, file management, input/output, job scheduling, memory management, memory management, operating systems, process scheduling, secondary memory"
  },
  {
    "objectID": "listing.html#cmsc-320---software-engineering-and-web-development",
    "href": "listing.html#cmsc-320---software-engineering-and-web-development",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 320 - Software Engineering and Web Development",
    "text": "CMSC 320 - Software Engineering and Web Development\nSemester course. 3 hours.\nRestrictions: CMSC 210.\nDescription: Introduction to software engineering and web development. The course introduces students to the software development process, including design, development and testing principles. Students will apply these principles in the development of a web application. This course is not applicable for credit toward any College of Engineering degrees.\nTopics: design, development, documentation, gathering, software development, systems development, testing, testing functionality, web development, web development"
  },
  {
    "objectID": "listing.html#cmsc-330---data-science-skills",
    "href": "listing.html#cmsc-330---data-science-skills",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 330 - Data Science Skills",
    "text": "CMSC 330 - Data Science Skills\nSemester course. 3 hours.\nRestrictions: CMSC 210.\nDescription: Introduction to data science skills. The course introduces students to the foundations of data science and the tools used to collect, analyze and represent data. Students will apply these principles in both analysis and visualization projects. This course is not applicable for credit toward any College of Engineering degrees.\nTopics: analysis, analysis, data, data, data management, data manipulation, data quality, security, visualization, visualization"
  },
  {
    "objectID": "listing.html#cmsc-340---cybersecurity-skills",
    "href": "listing.html#cmsc-340---cybersecurity-skills",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 340 - Cybersecurity Skills",
    "text": "CMSC 340 - Cybersecurity Skills\nSemester course. 3 hours.\nRestrictions: CMSC 210.\nDescription: Introduction to cybersecurity skills. The course introduces students to cybersecurity terminology, standards and best practices. Students will apply these practices as part of a cybersecurity-focused project. This course is not applicable for credit toward any College of Engineering degrees.\nTopics: cryptographic systems, cybersecurity, ethics, firewalls, information security, logic, physical security, risk management, security, security maintenance, security technology, vpns"
  },
  {
    "objectID": "listing.html#cmsc-355---fundamentals-of-software-engineering",
    "href": "listing.html#cmsc-355---fundamentals-of-software-engineering",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 355 - Fundamentals of Software Engineering",
    "text": "CMSC 355 - Fundamentals of Software Engineering\nSemester course. 3 hours.\nRestrictions: CMSC 256 or EGRE 246, either with a minimum grade of C.\nDescription: Provides an overview of how to engineer software systems, including all stages of the software development process based on agile principles. Familiarizes students with modern software tooling and the principles of software quality and testing. Students will work in teams to gain experience in software development methodology, write specification and design documents, and develop a prototype.\nTopics: agile, agile, ci/cd, code management, containerization, ci/cd, design, github, patterns, prototyping, requirement engineering, serverless coding, service oriented design techniques, software architecture, software design, software development, software development, software lifecycle, software maintenance, software modeling, software quality, software validation, software verification, testing"
  },
  {
    "objectID": "listing.html#cmsc-391---topics-in-computer-science",
    "href": "listing.html#cmsc-391---topics-in-computer-science",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 391 - Topics in Computer Science",
    "text": "CMSC 391 - Topics in Computer Science\nSemester course. 3 hours.\nRestrictions: permission of the instructor.\nDescription: This course will teach selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester and prerequisites.\nTopics: selected topics"
  },
  {
    "objectID": "listing.html#cmsc-401---algorithm-analysis-with-advanced-data-structures",
    "href": "listing.html#cmsc-401---algorithm-analysis-with-advanced-data-structures",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 401 - Algorithm Analysis with Advanced Data Structures",
    "text": "CMSC 401 - Algorithm Analysis with Advanced Data Structures\nSemester course. 3 hours.\nRestrictions: CMSC 256 with a grade of C or better and CMSC 302 with a grade of C or better.\nDescription: Introduction to algorithm analysis and complexity classes. Advanced data structures topics including multiple linked lists, height-balanced trees, B-trees, hashing and graph representation; incorporating data structures into object-oriented design. Analysis of various searching and sorting algorithms. Algorithm design topics include divide-and-conquer, dynamic programming and greedy methods.\nTopics: algorithms, algorithms, analysis, b-trees, complexity analysis, data structures, data structures, data structures, design, divide and conquer approach, dynamic programming, graph algorithms, graphs, greedy approach, hashing, height-balanced trees, linked lists, objects, recurrences, sorting, sorting"
  },
  {
    "objectID": "listing.html#cmsc-403---programming-languages",
    "href": "listing.html#cmsc-403---programming-languages",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 403 - Programming Languages",
    "text": "CMSC 403 - Programming Languages\nSemester course. 3 hours.\nRestrictions: CMSC 256 and CMSC 303, both with a minimum grade of C.\nDescription: Survey of representative modern programming languages. Formal definition of programming languages including specifications of syntax and semantics. Precedence, infix, prefix and postfix notation. Global properties of algorithmic languages. Sub-routines, co-routines and tasks. List processing, string manipulation, data description and simulation languages. Run-time representation of program and data structures.\nTopics: algorithms, co-routines, data, data structures, design, functional programming, infix, languages, lists, object oriented programming, parsing, postfix, precendence, prefix, semantics, semantics, strings, sub-routines, symbol table, syntax, syntax"
  },
  {
    "objectID": "listing.html#cmsc-404---compiler-construction",
    "href": "listing.html#cmsc-404---compiler-construction",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 404 - Compiler Construction",
    "text": "CMSC 404 - Compiler Construction\nSemester course. 3 hours.\nRestrictions: CMSC 401 and 403.\nDescription: A first course in compiler theory and construction. Formal description of languages, underlying theory and design techniques for compilers, lexical analysis, syntax analysis, syntax-directed translation, intermediate languages, run-time system management, code generation, code optimization, compiler-building tools.\nTopics: code management, compilers, intermediate languages, languages, lexical analysis, optimization, run-time system management, syntax"
  },
  {
    "objectID": "listing.html#cmsc-409---artificial-intelligence",
    "href": "listing.html#cmsc-409---artificial-intelligence",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 409 - Artificial Intelligence",
    "text": "CMSC 409 - Artificial Intelligence\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C and MATH 310.\nDescription: Covers problem spaces, problem-solving methods, game playing, knowledge representatives, expert systems, natural language understanding.\nTopics: expert systems, game playing, knowledge representatives, machine learning, natural language, problem solving, problem spaces"
  },
  {
    "objectID": "listing.html#cmsc-410---introduction-to-quantum-computing",
    "href": "listing.html#cmsc-410---introduction-to-quantum-computing",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 410 - Introduction to Quantum Computing",
    "text": "CMSC 410 - Introduction to Quantum Computing\nSemester course. 3 hours.\nRestrictions: CMSC 401 and MATH 310, both with a minimum grade of B.\nDescription: Introduction to quantum information processing: state vectors and density operators, tensor product space, unitary evolution, no-go theorems, measurement, qubit, gate model of quantum computing, quantum complexity theory, quantum error correction, quantum algorithms, and quantum machine learning.\nTopics: density operators, measurement, no-go theorems, quantum algorithms, quantum complexity, quantum computing, quantum error correction, quantum machine learning, qubit, state vectors, tensor, unitary evolution"
  },
  {
    "objectID": "listing.html#cmsc-411---computer-graphics",
    "href": "listing.html#cmsc-411---computer-graphics",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 411 - Computer Graphics",
    "text": "CMSC 411 - Computer Graphics\nSemester course. 3 hours.\nRestrictions: CMSC 355 and MATH 310.\nDescription: Presents mathematical techniques for graphic development and transformation, curve and surface approximation and projections, graphical languages and data structures and their implementation, graphic modeling.\nTopics: curve and surface approximations, data structures, graphic development, graphic development, projections, transformation"
  },
  {
    "objectID": "listing.html#cmsc-412---social-network-analysis-and-cybersecurity-risks",
    "href": "listing.html#cmsc-412---social-network-analysis-and-cybersecurity-risks",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 412 - Social Network Analysis and Cybersecurity Risks",
    "text": "CMSC 412 - Social Network Analysis and Cybersecurity Risks\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C.\nDescription: Covers network models, link prediction and analysis, centrality measures, random networks, power-laws and preferential attachment, small world phenomenon and decentralized search, community structure, information propagation in networks, and security and privacy issues in OSNs.\nTopics: centrality, community structure, decentralized search, information propagation, link analysis, network models, networks, osns, power-laws, preferential attachment, random networks, security, small world phenomenon"
  },
  {
    "objectID": "listing.html#cmsc-413---introduction-to-cybersecurity",
    "href": "listing.html#cmsc-413---introduction-to-cybersecurity",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 413 - Introduction to Cybersecurity",
    "text": "CMSC 413 - Introduction to Cybersecurity\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C.\nDescription: This course provides introduction and basic concepts of computer security, cyber attacks, cyber defense, cyber forensics and cyber ethics.\nTopics: cyber defense, cyber ethics, cyber forensics, cybersecurity, security"
  },
  {
    "objectID": "listing.html#cmsc-414---computer-and-network-security",
    "href": "listing.html#cmsc-414---computer-and-network-security",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 414 - Computer and Network Security",
    "text": "CMSC 414 - Computer and Network Security\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C. Corequisite: CMSC 312.\nDescription: This course covers the best practices of computer systems and network security. Key topics include security architecture, cryptographic systems and security management tools.\nTopics: application layer attacks, architecture, computer networks, computer security, computer systems design, cryptographic systems, cryptographic systems, firewalls, internet, link layer attacks, network penetration, networks, networks, security, security"
  },
  {
    "objectID": "listing.html#cmsc-415---introduction-to-cryptography",
    "href": "listing.html#cmsc-415---introduction-to-cryptography",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 415 - Introduction to Cryptography",
    "text": "CMSC 415 - Introduction to Cryptography\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C.\nDescription: This course provides a rigorous and theoretical introduction to modern cryptography. Key topics include symmetric key encryption and authentication, public key encryption, and digital signatures.\nTopics: authentication, cryptographic systems, digital signatures, public key encryption, symmetric key encryption"
  },
  {
    "objectID": "listing.html#cmsc-416---introduction-to-natural-language-processing",
    "href": "listing.html#cmsc-416---introduction-to-natural-language-processing",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 416 - Introduction to Natural Language Processing",
    "text": "CMSC 416 - Introduction to Natural Language Processing\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C.\nDescription: Covers rule-based and statistical methods for creating computer programs that analyze, generate and understand human language. Topics include regular expressions and automata, context-free grammars, probabilistic classifiers, and machine learning. Word-level, syntactic and semantic processing are all considered. Application to real-world problems such as spell-checking, Web search, automatic question answering, authorship identification and developing conversational interfaces.\nTopics: automation, computer systems design, context-free grammars, machine learning, natural language, probabilistic classifiers, real-world applications, regular expressions, semantics, spell-checking, statistics, syntax, web search"
  },
  {
    "objectID": "listing.html#cmsc-420---software-project-management",
    "href": "listing.html#cmsc-420---software-project-management",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 420 - Software Project Management",
    "text": "CMSC 420 - Software Project Management\nSemester course. 3 hours.\nRestrictions: CMSC 355 with a minimum grade of C.\nDescription: Study of the logistics of team software development. Students work in teams to gain experience in software management and develop the components of a larger software product. Topics include risk management, project planning, quality management, configuration management and software testing.\nTopics: project planning, quality management, risk management, software development, software management, software quality"
  },
  {
    "objectID": "listing.html#cmsc-425---introduction-to-software-analysis-and-testing",
    "href": "listing.html#cmsc-425---introduction-to-software-analysis-and-testing",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 425 - Introduction to Software Analysis and Testing",
    "text": "CMSC 425 - Introduction to Software Analysis and Testing\nSemester course. 3 hours.\nRestrictions: CMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program.\nDescription: A practical introduction to testing complex software applications. An introduction to concepts and techniques used in the analysis of software, including basic and advanced control flow and data flow analyses. Using analytic results to derive test data and validate the correct implementation of programs. Advanced testing strategies including random, structural, mutation and fuzzing.\nTopics: advanced testing strategies, analysis, concolic hybrid analysis, control flow, control flow, coverage-driven systematic software testing, data flow, data-flow, dynamic programming, limitations, program analysis-driven testing, software development, software management, software validation, software verification, static programming, symbolic program analysis, test case coverage, testing, testing"
  },
  {
    "objectID": "listing.html#cmsc-428---mobile-programming-ios",
    "href": "listing.html#cmsc-428---mobile-programming-ios",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 428 - Mobile Programming: iOS",
    "text": "CMSC 428 - Mobile Programming: iOS\nSemester course. 3 hours.\nRestrictions: CMSC 355, with a minimum grade of C.\nDescription: This course covers the fundamentals of Swift, Xcode and iOS for programming and design of iOS applications. Background in object-oriented programming and access to a computer with Xcode platform is required.\nTopics: ios, objects, swift, xcode"
  },
  {
    "objectID": "listing.html#cmsc-435---introduction-to-data-science",
    "href": "listing.html#cmsc-435---introduction-to-data-science",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 435 - Introduction to Data Science",
    "text": "CMSC 435 - Introduction to Data Science\nSemester course. 3 hours.\nRestrictions: CMSC 401 with a minimum grade of C.\nDescription: This course covers understanding, representation, storage, retrieval, preprocessing and analysis of data. Specific topics include data quality and preprocessing, database management systems, data warehouses, selected methods for scalable unsupervised and supervised data analysis, and assessment of results generated by these methods. Students will be engaged in analysis of real-life data from data preprocessing, through data analysis, to the assessment of a knowledge product.\nTopics: analysis, data, data analysis, data quality, data structures, database"
  },
  {
    "objectID": "listing.html#cmsc-440---data-communication-and-networking",
    "href": "listing.html#cmsc-440---data-communication-and-networking",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 440 - Data Communication and Networking",
    "text": "CMSC 440 - Data Communication and Networking\nSemester course. 3 hours.\nRestrictions: CMSC 257 with a minimum grade of C. Enrollment is restricted to majors in the College of Engineering.\nDescription: This course explores computer networking, focusing on the applications and protocols that run on the Internet. Students will take a top-down approach to the layered network architecture, studying applications first and then proceeding down the network “stack” toward the physical link. Students will examine the operation of applications such as the web, FTP, e-mail and DNS. At the transport layer, students will study both connectionless UDP and connection-oriented TCP, with an in-depth study of TCP operation, specifically flow control and congestion control. Data communications are explored through various data routing protocols. Additional topics include network security and wireless/mobile networking.\nTopics: architecture, architecture, client-server model, computer networks, data, dns, dns , e-mail, flow control, http application, internet, mail applications, network edge, network models, networks, networks, networks vulnerability, pipelining, protocol layers, reliable transmission, socket programming, tcp, udp, web development"
  },
  {
    "objectID": "listing.html#cmsc-441---senior-design-studio-i-laboratoryproject-time",
    "href": "listing.html#cmsc-441---senior-design-studio-i-laboratoryproject-time",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 441 - Senior Design Studio I (Laboratory/Project Time)",
    "text": "CMSC 441 - Senior Design Studio I (Laboratory/Project Time)\nSemester course. 2 hours.\nRestrictions: CMSC 355; and UNIV 200 or HONR 200 or equivalent, both with minimum grades of C. Corequisite: CMSC 451. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses.\nDescription: A minimum of six laboratory hours per week dedicated to the execution phase of the senior design (capstone) project for the computer science major. Tasks include team meetings, brainstorming, sponsor advising, researching, designing, implementing, reviewing, testing and validating projects. Each student will participate, either individually or as part of a team, in a project or other experience approved by the course coordinator or sponsored by another computer science faculty member. Students will submit a detailed written description of their proposed project or experience and will present orally some aspect of what they have learned and/or done during the semester. This course cannot be counted as upper-level CMSC electives for students graduating under bullet\nTopics: brainstorming, capstone, design, final project, project planning, research, teamwork, testing"
  },
  {
    "objectID": "listing.html#cmsc-442---senior-design-studio-ii-laboratoryproject-time",
    "href": "listing.html#cmsc-442---senior-design-studio-ii-laboratoryproject-time",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 442 - Senior Design Studio II (Laboratory/Project Time)",
    "text": "CMSC 442 - Senior Design Studio II (Laboratory/Project Time)\nSemester course. 2 hours.\nRestrictions: CMSC 441, CMSC 451 and CMSC 508, each with a minimum grade of C. Corequisite: CMSC 452. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses.\nDescription: A minimum of six laboratory hours per week dedicated to the execution phase of the senior design (capstone) project for the computer science major. Tasks include team meetings, brainstorming, sponsor advising, researching, designing, implementing, reviewing, testing and validating projects. Each student will participate, either individually or as part of a team, in a project or other experience approved by the course coordinator or sponsored by another computer science faculty member. Students must continue on the same project that was started in CMSC 441 and CMSC 451. A final project report and presentation are due at the conclusion of the two-semester project or experience. This course cannot be counted as upper-level CMSC electives for students graduating under bulletins prio\nTopics: brainstorming, final project, project planning, researching, teamwork, testing"
  },
  {
    "objectID": "listing.html#cmsc-451---senior-project-i",
    "href": "listing.html#cmsc-451---senior-project-i",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 451 - Senior Project I",
    "text": "CMSC 451 - Senior Project I\nSemester course. 1 hour.\nRestrictions: CMSC 355 with minimum grade of C; and UNIV 200 or HONR 200 or equivalent. Corequisite: CMSC 441. Enrollment is restricted to computer science majors with senior standing who have 24 credits in computer science courses.\nDescription: This weekly seminar presents and discusses topics relevant to senior-level computer science students in support of the capstone project and upcoming graduation. A single course coordinator manages and administers the course and schedules the various faculty lectures and guest speakers. Topics include, but are not limited to, the following: proposal writing; project planning and management; scheduling resources and budgeting for software development projects; patents and intellectual property; entrepreneurship; ethical, legal and social issues in computing; and professional responsibilities of computer scientists. Each student will write and revise a research paper on a technical topic associated with his or her project or experience. A final project report and presentat\nTopics: capstone, entrepreneurship, ethics, final project, project planning, social aspects of technology, software development"
  },
  {
    "objectID": "listing.html#cmsc-452---senior-project-ii",
    "href": "listing.html#cmsc-452---senior-project-ii",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 452 - Senior Project II",
    "text": "CMSC 452 - Senior Project II\nSemester course. 1 hour.\nRestrictions: CMSC 441, CMSC 451 and CMSC 508, each with a minimum grade of C. Corequisite: CMSC 442. Enrollment is restricted to students with senior standing in the computer science department.\nDescription: This weekly seminar presents and discusses topics relevant to senior-level computer science students in support of the capstone project and upcoming graduation. A single course coordinator manages and administers the course and schedules the various faculty lectures and guest speakers. Topics include, but are not limited to, the following: proposal writing; project planning and management; scheduling resources and budgeting for software development projects; patents and intellectual property; entrepreneurship; ethical, legal and social issues in computing; and professional responsibilities of computer scientists. Each student will write and revise a research paper on a technical topic associated with his or her project or experience. Students must continue on the same project that was started in CMSC 451.\nTopics: agile, code management, code management, ci/cd, entrepreneurship, final project, maintainability, project planning, scalability, security, social aspects of technology, social aspects of technology, software development, teamwork, testing"
  },
  {
    "objectID": "listing.html#cmsc-455---software-as-a-service",
    "href": "listing.html#cmsc-455---software-as-a-service",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 455 - Software as a Service",
    "text": "CMSC 455 - Software as a Service\nSemester course. 3 hours.\nRestrictions: CMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program.\nDescription: Students will examine the challenges, opportunities and open problems of software-as-a-service deployed on commodity cloud computing platforms. Covers relevant software architectures and API design principles. Includes concepts of modern software frameworks for software development, cloud computing for software deployment and software operations. Students participate in projects that use modern tooling to develop, deploy and monitor a software application.\nTopics: api, applications, cloud computing, software development, software management"
  },
  {
    "objectID": "listing.html#cmsc-475---design-and-implementation-of-user-interfaces",
    "href": "listing.html#cmsc-475---design-and-implementation-of-user-interfaces",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 475 - Design and Implementation of User Interfaces",
    "text": "CMSC 475 - Design and Implementation of User Interfaces\nSemester course. 3 hours.\nRestrictions: CMSC 355 with a minimum grade of C. Enrollment is restricted to majors in the computer science program.\nDescription: This course investigates the design and implementation of user interfaces and the evaluation of user experiences. Particular emphasis is placed on creating professional-quality designs and implementations and on evaluating these implementations with end-users. Students will create their own UIs as well as critique others to develop a deep understanding of what works in practice.\nTopics: design, end-users, interfaces, user interface"
  },
  {
    "objectID": "listing.html#cmsc-491---topics-in-computer-science",
    "href": "listing.html#cmsc-491---topics-in-computer-science",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 491 - Topics in Computer Science",
    "text": "CMSC 491 - Topics in Computer Science\nSemester course. 3 hours.\nRestrictions: permission of instructor.\nDescription: This course will cover selected topics in computer science. See the Schedule of Classes for specific topics to be offered each semester.\nTopics: selected topics"
  },
  {
    "objectID": "listing.html#cmsc-492---independent-study",
    "href": "listing.html#cmsc-492---independent-study",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 492 - Independent Study",
    "text": "CMSC 492 - Independent Study\nSemester course. 4 hours.\nRestrictions: (none)\nDescription: Maximum 4 credits per semester; maximum total of 6 credits. Generally open only to students of junior or senior standing who have acquired at least 12 credits in the departmental discipline. Determination of the amount of credit and permission of instructor and department chair must be procured prior to registration of the course. The student must submit a proposal for investigating some area or problem not contained in the regular curriculum. The results of the student’s study will be presented in a report.\nTopics: independent study"
  },
  {
    "objectID": "listing.html#cmsc-501---advanced-algorithms",
    "href": "listing.html#cmsc-501---advanced-algorithms",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 501 - Advanced Algorithms",
    "text": "CMSC 501 - Advanced Algorithms\nSemester course. 3 hours.\nRestrictions: CMSC 401 or equivalent. Enrollment is restricted to students with graduate standing or those accepted into the accelerated BS to MS program in computer science.\nDescription: Advanced graph algorithms, advanced data structures, applied numerical algorithms, optimization methods, approximation methods for hard graph and string problems and computational geometry algorithms.\nTopics: algorithms, approximation, computational geometry, data structures, graph algorithms, optimization, strings"
  },
  {
    "objectID": "listing.html#cmsc-502---parallel-algorithms",
    "href": "listing.html#cmsc-502---parallel-algorithms",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 502 - Parallel Algorithms",
    "text": "CMSC 502 - Parallel Algorithms\nSemester course. 3 hours.\nRestrictions: CMSC 312 and CMSC 401. Enrollment is restricted to students with graduate standing or those accepted into the accelerated BS to MS program in computer science.\nDescription: Software and hardware mechanisms for providing mutual exclusion in uniprocessor and multiprocessor environments. Architectural issues including pipeline design, superscalar computers, multiprocessors, memory systems, peripherals, interfacing techniques, networks, performance and software issues. Design and uses of parallel algorithms to solve concurrency problems in a distributed environment including message passing and remote procedure calls. Students will work in teams (as well as on individual projects) to design and implement parallel algorithms.\nTopics: concurrency, interfaces, networks, parallel algorithms, software quality"
  },
  {
    "objectID": "listing.html#cmsc-506---computer-networks-and-communications",
    "href": "listing.html#cmsc-506---computer-networks-and-communications",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 506 - Computer Networks and Communications",
    "text": "CMSC 506 - Computer Networks and Communications\nSemester course. 3 hours.\nRestrictions: CMSC 312.\nDescription: Theoretical and applied analysis of basic data communication systems; design of networks in the framework of the OSI reference model; Local and Wide Area Networks; performance analysis of networks; error control and security. Students will work in teams to design and implement a small computer network. Crosslisted as: EGRE 526.\nTopics: analysis, communication systems, computer networks, design, error control, local and wide area networks, osi reference model, security"
  },
  {
    "objectID": "listing.html#cmsc-508---database-theory",
    "href": "listing.html#cmsc-508---database-theory",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 508 - Database Theory",
    "text": "CMSC 508 - Database Theory\nSemester course. 3 hours.\nRestrictions: CMSC 303 with a minimum grade of C.\nDescription: Design and implementation of relational database systems. Emphasis is placed on entity-relationship diagrams, relational algebra, normal forms and normalization. Introduction to SQL. Discussion of physical level issues. Students will be required to complete a design project and give an oral presentation of the project. Not applicable toward the MS in Computer Science or the PHD in Engineering, computer science concentration.\nTopics: administration, ajax, configuration, cursors, data , data storage, database, database installation, design, design, entities, entity-relationship diagrams, entity-relationship diagrams, functional programming, functions, functions, indexes, mysql, normalization, php, physical level issues, procedures, queries, relational algebra, relational algebra, relational design, relations, sql, sql, subqueries, triggers, views"
  },
  {
    "objectID": "listing.html#cmsc-510---regularization-methods-for-machine-learning",
    "href": "listing.html#cmsc-510---regularization-methods-for-machine-learning",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 510 - Regularization Methods for Machine Learning",
    "text": "CMSC 510 - Regularization Methods for Machine Learning\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science or related discipline such as bioinformatics or acceptance into the accelerated BS to MS program in computer science.\nDescription: The course will assume undergraduate-level background in algorithms, linear algebra, calculus, statistics and probability. Upon successful completion of this course, the student will be able to understand recent advances in machine learning and apply machine-learning tools that go beyond learning from data, as well as have the ability to incorporate additional knowledge about the learning problem. Topics covered will include optimization-based view of supervised machine learning; classical regularization approaches including weight decay and Lasso; regularization terms incorporating additional knowledge about structures in the feature space, including group lasso and graph-based regularization terms; semi-supervised learning using graphs linking unlabeled and labeled samples.\nTopics: algorithms, calculus, data analysis, graph algorithms, linear algebra, machine learning, natural language, optimization, probability, regularization, statistics"
  },
  {
    "objectID": "listing.html#cmsc-512---advanced-social-network-analysis-and-security",
    "href": "listing.html#cmsc-512---advanced-social-network-analysis-and-security",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 512 - Advanced Social Network Analysis and Security",
    "text": "CMSC 512 - Advanced Social Network Analysis and Security\nSemester course. 3 hours.\nRestrictions: CMSC 412 and CMSC 501. Enrollment is restricted to students with graduate standing in computer science or a related discipline such as bioinformatics or acceptance into the accelerated BS to MS program in computer science.\nDescription: The purpose of the course is to teach algorithms for analyzing social networks and complex systems. The focus will be on understanding the inner workings of algorithms using in-network analysis and security threats in online social network sites. Topic covered will include modeling social and technological networks, methods for analyzing structure and dynamical processes on the network, and security and privacy issues in online social networks such as inference attacks, network anonymization, sybil attacks and defense, social bots.\nTopics: algorithms, analysis, networks, networks, security, social network"
  },
  {
    "objectID": "listing.html#cmsc-516---advanced-natural-language-processing",
    "href": "listing.html#cmsc-516---advanced-natural-language-processing",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 516 - Advanced Natural Language Processing",
    "text": "CMSC 516 - Advanced Natural Language Processing\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science or a related discipline, or those accepted into the accelerated BS to MS program in computer science.\nDescription: Upon successful completion of this course, the student will be able to understand recent advances in natural language processing and apply NLP algorithms and techniques for processing unstructured text. Word-level, syntactic and semantic processing will be considered. Specific topics include rule-based and statistical methods for creating computer programs that analyze, generate and understand human language. Regular expressions and automata, context-free grammars, probabilistic classifiers and machine learning. Applications to real-world problems such as spell-checking, Web search, automatic question answering, authorship identification and developing conversational interfaces.\nTopics: automation, context-free grammars, machine learning, natural language, nlp algorithms, probabilistic classifiers, regular expressions, semantics, statistics, syntax"
  },
  {
    "objectID": "listing.html#cmsc-525---introduction-to-software-analysis-testing-and-verification",
    "href": "listing.html#cmsc-525---introduction-to-software-analysis-testing-and-verification",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 525 - Introduction to Software Analysis, Testing and Verification",
    "text": "CMSC 525 - Introduction to Software Analysis, Testing and Verification\nSemester course. 3 hours.\nRestrictions: CMSC 401 and 403. Enrollment is restricted to students with graduate standing or those accepted into the accelerated BS to MS program in computer science.\nDescription: An introduction to concepts and techniques used in the analysis of software for certain properties. Using analytic results to derive test data and verify the correct implementation of programs. Flow graphs, fault/failure model, theoretical and practical limitations. Control flow, data flow and error flow analyses. Testing strategies including random, structural, mutation and error flow. Software metrics.\nTopics: advanced testing strategies, analysis, analysis, concolic hybrid analysis, control flow, coverage-driven systematic software testing, data, data-flow, dynamic programming, flow control, graphs, limitations, program analysis-driven testing, software management, software validation, software verification, static programming, symbolic program analysis, test case coverage, testing, testing"
  },
  {
    "objectID": "listing.html#cmsc-526---theory-of-programming-languages",
    "href": "listing.html#cmsc-526---theory-of-programming-languages",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 526 - Theory of Programming Languages",
    "text": "CMSC 526 - Theory of Programming Languages\nSemester course. 3 hours.\nRestrictions: CMSC 403, graduate student standing or acceptance into the five-year accelerated BS and MS program in computer science.\nDescription: An introduction to the formal semantics of programming languages, logic programming and functional programming. Topics include denotational semantics, attribute grammars, Backus Formal Functional Programming, fixed point semantics, model-theoretic semantics and PROLOG.\nTopics: languages, logic, model-theoretic semtances, semantics"
  },
  {
    "objectID": "listing.html#cmsc-531---3d-computer-vision-for-robot-navigation",
    "href": "listing.html#cmsc-531---3d-computer-vision-for-robot-navigation",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 531 - 3D Computer Vision for Robot Navigation",
    "text": "CMSC 531 - 3D Computer Vision for Robot Navigation\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to graduate students in computer science or related discipline or to students accepted into the five-year accelerated program in computer science.\nDescription: The course focuses on recent advancements in 3D robotic vision. It covers basic concepts and computational models of 3D sensing, robotic mapping, visual odometry, simultaneous localization and mapping, as well as 3D point data processing for robotic navigation. Students will acquire in-depth knowledge in robotic vision by completing a course project.\nTopics: 3d robotic vision, localization, mapping, robotic mapping, robotic navigation, visual odometry"
  },
  {
    "objectID": "listing.html#cmsc-591---topics-in-computer-science",
    "href": "listing.html#cmsc-591---topics-in-computer-science",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 591 - Topics in Computer Science",
    "text": "CMSC 591 - Topics in Computer Science\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: May be repeated for credit. Enrollment requires permission of the instructor. The course is open to students with graduate standing or those accepted into the accelerated BS to MS program in computer science. A study of selected topic(s) in computer science at the graduate level. See the Schedule of Classes for specific topics to be offered each semester.\nTopics: circuits, compact representations, complexity analysis, convex sets, limitations, linear algebra, loss function, machine learning, models, neural networks, optimization, quantum computation, quantum gates, quantum measurement, selected topics, tensor"
  },
  {
    "objectID": "listing.html#cmsc-601---convex-optimization",
    "href": "listing.html#cmsc-601---convex-optimization",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 601 - Convex Optimization",
    "text": "CMSC 601 - Convex Optimization\nSemester course. 3 hours.\nRestrictions: CMSC 501 or permission of instructor. Enrollment restricted to students with graduate standing in computer science or related discipline.\nDescription: A background in undergraduate-level linear algebra is assumed. Convex sets and functions. Convex optimization problems: Linear, quadratic, semi-definite and cone programs. Duality theory. Approximation algorithms for NP-complete integer optimization problems via semi-definite relaxations and rounding schemes. Algorithms for optimization, such as gradient descent, proximal descent, alternating directions method of multipliers, interior point methods.\nTopics: approximation, convex sets, duality theory, gradient descent, interior point methods, linear algebra, multipliers, optimization, proximal descent"
  },
  {
    "objectID": "listing.html#cmsc-602---operating-systems",
    "href": "listing.html#cmsc-602---operating-systems",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 602 - Operating Systems",
    "text": "CMSC 602 - Operating Systems\nSemester course. 3 hours.\nRestrictions: CMSC 502.\nDescription: A study of operating systems including those in multiprocessor and distributed environments. I/O programming, resource management (including processor and memory management), security and system performance evaluation.\nTopics: input/output, multiprocessor environments, operating systems, resources management, security, system performance"
  },
  {
    "objectID": "listing.html#cmsc-603---high-performance-distributed-systems",
    "href": "listing.html#cmsc-603---high-performance-distributed-systems",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 603 - High Performance Distributed Systems",
    "text": "CMSC 603 - High Performance Distributed Systems\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science or related discipline or those accepted into the accelerated BS to MS program in computer science.\nDescription: The course will assume undergraduate-level background in algorithms, data structures and parallel programming. Upon successful completion of this course, the student will be able to understand the concepts underlying distributed systems; analyze problems to identify performance bottlenecks, parallelization opportunities and concurrency issues in a distributed environment; create distributed and scalable implementations using multiple hosts/GPUs; design and implement algorithms using Hadoop, Spark and CUDA.\nTopics: algorithms, algorithms, concurrency, cuda, data structures, hadoop, parallel algorithms, performance bottlenecks, spark"
  },
  {
    "objectID": "listing.html#cmsc-605---advanced-computer-architecture",
    "href": "listing.html#cmsc-605---advanced-computer-architecture",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 605 - Advanced Computer Architecture",
    "text": "CMSC 605 - Advanced Computer Architecture\nSemester course. 3 hours.\nRestrictions: EGRE 426 or with permission of instructor.\nDescription: This course will focus on the design and analysis of high performance computer architectures. Topics investigated include pipeline design, superscalar computers, multiprocessors, memory systems, peripherals, interfacing techniques, networks, performance and software issues. Crosslisted as: EGRE 635.\nTopics: architecture, interfaces, memory systems, multiprocessor environments, networks, peripherals, pipeline design, software management, software quality, superscalar computers"
  },
  {
    "objectID": "listing.html#cmsc-608---advanced-database",
    "href": "listing.html#cmsc-608---advanced-database",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 608 - Advanced Database",
    "text": "CMSC 608 - Advanced Database\nSemester course. 3 hours.\nRestrictions: CMSC 508.\nDescription: Topics discussed include: handling of missing information; the relationship between relational calculus, relational algebra and SQL; logic databases; distributed databases; outer joins; and transaction processing. Emphasis is placed on theoretical issues involved in these topics. In addition students will work in teams to develop a working database application.\nTopics: calculus, logic, relational algebra, sql, teamwork"
  },
  {
    "objectID": "listing.html#cmsc-610---algorithmic-foundations-of-bioinformatics",
    "href": "listing.html#cmsc-610---algorithmic-foundations-of-bioinformatics",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 610 - Algorithmic Foundations of Bioinformatics",
    "text": "CMSC 610 - Algorithmic Foundations of Bioinformatics\nSemester course. 3 hours.\nRestrictions: Graduate student standing or acceptance into five-year accelerated program in computer science or related discipline such as bioinformatics.\nDescription: The purpose of the course is to teach algorithms for analyzing biological and medical data. The focus will be on understanding the inner workings of algorithms used in bioinformatics tools. Topic covered will include algorithms for assembling and searching biological sequences, finding patterns associated with disease, and exploring biological networks.\nTopics: algorithms, bioinformatics, biological sequences, data, networks, patterns"
  },
  {
    "objectID": "listing.html#cmsc-611---computer-multimedia",
    "href": "listing.html#cmsc-611---computer-multimedia",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 611 - Computer Multimedia",
    "text": "CMSC 611 - Computer Multimedia\nSemester course. 3 hours.\nRestrictions: permission of instructor.\nDescription: Study of computer multimedia techniques relating to images, sound, video and text. Emphasis on compression techniques and standard storage formats. This course is programming-intensive.\nTopics: compression, multimedia , storage formats"
  },
  {
    "objectID": "listing.html#cmsc-612---game-theory-and-security",
    "href": "listing.html#cmsc-612---game-theory-and-security",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 612 - Game Theory and Security",
    "text": "CMSC 612 - Game Theory and Security\nSemester course. 3 hours.\nRestrictions: CMSC 401. Enrollment is restricted to students with graduate standing in computer science or those accepted into the accelerated BS to MS program in computer science.\nDescription: The course will provide an introduction to game theory and mechanism design concepts. Lectures cover topics such as introduction of games, equilibrium concepts, computation of game-theoretic solution concepts, mechanism, and issues in game theory and mechanism design.\nTopics: abstract complexity, design, equilibrium concepts, game theory, security, universal programs, unsolvability"
  },
  {
    "objectID": "listing.html#cmsc-615---cryptocurrency-and-blockchain-techniques",
    "href": "listing.html#cmsc-615---cryptocurrency-and-blockchain-techniques",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 615 - Cryptocurrency and Blockchain Techniques",
    "text": "CMSC 615 - Cryptocurrency and Blockchain Techniques\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science or a related discipline.\nDescription: The course will assume undergraduate-level background in algorithms, data structures and programming. Upon successful completion of this course, the student will be able to understand the major concepts about cryptocurrency and blockchain techniques; be familiar with major blockchain applications as well as real-world issues; understand the underlying consensus mechanisms in the Bitcoin system and other alternative cryptocurrency systems; analyze the security of Nakamoto consensus; understand, write and execute smart contracts using an Ethereum-like platform.\nTopics: algorithms, altcoins, analysis, anonymity, bitcoin, bitcoin, blockchain, blockchain, consensus protocols, cryptocurrency, cryptocurrency, data structures, distributed systems, etherum, legal, nakamoto consensus, nakamoto’s blockchain, programming, real-world applications, security, security, sidechains"
  },
  {
    "objectID": "listing.html#cmsc-618---database-and-application-security",
    "href": "listing.html#cmsc-618---database-and-application-security",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 618 - Database and Application Security",
    "text": "CMSC 618 - Database and Application Security\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Theory and practice of database and software security focusing in particular on some common database software security risks and on the identification of potential threats and vulnerabilities. Crosslisted as: CISS 618.\nTopics: database, security, software management"
  },
  {
    "objectID": "listing.html#cmsc-619---the-design-and-specifications-of-user-interfaces",
    "href": "listing.html#cmsc-619---the-design-and-specifications-of-user-interfaces",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 619 - The Design and Specifications of User Interfaces",
    "text": "CMSC 619 - The Design and Specifications of User Interfaces\nSemester course. 3 hours.\nRestrictions: Graduate standing and permission of instructor.\nDescription: Requires knowledge of first order predicate calculus and context-free languages. Focuses on human-computer interface design principles and methodology and formal specifications of user interfaces.\nTopics: calculus, design, interfaces, languages, user interface"
  },
  {
    "objectID": "listing.html#cmsc-620---applied-cryptography",
    "href": "listing.html#cmsc-620---applied-cryptography",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 620 - Applied Cryptography",
    "text": "CMSC 620 - Applied Cryptography\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Provides a comprehensive survey of modern cryptography. Included are techniques of enciphering and deciphering messages using cryptographic algorithms, block ciphers and block cipher modes, hash functions and message authentication codes, public key cryptography and digital signatures, and steganography. Crosslisted as: CISS 624.\nTopics: authentication, block cipher, cryptographic systems, deciphering, digital signatures, enciphering, hash functions, public key encryption, steganography"
  },
  {
    "objectID": "listing.html#cmsc-621---theory-of-computation",
    "href": "listing.html#cmsc-621---theory-of-computation",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 621 - Theory of Computation",
    "text": "CMSC 621 - Theory of Computation\nSemester course. 3 hours.\nRestrictions: graduate student standing and permission of instructor.\nDescription: Discussion of the complexity and computability of problems and programs. Topics will include unsolvability, universal programs and abstract complexity.\nTopics:"
  },
  {
    "objectID": "listing.html#cmsc-622---network-and-system-security",
    "href": "listing.html#cmsc-622---network-and-system-security",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 622 - Network and System Security",
    "text": "CMSC 622 - Network and System Security\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Studies the principles of network security and system security. Included are topics relating to application layer security, TCP layer security, network layer security and link layer security and the use of access control, intrusion detection, intrusion prevention and other related tools.\nTopics: access control, assumption, computer security, concepts, intrustion detection, network security, networks, networks, presentation, security, security, security paper survey, system security, tcp layer security, technical paper reading, trust"
  },
  {
    "objectID": "listing.html#cmsc-623---cloud-computing",
    "href": "listing.html#cmsc-623---cloud-computing",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 623 - Cloud Computing",
    "text": "CMSC 623 - Cloud Computing\nSemester course. 3 hours.\nRestrictions: (none)\nDescription: Provides an introduction to cloud computing architecture and cloud computing security. The course covers the basic concepts of cloud computing, including memory virtualization, device virtualization and related security problems in cloud computing.\nTopics: cloud computing, device virtualization, memory virtualization, security"
  },
  {
    "objectID": "listing.html#cmsc-624---software-quality-assurance",
    "href": "listing.html#cmsc-624---software-quality-assurance",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 624 - Software Quality Assurance",
    "text": "CMSC 624 - Software Quality Assurance\nSemester course. 3 hours.\nRestrictions: a course in software engineering and graduate standing in computer science, or permission of instructor.\nDescription: A study of issues that affect the quality of software and of methodology to assure that software products are of the desired quality. This also includes issues in assessing product quality as well as the process by which the software is produced. Topics include various methodologies, standards, metrics and tools.\nTopics: metrics, software quality"
  },
  {
    "objectID": "listing.html#cmsc-625---advanced-software-analysis-testing-and-verification",
    "href": "listing.html#cmsc-625---advanced-software-analysis-testing-and-verification",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 625 - Advanced Software Analysis, Testing and Verification",
    "text": "CMSC 625 - Advanced Software Analysis, Testing and Verification\nSemester course. 3 hours.\nRestrictions: CMSC 525.\nDescription: Studies the concepts and techniques used in the analysis of software and the derivation of test data. Focuses on software metrics and reliability; construction of tools to aid software analysis and testing. Requires students to review seminal and current papers from the literature, and lead their discussion in class.\nTopics: analysis, current literature, metrics, software management, testing"
  },
  {
    "objectID": "listing.html#cmsc-628---mobile-networks-applications-modeling-and-analysis",
    "href": "listing.html#cmsc-628---mobile-networks-applications-modeling-and-analysis",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 628 - Mobile Networks: Applications, Modeling and Analysis",
    "text": "CMSC 628 - Mobile Networks: Applications, Modeling and Analysis\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science or a related discipline.\nDescription: The course will assume undergraduate-level background in algorithms, data structures, programming and networks. Upon successful completion of this course, the student will be able to understand the major concepts about mobile networks such as device-to-device communication technologies, mobility models and coverage; be familiar with various mobile network types (e.g., mobile social networks, delay tolerant networks, overlay networks, vehicular networks and cellular networks) and devices (e.g., smartphones, femtocells, WiFi), learn how to model mobile networks with stochastic processes and real datasets; be able to use different networking simulators; and understand various routing algorithms and analyze their behavior.\nTopics: algorithms, analysis, analysis, communication systems, communication systems, data, data driven stimulations, data structures, evaluation, mobile networks, mobile networks, mobility models, modeling, network simulators, networks, networks, programming, routing"
  },
  {
    "objectID": "listing.html#cmsc-630---image-analysis",
    "href": "listing.html#cmsc-630---image-analysis",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 630 - Image Analysis",
    "text": "CMSC 630 - Image Analysis\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in engineering or science or by permission of the instructor.\nDescription: Introduces theoretical and practical aspects of computer vision for image processing and understanding. It provides a comprehensive walkthrough from basics of image preparation to using computational intelligence tools for knowledge discovery from images. The course will cover basics of image processing and computer vision, including image sampling and quantization, color, pixel-based operations, image filtering, morphological image processing, and image transforms; information extraction including segmentation and feature extraction; pattern recognition for computer vision: classification, novelty and object detection, image understanding, learning from video streams, and tensor-based methods. Examples will include medical image analysis, object recognition in ground and aerial photographs and hyperspectral imaging.\nTopics: analysis, computers, feature extraction, feature selection, image, image, image analysis, image filtering, image processing, image processing, image segmentation, images, information extraction, machine learning, patterns, pixel-based operations, quantization, segmentation, segmentation, tensor"
  },
  {
    "objectID": "listing.html#cmsc-635---knowledge-discovery-and-data-mining",
    "href": "listing.html#cmsc-635---knowledge-discovery-and-data-mining",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 635 - Knowledge Discovery and Data Mining",
    "text": "CMSC 635 - Knowledge Discovery and Data Mining\nSemester course. 3 hours.\nRestrictions: CMSC 401 or corequisite: CMSC 501. Enrollment is restricted to students with graduate standing in computer science or a related discipline such as bioinformatics, or those accepted into the accelerated BS to MS program in computer science.\nDescription: Covers knowledge discovery and data mining concepts, tools and methods; provides hands-on experience based on a project involving analysis of large real-life data. Topics include the knowledge discovery process, data storage and representation, preprocessing algorithms for missing data imputation, feature selection and discretization; unsupervised learning algorithms for clustering and association mining; supervised learning algorithms including decision trees, Bayesian models and introduction to support vector machines and neural networks; ensemble learning; protocols and measures for validation of predictive models; and data security and privacy issues.\nTopics: algorithms, analysis, bayesian models, data, data, data imputation, data mining, data preprocessing, data security, data storage, decision trees, discovery process, discretization, ensemble learning, feature selection, neural networks, real-world applications, security, supervised data analysis, support vector machines, unsupervised data analysis"
  },
  {
    "objectID": "listing.html#cmsc-636---artificial-neural-networks-and-deep-learning",
    "href": "listing.html#cmsc-636---artificial-neural-networks-and-deep-learning",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 636 - Artificial Neural Networks and Deep Learning",
    "text": "CMSC 636 - Artificial Neural Networks and Deep Learning\nSemester course. 3 hours.\nRestrictions: Enrollment is restricted to students with graduate standing in computer science.\nDescription: The course will assume undergraduate-level background in programming, algorithms, linear algebra, calculus, statistics and probability. Topics ranging from fundamental learning rules, functional, cascade correlational, recurrent and gradient descent networks, to neocognitron, softmax, deep convolutional networks, autoencoders and pretrained deep learning (restricted Boltzmann machines). Students will be required to work in teams on a class paper.\nTopics: architecture, autoencoders, calculus, cascade correlational, chatgpt, convolutional neural networks, deep belief networks, deep convolutional networks, deep learning, deep neural networks, google, gradient descent, linear algebra, neocognitron, neural networks, neural networks, probability, recurrences, recurrences, restricted boltzmann machines, statistics"
  },
  {
    "objectID": "listing.html#cmsc-654---memory-and-malware-forensics",
    "href": "listing.html#cmsc-654---memory-and-malware-forensics",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 654 - Memory and Malware Forensics",
    "text": "CMSC 654 - Memory and Malware Forensics\nSemester course. 3 hours.\nRestrictions: CMSC 312. Enrollment is restricted to students with graduate standing in computer science or a related discipline, or those accepted into the accelerated BS to MS program in computer science.\nDescription: Students should have significant programming experience. This course provides foundation for memory and malware forensics, using the Volatility memory forensics framework, an open source toolkit written in Python. It is focused on investigation of the contents of volatile computer memory (RAM), to reveal hidden malware processes, network connections, clipboard contents, evidence of malware and other malicious evidence. The course will teach skills for analyzing internals of operating systems, such as Mac, Windows and Linux, by concentrating on data structures used by these operating systems.\nTopics: malicious evidence, malware forensics, memory, networks, operating systems, python, volatility memory forensics"
  },
  {
    "objectID": "listing.html#cmsc-678---statistical-learning-and-fuzzy-logic-algorithms",
    "href": "listing.html#cmsc-678---statistical-learning-and-fuzzy-logic-algorithms",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 678 - Statistical Learning and Fuzzy Logic Algorithms",
    "text": "CMSC 678 - Statistical Learning and Fuzzy Logic Algorithms\nSemester course. 3 hours.\nRestrictions: MATH/STAT 309 or MATH 310.\nDescription: The course considers two central problems in modern science and engineering: i) the problem of statistical learning from examples (empirical data) and ii) the problem of embedding existing human knowledge into workable mathematics. Topics include: examples of multivariate functional mapping, basics of classic classification and regression, support vector machines as a learning paradigm based on structural risk minimization, fuzzy logic algorithms, basics of multi-class classification over high dimensional spaces, curve and surface fittings, multivariate function approximation and nonlinear optimization; fuzzy logic systems; crisp and fuzzy sets, linguistic variables, fuzzy set theory; if-then rules, fuzzy interference, fuzzification and defuzzification, neuro-fuzzy paradigms.\nTopics: classification, functional mapping, functions, fuzzification, fuzzy logic algorithms, linguistic variables, multi-class classification, neuro-fuzzy paradigms, nonlinear optimization, optimization, regression, statistical learning, statistics, support vector machines"
  },
  {
    "objectID": "listing.html#cmsc-691---special-topics-in-computer-science",
    "href": "listing.html#cmsc-691---special-topics-in-computer-science",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 691 - Special Topics in Computer Science",
    "text": "CMSC 691 - Special Topics in Computer Science\nSemester course. 3 hours.\nRestrictions: at least one graduate-level computer science course pertaining to the topic area and permission of instructor.\nDescription: An advanced study of selected topic(s) in computer science at the graduate level. See the Schedule of Classes for specific topics to be offered each semester.\nTopics: selected topics"
  },
  {
    "objectID": "listing.html#cmsc-692---independent-study",
    "href": "listing.html#cmsc-692---independent-study",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 692 - Independent Study",
    "text": "CMSC 692 - Independent Study\nSemester course. 3 hours.\nRestrictions: Enrollment restricted to students with graduate standing and consent of instructor.\nDescription: Independent study done under the supervision of a faculty member. The student must identify a faculty member willing to supervise the research and submit a proposal for approval by the computer science graduate committee no later than the 10th week of the prior semester. A written report and an oral presentation are required upon completion of the research project. Graded as Pass/Fail.\nTopics: independent study"
  },
  {
    "objectID": "listing.html#cmsc-697---directed-research",
    "href": "listing.html#cmsc-697---directed-research",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 697 - Directed Research",
    "text": "CMSC 697 - Directed Research\nSemester course. 5 hours.\nRestrictions: (none)\nDescription: May be repeated for credit. A total of three credits may be used to fulfill the MS in Computer Science thesis requirement. Independent research culminating in the writing of the required thesis or dissertation. The student must identify a faculty member willing to supervise the research and submit a proposal to the computer science graduate committee no later than the 10th week of the prior semester. This proposal must be approved before the student can register for the course. Graded as S/U/F.\nTopics: research"
  },
  {
    "objectID": "listing.html#cmsc-701---research-methods",
    "href": "listing.html#cmsc-701---research-methods",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 701 - Research Methods",
    "text": "CMSC 701 - Research Methods\nSemester course. 3 hours.\nRestrictions: PHD standing or permission of instructor.\nDescription: Covers the principles of conducting a research project, reporting the findings in the form of a journal paper and promoting the research through public presentations. Students learn to write grant proposals and practice reviewing research papers and grant proposals. The main emphasis of the course is writing a paper and a grant proposal in a format compliant with NSF, NIH or DoD guidelines.\nTopics: grant proposal, research"
  },
  {
    "objectID": "listing.html#cmsc-702---computer-science-seminar",
    "href": "listing.html#cmsc-702---computer-science-seminar",
    "title": "Full Listing of CMSC Courses and Titles",
    "section": "CMSC 702 - Computer Science Seminar",
    "text": "CMSC 702 - Computer Science Seminar\nSemester course. 1 hour.\nRestrictions: Enrollment restricted to students in the doctoral program in computer science. Students will attend a week\nDescription: Students will attend a weekly research seminar in which the topic and speaker will change each week in order to cover a broad range of subjects at the forefront of computer science research. Students will have to present and to write a report on at least one seminar presented by other speakers. The objective is to expose students to research topics and scholars in the field of computer science as well as to provide them experience in delivering and critiquing seminar talks. Graded as satisfactory/unsatisfactory.\nTopics: research, seminar"
  },
  {
    "objectID": "scanner.html",
    "href": "scanner.html",
    "title": "Building this web site",
    "section": "",
    "text": "Quarto is used to build this web site.\nA list of CMSC courses was downloaded from the campus bulletin. The list was stored into a google sheet and signficantly cleaned.\nTwo tabs are significant in the google sheet:\nNot every instructor included a custom course description or topical outline in their Spring 2023 syllabus. In general the topics are all treated as comparable, but they are distinquishable using the Source column in the topics tab, so we can analysis their differences.\nThe code in the sections below below generates this website using the course data in the google sheet. The construction of the web site is a 2-step process:\nThis website is posted using github pages. The site is rendered to the /docs folder within the github repo. GITHUB create a corresponding web site on github.io.\nThe code sections below demonstrate how quarto can leverage google sheets to generate and publish a static website."
  },
  {
    "objectID": "scanner.html#a-list-of-columns-in-the-cmsc-course-data-tab",
    "href": "scanner.html#a-list-of-columns-in-the-cmsc-course-data-tab",
    "title": "Building this web site",
    "section": "a list of columns in the CMSC-course-data tab",
    "text": "a list of columns in the CMSC-course-data tab\n\n\nHere is a list of columns:‘Subject’, ‘Number’, ‘CourseId’, ‘idx’, ‘Title’, ‘Hours’, ‘foc’, ‘bscs’, ‘bscs-cyber’, ‘bscs-data’, ‘bscs-sftengr’, ‘postbac’, ‘Catalog’, ‘Catalog Description’, ‘Restrictions’, ‘Isolated Description’."
  },
  {
    "objectID": "scanner.html#cmsc-courses-in-the-bulletin",
    "href": "scanner.html#cmsc-courses-in-the-bulletin",
    "title": "Building this web site",
    "section": "CMSC Courses in the Bulletin",
    "text": "CMSC Courses in the Bulletin\n\n\nTable 1 presents a list of CMSC courses in the bulletin. There are 83 courses in the bulletin.\n\n\n\n\nTable 1: ?(caption)\n\n\n\n\n(a) Table 1: List of courses\n\n\nCourseId\nTitle\n\n\n\n\nCMSC 101\nIntroduction to Computer Science\n\n\nCMSC 144\nCode Beats With Python\n\n\nCMSC 191\nTopics in Computer Science\n\n\nCMSC 210\nComputers and Programming\n\n\nCMSC 235\nComputing and Data Ethics\n\n\nCMSC 245\nIntroduction to Programming Using C++\n\n\nCMSC 246\nAdvanced Programming Using C++\n\n\nCMSC 254\nIntroduction to Problem-solving\n\n\nCMSC 255\nIntroduction to Programming\n\n\nCMSC 256\nData Structures and Object Oriented Programming\n\n\nCMSC 257\nComputer Systems\n\n\nCMSC 302\nIntroduction to Discrete Structures\n\n\nCMSC 303\nIntroduction to the Theory of Computation\n\n\nCMSC 311\nComputer Organization\n\n\nCMSC 312\nIntroduction to Operating Systems\n\n\nCMSC 320\nSoftware Engineering and Web Development\n\n\nCMSC 330\nData Science Skills\n\n\nCMSC 340\nCybersecurity Skills\n\n\nCMSC 355\nFundamentals of Software Engineering\n\n\nCMSC 391\nTopics in Computer Science\n\n\nCMSC 401\nAlgorithm Analysis with Advanced Data Structures\n\n\nCMSC 403\nProgramming Languages\n\n\nCMSC 404\nCompiler Construction\n\n\nCMSC 409\nArtificial Intelligence\n\n\nCMSC 410\nIntroduction to Quantum Computing\n\n\nCMSC 411\nComputer Graphics\n\n\nCMSC 412\nSocial Network Analysis and Cybersecurity Risks\n\n\nCMSC 413\nIntroduction to Cybersecurity\n\n\nCMSC 414\nComputer and Network Security\n\n\nCMSC 415\nIntroduction to Cryptography\n\n\nCMSC 416\nIntroduction to Natural Language Processing\n\n\nCMSC 420\nSoftware Project Management\n\n\nCMSC 425\nIntroduction to Software Analysis and Testing\n\n\nCMSC 428\nMobile Programming: iOS\n\n\nCMSC 435\nIntroduction to Data Science\n\n\nCMSC 440\nData Communication and Networking\n\n\nCMSC 441\nSenior Design Studio I (Laboratory/Project Time)\n\n\nCMSC 442\nSenior Design Studio II (Laboratory/Project Time)\n\n\nCMSC 451\nSenior Project I\n\n\nCMSC 452\nSenior Project II\n\n\nCMSC 455\nSoftware as a Service\n\n\nCMSC 475\nDesign and Implementation of User Interfaces\n\n\nCMSC 491\nTopics in Computer Science\n\n\nCMSC 492\nIndependent Study\n\n\nCMSC 501\nAdvanced Algorithms\n\n\nCMSC 502\nParallel Algorithms\n\n\nCMSC 506\nComputer Networks and Communications\n\n\nCMSC 508\nDatabase Theory\n\n\nCMSC 510\nRegularization Methods for Machine Learning\n\n\nCMSC 512\nAdvanced Social Network Analysis and Security\n\n\nCMSC 516\nAdvanced Natural Language Processing\n\n\nCMSC 525\nIntroduction to Software Analysis, Testing and Verification\n\n\nCMSC 526\nTheory of Programming Languages\n\n\nCMSC 531\n3D Computer Vision for Robot Navigation\n\n\nCMSC 591\nTopics in Computer Science\n\n\nCMSC 601\nConvex Optimization\n\n\nCMSC 602\nOperating Systems\n\n\nCMSC 603\nHigh Performance Distributed Systems\n\n\nCMSC 605\nAdvanced Computer Architecture\n\n\nCMSC 608\nAdvanced Database\n\n\nCMSC 610\nAlgorithmic Foundations of Bioinformatics\n\n\nCMSC 611\nComputer Multimedia\n\n\nCMSC 612\nGame Theory and Security\n\n\nCMSC 615\nCryptocurrency and Blockchain Techniques\n\n\nCMSC 618\nDatabase and Application Security\n\n\nCMSC 619\nThe Design and Specifications of User Interfaces\n\n\nCMSC 620\nApplied Cryptography\n\n\nCMSC 621\nTheory of Computation\n\n\nCMSC 622\nNetwork and System Security\n\n\nCMSC 623\nCloud Computing\n\n\nCMSC 624\nSoftware Quality Assurance\n\n\nCMSC 625\nAdvanced Software Analysis, Testing and Verification\n\n\nCMSC 628\nMobile Networks: Applications, Modeling and Analysis\n\n\nCMSC 630\nImage Analysis\n\n\nCMSC 635\nKnowledge Discovery and Data Mining\n\n\nCMSC 636\nArtificial Neural Networks and Deep Learning\n\n\nCMSC 654\nMemory and Malware Forensics\n\n\nCMSC 678\nStatistical Learning and Fuzzy Logic Algorithms\n\n\nCMSC 691\nSpecial Topics in Computer Science\n\n\nCMSC 692\nIndependent Study\n\n\nCMSC 697\nDirected Research\n\n\nCMSC 701\nResearch Methods\n\n\nCMSC 702\nComputer Science Seminar"
  },
  {
    "objectID": "topics.html",
    "href": "topics.html",
    "title": "CMSC topics and courses",
    "section": "",
    "text": "Adjusted Topic\nCourse\n\n\n\n\n3d robotic vision\nCMSC 531\n\n\nLegal implications\nCMSC 235\n\n\nabstract complexity\nCMSC 256, CMSC 612\n\n\naccess control\nCMSC 622\n\n\naddressing modes\nCMSC 311\n\n\nadministration\nCMSC 508\n\n\nadvanced testing strategies\nCMSC 425, CMSC 525\n\n\nagile\nCMSC 355, CMSC 452\n\n\najax\nCMSC 508\n\n\nalgebra\nCMSC 302\n\n\nalgorithms\nCMSC 255, CMSC 256, CMSC 401, CMSC 403, CMSC 501, CMSC 510, CMSC 512, CMSC 603, CMSC 610, CMSC 615, CMSC 628, CMSC 635\n\n\naltcoins\nCMSC 615\n\n\nanalysis\nCMSC 254, CMSC 330, CMSC 401, CMSC 425, CMSC 435, CMSC 506, CMSC 512, CMSC 525, CMSC 615, CMSC 625, CMSC 628, CMSC 630, CMSC 635\n\n\nanonymity\nCMSC 615\n\n\napi\nCMSC 455\n\n\napplication layer attacks\nCMSC 414\n\n\napplications\nCMSC 455\n\n\napproximation\nCMSC 501, CMSC 601\n\n\narchitecture\nCMSC 311, CMSC 414, CMSC 440, CMSC 605, CMSC 636\n\n\narrays\nCMSC 245, CMSC 254, CMSC 255, CMSC 257\n\n\nascii\nCMSC 101\n\n\nassembly language\nCMSC 311\n\n\nassumption\nCMSC 622\n\n\nauthentication\nCMSC 415, CMSC 620\n\n\nautoencoders\nCMSC 636\n\n\nautomata\nCMSC 303\n\n\nautomation\nCMSC 416, CMSC 516\n\n\nb-trees\nCMSC 401\n\n\nbasic concepts of computer systems\nCMSC 254\n\n\nbasic searching\nCMSC 246, CMSC 256\n\n\nbasic sorting\nCMSC 246\n\n\nbasics of computer organiation\nCMSC 101\n\n\nbayesian models\nCMSC 635\n\n\nbinary trees\nCMSC 246, CMSC 256\n\n\nbioinformatics\nCMSC 610\n\n\nbiological sequences\nCMSC 610\n\n\nbit/bye operations\nCMSC 257\n\n\nbitcoin\nCMSC 615\n\n\nblock cipher\nCMSC 620\n\n\nblockchain\nCMSC 615\n\n\nbrainstorming\nCMSC 441, CMSC 442\n\n\nc++ syntax\nCMSC 245\n\n\ncache memories\nCMSC 311\n\n\ncalculus\nCMSC 510, CMSC 608, CMSC 619, CMSC 636\n\n\ncalling functions\nCMSC 210\n\n\ncapstone\nCMSC 441, CMSC 451\n\n\ncascade correlational\nCMSC 636\n\n\ncentrality\nCMSC 412\n\n\nchatgpt\nCMSC 636\n\n\nchord progression\nCMSC 144\n\n\nci/cd\nCMSC 355, CMSC 452\n\n\ncircuits\nCMSC 591\n\n\nclasses\nCMSC 246, CMSC 255, CMSC 256\n\n\nclassification\nCMSC 678\n\n\nclient-server model\nCMSC 440\n\n\ncloud computing\nCMSC 455, CMSC 623\n\n\nco-routines\nCMSC 403\n\n\ncode management\nCMSC 355, CMSC 404, CMSC 452\n\n\ncommand languages\nCMSC 312\n\n\ncommunication systems\nCMSC 506, CMSC 628\n\n\ncommunity structure\nCMSC 412\n\n\ncompact representations\nCMSC 591\n\n\ncompilers\nCMSC 404\n\n\ncomplexity analysis\nCMSC 303, CMSC 401, CMSC 591\n\n\ncompression\nCMSC 611\n\n\ncomputability theory\nCMSC 303\n\n\ncomputational geometry\nCMSC 501\n\n\ncomputer networks\nCMSC 414, CMSC 440, CMSC 506\n\n\ncomputer security\nCMSC 414, CMSC 622\n\n\ncomputer systems design\nCMSC 312, CMSC 414, CMSC 416\n\n\ncomputers\nCMSC 255, CMSC 311, CMSC 630\n\n\nconcepts\nCMSC 622\n\n\nconcolic hybrid analysis\nCMSC 425, CMSC 525\n\n\nconcurrency\nCMSC 312, CMSC 502, CMSC 603\n\n\nconditional execution\nCMSC 210\n\n\nconfiguration\nCMSC 508\n\n\nconsensus protocols\nCMSC 615\n\n\ncontainerization\nCMSC 355\n\n\ncontext-free grammars\nCMSC 303, CMSC 416, CMSC 516\n\n\ncontrol flow\nCMSC 425, CMSC 525\n\n\ncontrol structures\nCMSC 210, CMSC 245, CMSC 254, CMSC 255\n\n\nconvex sets\nCMSC 591, CMSC 601\n\n\nconvolutional neural networks\nCMSC 636\n\n\ncounting\nCMSC 302\n\n\ncoverage-driven systematic software testing\nCMSC 425, CMSC 525\n\n\ncritical thinking\nCMSC 210, CMSC 254\n\n\ncryptocurrency\nCMSC 615\n\n\ncryptographic systems\nCMSC 340, CMSC 414, CMSC 415, CMSC 620\n\n\ncuda\nCMSC 603\n\n\ncurrent literature\nCMSC 625\n\n\ncursors\nCMSC 508\n\n\ncurve and surface approximations\nCMSC 411\n\n\ncyber defense\nCMSC 413\n\n\ncyber ethics\nCMSC 413\n\n\ncyber forensics\nCMSC 413\n\n\ncybersecurity\nCMSC 340, CMSC 413\n\n\ndata\nCMSC 254, CMSC 311, CMSC 330, CMSC 403, CMSC 435, CMSC 440, CMSC 525, CMSC 610, CMSC 628, CMSC 635\n\n\ndata\nCMSC 508\n\n\ndata analysis\nCMSC 435, CMSC 510\n\n\ndata driven stimulations\nCMSC 628\n\n\ndata flow\nCMSC 425\n\n\ndata imputation\nCMSC 635\n\n\ndata management\nCMSC 330\n\n\ndata manipulation\nCMSC 330\n\n\ndata mining\nCMSC 635\n\n\ndata paths\nCMSC 311\n\n\ndata preprocessing\nCMSC 635\n\n\ndata quality\nCMSC 330, CMSC 435\n\n\ndata security\nCMSC 635\n\n\ndata storage\nCMSC 508, CMSC 635\n\n\ndata structures\nCMSC 256, CMSC 401, CMSC 403, CMSC 411, CMSC 435, CMSC 501, CMSC 603, CMSC 615, CMSC 628\n\n\ndata types\nCMSC 311\n\n\ndata-flow\nCMSC 425, CMSC 525\n\n\ndatabase\nCMSC 435, CMSC 508, CMSC 618\n\n\ndatabase installation\nCMSC 508\n\n\ndebugging\nCMSC 210, CMSC 257, CMSC 312\n\n\ndecentralized search\nCMSC 412\n\n\ndeciphering\nCMSC 620\n\n\ndecision structures\nCMSC 254\n\n\ndecision trees\nCMSC 635\n\n\ndeep belief networks\nCMSC 636\n\n\ndeep convolutional networks\nCMSC 636\n\n\ndeep learning\nCMSC 636\n\n\ndeep neural networks\nCMSC 636\n\n\ndensity operators\nCMSC 410\n\n\ndeques\nCMSC 256\n\n\ndesign\nCMSC 320, CMSC 355, CMSC 401, CMSC 403, CMSC 441, CMSC 475, CMSC 506, CMSC 508, CMSC 612, CMSC 619\n\n\ndevelopment\nCMSC 320\n\n\ndevice virtualization\nCMSC 623\n\n\ndictionaries\nCMSC 210, CMSC 254\n\n\ndigital logic structures\nCMSC 311\n\n\ndigital signatures\nCMSC 415, CMSC 620\n\n\ndiscovery process\nCMSC 635\n\n\ndiscrete math\nCMSC 303\n\n\ndiscretization\nCMSC 635\n\n\ndistributed systems\nCMSC 312, CMSC 615\n\n\ndivide and conquer approach\nCMSC 401\n\n\ndns\nCMSC 440\n\n\ndns\nCMSC 440\n\n\ndocumentation\nCMSC 320\n\n\nduality theory\nCMSC 601\n\n\ndynamic programming\nCMSC 401, CMSC 425, CMSC 525\n\n\ne-mail\nCMSC 440\n\n\nenciphering\nCMSC 620\n\n\nend-users\nCMSC 475\n\n\nensemble learning\nCMSC 635\n\n\nentities\nCMSC 508\n\n\nentity-relationship diagrams\nCMSC 508\n\n\nentrepreneurship\nCMSC 451, CMSC 452\n\n\nequilibrium concepts\nCMSC 612\n\n\nerror control\nCMSC 506\n\n\netherum\nCMSC 615\n\n\nethical aspects of technology\nCMSC 101\n\n\nethics\nCMSC 235, CMSC 340, CMSC 451\n\n\nevaluation\nCMSC 628\n\n\nexceptions\nCMSC 256\n\n\nexpert systems\nCMSC 409\n\n\nexpressions\nCMSC 210\n\n\nfeature extraction\nCMSC 630\n\n\nfeature selection\nCMSC 630, CMSC 635\n\n\nfile management\nCMSC 312\n\n\nfiles\nCMSC 210, CMSC 246, CMSC 257\n\n\nfinal project\nCMSC 441, CMSC 442, CMSC 451, CMSC 452\n\n\nfinite automata\nCMSC 303\n\n\nfirewalls\nCMSC 340, CMSC 414\n\n\nflow charting\nCMSC 210, CMSC 254\n\n\nflow control\nCMSC 440, CMSC 525\n\n\nforks and threads\nCMSC 257\n\n\nfunctional mapping\nCMSC 678\n\n\nfunctional programming\nCMSC 403, CMSC 508\n\n\nfunctions\nCMSC 144, CMSC 245, CMSC 254, CMSC 302, CMSC 508, CMSC 678\n\n\nfuzzification\nCMSC 678\n\n\nfuzzy logic algorithms\nCMSC 678\n\n\ngame playing\nCMSC 409\n\n\ngame theory\nCMSC 612\n\n\ngathering\nCMSC 320\n\n\ngenerics\nCMSC 256\n\n\ngithub\nCMSC 355\n\n\ngoogle\nCMSC 636\n\n\ngradient descent\nCMSC 601, CMSC 636\n\n\ngrant proposal\nCMSC 701\n\n\ngraph algorithms\nCMSC 401, CMSC 501, CMSC 510\n\n\ngraphic development\nCMSC 411\n\n\ngraphs\nCMSC 256, CMSC 302, CMSC 401, CMSC 525\n\n\ngreedy approach\nCMSC 401\n\n\nhadoop\nCMSC 603\n\n\nharmony\nCMSC 144\n\n\nhash functions\nCMSC 256, CMSC 620\n\n\nhashing\nCMSC 401\n\n\nheight-balanced trees\nCMSC 401\n\n\nhttp application\nCMSC 440\n\n\nide\nCMSC 255\n\n\nimage\nCMSC 630\n\n\nimage analysis\nCMSC 630\n\n\nimage filtering\nCMSC 630\n\n\nimage processing\nCMSC 630\n\n\nimage segmentation\nCMSC 630\n\n\nimages\nCMSC 630\n\n\nindependent study\nCMSC 492, CMSC 692\n\n\nindexes\nCMSC 508\n\n\ninduction\nCMSC 302\n\n\ninfix\nCMSC 403\n\n\ninformation extraction\nCMSC 630\n\n\ninformation propagation\nCMSC 412\n\n\ninformation security\nCMSC 340\n\n\ninheritance\nCMSC 246, CMSC 256\n\n\ninput/output\nCMSC 255, CMSC 257, CMSC 311, CMSC 312, CMSC 602\n\n\ninstruction set architecture\nCMSC 311\n\n\ninterfaces\nCMSC 256, CMSC 475, CMSC 502, CMSC 605, CMSC 619\n\n\ninterior point methods\nCMSC 601\n\n\nintermediate languages\nCMSC 404\n\n\ninternet\nCMSC 414, CMSC 440\n\n\nintrustion detection\nCMSC 622\n\n\nios\nCMSC 428\n\n\niterators\nCMSC 256\n\n\njava\nCMSC 255\n\n\njob scheduling\nCMSC 312\n\n\nknowledge representatives\nCMSC 409\n\n\nlanguages\nCMSC 403, CMSC 404, CMSC 526, CMSC 619\n\n\nlegal\nCMSC 615\n\n\nlexical analysis\nCMSC 404\n\n\nlimitations\nCMSC 425, CMSC 525, CMSC 591\n\n\nlinear algebra\nCMSC 510, CMSC 591, CMSC 601, CMSC 636\n\n\nlinguistic variables\nCMSC 678\n\n\nlink analysis\nCMSC 412\n\n\nlink layer attacks\nCMSC 414\n\n\nlinked lists\nCMSC 246, CMSC 256, CMSC 401\n\n\nlists\nCMSC 144, CMSC 210, CMSC 254, CMSC 256, CMSC 403\n\n\nlocal and wide area networks\nCMSC 506\n\n\nlocalization\nCMSC 531\n\n\nlogic\nCMSC 302, CMSC 303, CMSC 311, CMSC 340, CMSC 526, CMSC 608\n\n\nloops and iterations\nCMSC 210\n\n\nloss function\nCMSC 591\n\n\nmachine language\nCMSC 311\n\n\nmachine learning\nCMSC 409, CMSC 416, CMSC 510, CMSC 516, CMSC 591, CMSC 630\n\n\nmachine-level representation\nCMSC 257\n\n\nmail applications\nCMSC 440\n\n\nmaintainability\nCMSC 452\n\n\nmalicious evidence\nCMSC 654\n\n\nmalware forensics\nCMSC 654\n\n\nmapping\nCMSC 531\n\n\nmatrices\nCMSC 302\n\n\nmeasurement\nCMSC 410\n\n\nmelody\nCMSC 144\n\n\nmemory\nCMSC 654\n\n\nmemory hierarchy\nCMSC 311\n\n\nmemory management\nCMSC 257, CMSC 312\n\n\nmemory systems\nCMSC 605\n\n\nmemory virtualization\nCMSC 623\n\n\nmethods\nCMSC 255\n\n\nmetrics\nCMSC 624, CMSC 625\n\n\nmobile networks\nCMSC 628\n\n\nmobility models\nCMSC 628\n\n\nmodel-theoretic semtances\nCMSC 526\n\n\nmodeling\nCMSC 254, CMSC 628\n\n\nmodels\nCMSC 591\n\n\nmodularization\nCMSC 144, CMSC 254\n\n\nmulti-class classification\nCMSC 678\n\n\nmultimedia\nCMSC 611\n\n\nmultipliers\nCMSC 601\n\n\nmultiprocessor environments\nCMSC 602, CMSC 605\n\n\nmysql\nCMSC 508\n\n\nnakamoto consensus\nCMSC 615\n\n\nnakamoto’s blockchain\nCMSC 615\n\n\nnatural language\nCMSC 409, CMSC 416, CMSC 510, CMSC 516\n\n\nneocognitron\nCMSC 636\n\n\nnetwork edge\nCMSC 440\n\n\nnetwork models\nCMSC 412, CMSC 440\n\n\nnetwork penetration\nCMSC 414\n\n\nnetwork programming\nCMSC 210\n\n\nnetwork programming using sockets\nCMSC 257\n\n\nnetwork security\nCMSC 622\n\n\nnetwork simulators\nCMSC 628\n\n\nnetworks\nCMSC 412, CMSC 414, CMSC 440, CMSC 502, CMSC 512, CMSC 605, CMSC 610, CMSC 622, CMSC 628, CMSC 654\n\n\nnetworks vulnerability\nCMSC 440\n\n\nneural networks\nCMSC 591, CMSC 635, CMSC 636\n\n\nneuro-fuzzy paradigms\nCMSC 678\n\n\nnlp algorithms\nCMSC 516\n\n\nno-go theorems\nCMSC 410\n\n\nnonlinear optimization\nCMSC 678\n\n\nnormalization\nCMSC 508\n\n\nnumeric representation\nCMSC 101\n\n\nobject oriented programming\nCMSC 256, CMSC 403\n\n\nobjects\nCMSC 246, CMSC 255, CMSC 256, CMSC 401, CMSC 428\n\n\noperating systems\nCMSC 312, CMSC 602, CMSC 654\n\n\noptimization\nCMSC 257, CMSC 404, CMSC 501, CMSC 510, CMSC 591, CMSC 601, CMSC 678\n\n\norchestration\nCMSC 144\n\n\norganization\nCMSC 311\n\n\nosi reference model\nCMSC 506\n\n\nosns\nCMSC 412\n\n\nparallel algorithms\nCMSC 502, CMSC 603\n\n\nparameters\nCMSC 144\n\n\nparsing\nCMSC 403\n\n\npatterns\nCMSC 355, CMSC 610, CMSC 630\n\n\nperformance bottlenecks\nCMSC 603\n\n\nperipherals\nCMSC 605\n\n\nphp\nCMSC 508\n\n\nphysical level issues\nCMSC 508\n\n\nphysical security\nCMSC 340\n\n\npipeline design\nCMSC 605\n\n\npipelining\nCMSC 440\n\n\npixel-based operations\nCMSC 630\n\n\npointers\nCMSC 257\n\n\npolymorphism\nCMSC 256\n\n\npostfix\nCMSC 403\n\n\npower-laws\nCMSC 412\n\n\nprecendence\nCMSC 403\n\n\npreferential attachment\nCMSC 412\n\n\nprefix\nCMSC 403\n\n\npresentation\nCMSC 622\n\n\nprobabilistic classifiers\nCMSC 416, CMSC 516\n\n\nprobability\nCMSC 302, CMSC 510, CMSC 636\n\n\nproblem solving\nCMSC 101, CMSC 210, CMSC 245, CMSC 254, CMSC 255, CMSC 409\n\n\nproblem spaces\nCMSC 409\n\n\nprocedures\nCMSC 508\n\n\nprocess scheduling\nCMSC 312\n\n\nprocessing code\nCMSC 254\n\n\nprogram analysis-driven testing\nCMSC 425, CMSC 525\n\n\nprogram design\nCMSC 210, CMSC 246\n\n\nprogram performance\nCMSC 257\n\n\nprogram testing\nCMSC 255\n\n\nprogramming\nCMSC 254, CMSC 615, CMSC 628\n\n\nprogramming in c\nCMSC 257\n\n\nprogramming logic\nCMSC 210\n\n\nproject planning\nCMSC 420, CMSC 441, CMSC 442, CMSC 451, CMSC 452\n\n\nprojections\nCMSC 411\n\n\nproofs\nCMSC 302\n\n\nprotocol layers\nCMSC 440\n\n\nprototyping\nCMSC 355\n\n\nproximal descent\nCMSC 601\n\n\npseudocode\nCMSC 210, CMSC 254\n\n\npublic key encryption\nCMSC 415, CMSC 620\n\n\npushdown automata\nCMSC 303\n\n\npython\nCMSC 654\n\n\npython syntax\nCMSC 254\n\n\nquality management\nCMSC 420\n\n\nquantization\nCMSC 630\n\n\nquantum algorithms\nCMSC 410\n\n\nquantum complexity\nCMSC 410\n\n\nquantum computation\nCMSC 591\n\n\nquantum computing\nCMSC 410\n\n\nquantum error correction\nCMSC 410\n\n\nquantum gates\nCMSC 591\n\n\nquantum machine learning\nCMSC 410\n\n\nquantum measurement\nCMSC 591\n\n\nqubit\nCMSC 410\n\n\nqueries\nCMSC 508\n\n\nqueues\nCMSC 246, CMSC 256\n\n\nrandom networks\nCMSC 412\n\n\nreal-world applications\nCMSC 416, CMSC 615, CMSC 635\n\n\nrecurrences\nCMSC 302, CMSC 401, CMSC 636\n\n\nrecursion\nCMSC 246, CMSC 256, CMSC 302\n\n\nregression\nCMSC 678\n\n\nregular expressions\nCMSC 210, CMSC 303, CMSC 416, CMSC 516\n\n\nregularization\nCMSC 510\n\n\nrelational algebra\nCMSC 508, CMSC 608\n\n\nrelational design\nCMSC 508\n\n\nrelations\nCMSC 302, CMSC 508\n\n\nreliable transmission\nCMSC 440\n\n\nrepetition\nCMSC 144, CMSC 210, CMSC 254\n\n\nrepetition structures\nCMSC 254\n\n\nrequirement engineering\nCMSC 355\n\n\nresearch\nCMSC 441, CMSC 697, CMSC 701, CMSC 702\n\n\nresearch resources\nCMSC 101\n\n\nresearching\nCMSC 442\n\n\nresources management\nCMSC 602\n\n\nrestricted boltzmann machines\nCMSC 636\n\n\nrhytum\nCMSC 144\n\n\nrisk management\nCMSC 340, CMSC 420\n\n\nrobotic mapping\nCMSC 531\n\n\nrobotic navigation\nCMSC 531\n\n\nrouting\nCMSC 628\n\n\nrun-time system management\nCMSC 404\n\n\nscalability\nCMSC 452\n\n\nsecondary memory\nCMSC 312\n\n\nsecurity\nCMSC 330, CMSC 340, CMSC 412, CMSC 413, CMSC 414, CMSC 452, CMSC 506, CMSC 512, CMSC 602, CMSC 612, CMSC 615, CMSC 618, CMSC 622, CMSC 623, CMSC 635\n\n\nsecurity maintenance\nCMSC 340\n\n\nsecurity paper survey\nCMSC 622\n\n\nsecurity technology\nCMSC 340\n\n\nsegmentation\nCMSC 630\n\n\nselected topics\nCMSC 191, CMSC 391, CMSC 491, CMSC 591, CMSC 691\n\n\nselection\nCMSC 254\n\n\nsemantics\nCMSC 403, CMSC 416, CMSC 516, CMSC 526\n\n\nseminar\nCMSC 702\n\n\nsequences\nCMSC 302\n\n\nsequencing\nCMSC 144, CMSC 210, CMSC 254, CMSC 302\n\n\nsequential data structures\nCMSC 254\n\n\nserverless coding\nCMSC 355\n\n\nservice oriented design techniques\nCMSC 355\n\n\nset theory\nCMSC 302\n\n\nsets\nCMSC 302\n\n\nshell programming\nCMSC 257\n\n\nsidechains\nCMSC 615\n\n\nsignals\nCMSC 257\n\n\nsimple data types\nCMSC 255\n\n\nsmall world phenomenon\nCMSC 412\n\n\nsocial aspects of technology\nCMSC 101, CMSC 451, CMSC 452\n\n\nsocial network\nCMSC 512\n\n\nsociotechnical responsibilities\nCMSC 235\n\n\nsocket programming\nCMSC 440\n\n\nsoftware architecture\nCMSC 355\n\n\nsoftware design\nCMSC 355\n\n\nsoftware development\nCMSC 320, CMSC 355, CMSC 420, CMSC 425, CMSC 451, CMSC 452, CMSC 455\n\n\nsoftware engineering life cycle\nCMSC 101\n\n\nsoftware lifecycle\nCMSC 355\n\n\nsoftware maintenance\nCMSC 355\n\n\nsoftware management\nCMSC 420, CMSC 425, CMSC 455, CMSC 525, CMSC 605, CMSC 618, CMSC 625\n\n\nsoftware modeling\nCMSC 355\n\n\nsoftware quality\nCMSC 355, CMSC 420, CMSC 502, CMSC 605, CMSC 624\n\n\nsoftware validation\nCMSC 355, CMSC 425, CMSC 525\n\n\nsoftware verification\nCMSC 355, CMSC 425, CMSC 525\n\n\nsorting\nCMSC 256, CMSC 401\n\n\nspark\nCMSC 603\n\n\nspell-checking\nCMSC 416\n\n\nsql\nCMSC 508, CMSC 608\n\n\nstacks\nCMSC 246, CMSC 256, CMSC 311\n\n\nstate vectors\nCMSC 410\n\n\nstatement\nCMSC 210\n\n\nstatic programming\nCMSC 425, CMSC 525\n\n\nstatistical learning\nCMSC 678\n\n\nstatistics\nCMSC 416, CMSC 510, CMSC 516, CMSC 636, CMSC 678\n\n\nsteganography\nCMSC 620\n\n\nstorage formats\nCMSC 611\n\n\nstrings\nCMSC 210, CMSC 246, CMSC 255, CMSC 403, CMSC 501\n\n\nstructured programming\nCMSC 210, CMSC 254\n\n\nstructures\nCMSC 254\n\n\nsub-routines\nCMSC 403\n\n\nsubqueries\nCMSC 508\n\n\nsummations\nCMSC 302\n\n\nsums\nCMSC 302\n\n\nsuperscalar computers\nCMSC 605\n\n\nsupervised data analysis\nCMSC 635\n\n\nsupport vector machines\nCMSC 635, CMSC 678\n\n\nswift\nCMSC 428\n\n\nsymbol table\nCMSC 403\n\n\nsymbolic program analysis\nCMSC 425, CMSC 525\n\n\nsymmetric key encryption\nCMSC 415\n\n\nsyntax\nCMSC 144, CMSC 255, CMSC 403, CMSC 404, CMSC 416, CMSC 516\n\n\nsystem performance\nCMSC 602\n\n\nsystem security\nCMSC 622\n\n\nsystems development\nCMSC 320\n\n\ntcp\nCMSC 440\n\n\ntcp layer security\nCMSC 622\n\n\nteamwork\nCMSC 441, CMSC 442, CMSC 452, CMSC 608\n\n\ntechnical paper reading\nCMSC 622\n\n\ntensor\nCMSC 410, CMSC 591, CMSC 630\n\n\ntest case coverage\nCMSC 425, CMSC 525\n\n\ntesting\nCMSC 320, CMSC 355, CMSC 425, CMSC 441, CMSC 442, CMSC 452, CMSC 525, CMSC 625\n\n\ntesting functionality\nCMSC 320\n\n\ntop down design\nCMSC 245, CMSC 254, CMSC 255\n\n\ntransformation\nCMSC 411\n\n\ntrap routines\nCMSC 311\n\n\ntrap subroutines\nCMSC 311\n\n\ntrees\nCMSC 256, CMSC 302\n\n\ntriggers\nCMSC 508\n\n\ntrust\nCMSC 622\n\n\ntuples\nCMSC 210, CMSC 254\n\n\nturing machines\nCMSC 303\n\n\ntypes, structs, and unions\nCMSC 257\n\n\nudp\nCMSC 440\n\n\numl\nCMSC 255, CMSC 256\n\n\nunicode\nCMSC 101\n\n\nunit design\nCMSC 311\n\n\nunitary evolution\nCMSC 410\n\n\nuniversal programs\nCMSC 612\n\n\nunsolvability\nCMSC 612\n\n\nunsupervised data analysis\nCMSC 635\n\n\nuser interface\nCMSC 475, CMSC 619\n\n\nvariables\nCMSC 144, CMSC 210\n\n\nviews\nCMSC 508\n\n\nvirtual memory\nCMSC 311\n\n\nvisual odometry\nCMSC 531\n\n\nvisualization\nCMSC 330\n\n\nvolatility memory forensics\nCMSC 654\n\n\nvon neumann model\nCMSC 311\n\n\nvpns\nCMSC 340\n\n\nweb development\nCMSC 320, CMSC 440\n\n\nweb search\nCMSC 416\n\n\nwriting functions\nCMSC 210\n\n\nxcode\nCMSC 428"
  }
]